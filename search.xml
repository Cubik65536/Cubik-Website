<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Minecraft 生存实用 Fabric 模组列表</title>
      <link href="/2023-08-27-Minecraft-Survival-Fabric-Mod-List/"/>
      <url>/2023-08-27-Minecraft-Survival-Fabric-Mod-List/</url>
      
        <content type="html"><![CDATA[<p>最近在重新整理我的 Minecraft 生电端的Mod，这次顺便把列表整理一下方便以后找Mod，也希望能给大家带来一些帮助。</p><span id="more"></span><p>我将会尽量使用 <a href="https://modrinth.com/">Modrinth</a>作为下载站，因为我个人认为这个站没有广告没有下载倒计时确实比 CurseForge的体验更好，不过如果 Modrinth 上没有的话我也会使用 CurseForge。</p><div class="tag-plugin note" color="orange"><div class="body"><p>本列表会进行简单分类，但是主要是以数字和字母顺序排序（0~9，然后A~Z）<br/>本列表中对版本的标注仅包含 Fabric 版 1.18 到 1.20 (最新版可能会更新，最低版大概率将保持 1.18)</p></div></div><h2 id="api">API</h2><ul><li><a href="https://modrinth.com/mod/architectury-api">ArchitecturyAPI</a><ul><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><a href="https://modrinth.com/mod/badpackets">bad packets</a><ul><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><ahref="https://www.curseforge.com/minecraft/mc-mods/cloth-api">ClothAPI</a><ul><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19</label></li><li><label><input type="checkbox" />1.19.x (except 1.19)</label></li><li><label><input type="checkbox" />1.20.x</label></li></ul></li></ul></li><li><a href="https://modrinth.com/mod/cloth-config">Cloth Config API</a><ul><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><a href="https://modrinth.com/mod/fabric-api">Fabric API</a><ul><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><a href="https://modrinth.com/mod/fabric-language-kotlin">FabricLanguage Kotlin</a><ul><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><ahref="https://www.curseforge.com/minecraft/mc-mods/iceberg-fabric">Iceberg</a><ul><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><a href="https://github.com/Hendrix-Shen/MagicLib">MaglicLib</a><ul><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><ahref="https://www.curseforge.com/minecraft/mc-mods/malilib">MaLiLib</a><ul><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li></ul><h2 id="优化性能光影录像">优化/性能/光影/录像</h2><div class="tag-plugin note" color="orange"><div class="body"><p>本列表 mod 除非单独备注则认为支持 1.18 到 1.20 全部版本</p></div></div><ul><li><ahref="https://modrinth.com/mod/better-sodium-video-settings-button">BetterSodium Video Settings Button</a></li><li><a href="https://modrinth.com/mod/ebe">Enhanced BlockEntities</a></li><li><a href="https://github.com/FakeDomi/FastChest">FastChest</a></li><li><a href="https://modrinth.com/mod/ferrite-core">FerriteCore</a></li><li><a href="https://modrinth.com/mod/indium">Indium</a></li><li><a href="https://modrinth.com/mod/iris">Iris Shaders</a></li><li><a href="https://modrinth.com/mod/krypton">Krypton</a></li><li><a href="https://modrinth.com/mod/lithium">Lithium</a></li><li><a href="https://www.replaymod.com/download/">Replay</a></li><li><a href="https://modrinth.com/mod/starlight">Starlight</a></li><li>Sodium<ul><li><a href="https://www.replaymod.com/download/">1.18.x ~ 1.19</a></li><li><a href="https://modrinth.com/mod/sodium">1.19.1 ~ 1.20.x</a></li></ul></li><li><a href="https://modrinth.com/mod/sodium-extra">SodiumExtra</a></li></ul><h2 id="高级聊天">高级聊天</h2><div class="tag-plugin note" color="orange"><div class="body"><p>本列表 mod 除非单独备注则认为支持 1.18 到 1.19.4 全部版本</p></div></div><ul><li><ahref="https://www.curseforge.com/minecraft/mc-mods/advancedchatcore">AdvancedChatCore</a></li><li><ahref="https://www.curseforge.com/minecraft/mc-mods/advancedchathud">AdvancedChatHUD</a></li></ul><h2 id="实用类">实用类</h2><ul><li><ahref="https://www.curseforge.com/minecraft/mc-mods/autoreconnect">AutoReconnect</a><ul><li>自动重新连接</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><a href="https://github.com/LXYan2333/Fabric-Bedrock-Miner">BedrockMiner</a><ul><li>"挖掘"基岩</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><ahref="https://www.curseforge.com/minecraft/mc-mods/beenfo">Beenfo</a><ul><li>蜂箱信息显示</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><a href="https://modrinth.com/mod/betterf3">BetterF3</a><ul><li>更好的 F3 菜单</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><a href="https://modrinth.com/mod/better-ping-display-fabric">BetterPing Display</a><ul><li>更好的延迟显示</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><a href="https://modrinth.com/mod/bobby">Bobby</a><ul><li>更改视距</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><a href="https://modrinth.com/mod/bbor">Bounding Box OutlineReloaded</a><ul><li>结构边框显示</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><a href="https://modrinth.com/mod/chest-tracker">ChestTracker</a><ul><li>箱子位置追踪</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><ahref="https://modrinth.com/mod/client-commands">clientcommands</a><ul><li>RNG 控制</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><a href="https://modrinth.com/mod/deathlog">DeathLog</a><ul><li>死亡日志</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><ahref="https://www.curseforge.com/minecraft/mc-mods/easiervillagertrading">EasierVillagerTrading</a><ul><li>快速村民交易</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><ahref="https://www.curseforge.com/minecraft/mc-mods/edit-sign">EditSign</a><ul><li>编辑告示牌内容</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" />1.20.x（已内置本功能）</label></li></ul></li></ul></li><li><ahref="https://www.curseforge.com/minecraft/mc-mods/firework-rocket-duration">FireworkRocket Duration</a><ul><li>烟花火箭持续时间显示</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><ahref="https://www.curseforge.com/minecraft/mc-mods/fps-reducer">FPSReducer</a><ul><li>FPS 减速器（在游戏失去焦点时降低游戏帧数）</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><a href="https://github.com/reserveword/IMBlocker">IMBlocker</a><ul><li>输入法冲突修复</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><a href="https://modrinth.com/mod/in-game-account-switcher">In-GameAccount Switcher</a><ul><li>在游戏内切换账号</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><ahref="https://www.curseforge.com/minecraft/mc-mods/inventory-hud-forge">InventoryHUD+</a><ul><li>背包显示</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><ahref="https://www.curseforge.com/minecraft/mc-mods/inventory-profiles-next">InventoryProfiles Next</a><ul><li>背包整理</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><a href="https://modrinth.com/mod/jade">Jade</a><ul><li>你在看什么？</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><a href="https://modrinth.com/mod/jade-addons-fabric">Jade Addon</a><ul><li>你在看什么？(Mod 显示扩展)</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><ahref="https://modrinth.com/mod/lambdynamiclights">LambDynamicLights</a><ul><li>动态光源</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><ahref="https://www.curseforge.com/minecraft/mc-mods/logical-zoom">LogicalZoom</a><ul><li>缩放</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><a href="https://modrinth.com/mod/memory-usage-screen">Memory UsageScreen</a><ul><li>内存使用情况显示</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><a href="https://modrinth.com/mod/mixintrace">MixinTrace</a><ul><li>更好的报错信息显示</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><a href="https://modrinth.com/mod/modmenu">Mod Menu</a><ul><li>Mod 菜单</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><a href="https://modrinth.com/mod/pistorder">Pistorder</a><ul><li>活塞推动顺序显示</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><ahref="https://www.curseforge.com/minecraft/mc-mods/quick-shulker">QuickShulker</a><ul><li>快速末影箱访问</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><ahref="https://modrinth.com/mod/reasonable-sorting/version/1.4">ReasonableSorting</a><ul><li>更合理的创造物品栏排序</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" />1.20.x</label></li></ul></li></ul></li><li><a href="https://modrinth.com/mod/rei">Roughly Enough Items(REI)</a><ul><li>物品栏查看物品合成配方/用途</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><ahref="https://www.curseforge.com/minecraft/mc-mods/trajectory-preview-fabric">TrajectoryPreview</a><ul><li>投掷物品（箭/末影珍珠/雪球/鸡蛋等）轨迹预览</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><a href="https://modrinth.com/mod/voxelmap-updated">VoxelMap</a><ul><li>小地图/世界地图</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><ahref="https://www.curseforge.com/minecraft/mc-mods/worldedit">WorldEdit</a><ul><li>创世神</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><ahref="https://www.curseforge.com/minecraft/mc-mods/worldeditcui-fabric">WorldEditCUI</a><ul><li>创世神可视化</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li></ul><h2 id="carpet-系列实用类-mod但因为数量众多且成系列所以单独列出">Carpet系列（实用类 mod，但因为数量众多且成系列，所以单独列出）</h2><div class="tag-plugin note" color="orange"><div class="body"><p>本列表 mod 除非单独备注则认为支持 1.18 到 1.20 全部版本</p></div></div><ul><li><a href="https://github.com/gnembon/fabric-carpet">FabricCarpet</a></li><li><a href="https://github.com/gnembon/carpet-extra">CarpetExtra</a></li><li><ahref="https://github.com/Minecraft-AMS/Carpet-AMS-Addition/blob/master/readme_folder/rules_cn.md">CarpetAMS Addition</a></li><li><a href="https://github.com/TISUnion/Carpet-TIS-Addition">Carpet TISAddition</a></li><li><a href="https://github.com/Nyan-Work/plusls-carpet-addition">PluslsCarpet Addition</a></li></ul><h2 id="masa-系列实用类-mod但因为数量众多且成系列所以单独列出">MASA系列（实用类 mod，但因为数量众多且成系列，所以单独列出）</h2><div class="tag-plugin note" color="orange"><div class="body"><p>本列表 mod 除非单独备注则认为支持 1.18 到 1.20 全部版本</p></div></div><ul><li><ahref="https://www.curseforge.com/minecraft/mc-mods/item-scroller">ItemScroller</a></li><li><ahref="https://www.curseforge.com/minecraft/mc-mods/litematica">Litematica</a></li><li><a href="https://github.com/plusls/MasaGadget">MasaGadget</a></li><li><ahref="https://www.curseforge.com/minecraft/mc-mods/minihud">MiniHUD</a></li><li><a href="https://github.com/Nyan-Work/oh-my-minecraft-client">Oh MyMinecraft Client</a></li><li><a href="https://modrinth.com/mod/syncmatica">Syncmatica</a></li><li><ahref="https://github.com/Fallen-Breath/tweakermore">Tweakermore</a></li><li><ahref="https://www.curseforge.com/minecraft/mc-mods/tweakeroo">Tweakeroo</a></li></ul><h2 id="美化皮肤gui等">美化（皮肤/GUI等）</h2><ul><li><a href="https://modrinth.com/mod/3dskinlayers">3D Skin Layers</a><ul><li>3D 皮肤显示</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><ahref="https://www.curseforge.com/minecraft/mc-mods/appleskin">AppleSkin</a><ul><li>饱食度显示</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><ahref="https://www.curseforge.com/minecraft/mc-mods/blur-fabric">Blur</a><ul><li>在打开 GUI 时模糊背景</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><a href="https://modrinth.com/mod/cit-resewn">CIT Resewn</a><ul><li>自定义物品纹理</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><a href="https://modrinth.com/mod/continuity">Continuity</a><ul><li>连接纹理</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><a href="https://modrinth.com/mod/dark-loading-screen">Dark LoadingScreen</a><ul><li>暗色加载界面</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><ahref="https://www.curseforge.com/minecraft/mc-mods/detail-armor-bar">DetailArmor Bar</a><ul><li>更好的盔甲条</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><ahref="https://github.com/LucunJi/ExtraPlayerRenderer">ExtraPlayerRenderer</a><ul><li>额外的玩家渲染</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><ahref="https://www.curseforge.com/minecraft/mc-mods/first-person-model">First-personModel</a><ul><li>更好的第一人称动画</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><ahref="https://www.curseforge.com/minecraft/mc-mods/not-enough-animations">NotEnough Animations</a><ul><li>更好的第三人称动画</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><a href="https://modrinth.com/mod/minecraftcapes">MinecraftCapes</a><ul><li>自定义披风</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><ahref="https://www.curseforge.com/minecraft/mc-mods/minimepets">MiniMePets</a><ul><li>应用玩家皮肤到宠物上</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><ahref="https://www.curseforge.com/minecraft/mc-mods/talkbubbles">TalkBubbles</a><ul><li>聊天气泡</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li><li><ahref="https://www.curseforge.com/minecraft/mc-mods/waveycapes">WaveyCapes</a><ul><li>飘动的披风</li><li>版本支持：<ul class="task-list"><li><label><input type="checkbox" checked="" />1.18.x</label></li><li><label><input type="checkbox" checked="" />1.19.x</label></li><li><label><input type="checkbox" checked="" />1.20.x</label></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> 游戏教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Minecraft </tag>
            
            <tag> Fabric Mods </tag>
            
            <tag> 生存 </tag>
            
            <tag> 生电 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 年 6 至 8 月总结</title>
      <link href="/2023-06-07-08-MonthJournal/"/>
      <url>/2023-06-07-08-MonthJournal/</url>
      
        <content type="html"><![CDATA[<p>好久没有写月报了，这几个月发生了不少事情，来跟我一起回顾一下吧！</p><span id="more"></span><h2 id="月">6 月</h2><h3 id="毕业">毕业</h3><p>在中学的 5 年生活结束了！考试什么的都还算顺利，然后 6 月 21 日...</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/cdm-grad-fb.png" fancybox="true"/></div></div><p>我所在的第 256届正式毕业了，可惜我没等到毕业典礼结束扔毕业帽，因为...</p><h3 id="回国">回国</h3><p>距离毕业典礼结束还有一段时间我就和母亲往机场赶，这是我到加拿大将近 8年后第一次回国...</p><h4 id="西行之旅">西行之旅</h4><p>回国之后见了一下长辈们，其中，我的舅爷和舅奶每年都会去包头住一段时间，于是叔叔提议开车送他们回包头，而且他要去银川办事，所以可以顺便让我、他和我父亲去那边玩一圈，于是我们三个在几乎没有什么详细计划的情况下就出发了...</p><p>这一程吃到了不少美食也看到了很多风景，但是最让我印象深刻的应该就是金昌的火星一号基地了。我可能会再单独写篇文来介绍一下这个地方，不过进场火星基地作为以航天为主题的景点，拥有一个火星基地模拟场馆，一个有各种展品的展示区，以及一片居住区。放几个图：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/2F4FA521-8D76-4E6C-B29F-D5E7669AFC2C_1_105_c.jpeg" fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/7D4AE328-C4DC-432D-BBF0-F114CF84D2B2_4_5005_c.jpeg" fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/FC3E84A9-B94E-42C8-BC3D-840E161CCA05_1_105_c.jpeg" fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/E8563805-B23B-48E9-8EF5-C2E12FAF550E_1_105_c.jpeg" fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/CC41E60D-3B16-4E8D-9762-49A1BB85F447_1_105_c.jpeg" fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/DA46DF71-B769-4654-ABD2-048D7D33D85E_4_5005_c.jpeg" fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/BB6EAC39-DB7E-4D4E-A489-480C9698BE80_1_105_c.jpeg" fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/0E37377E-88D4-406A-95A5-98B90F55C9DB_1_105_c.jpeg" fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/1D1BE6E8-D14E-4691-9D79-8C42213CEF3A_1_102_o.jpeg" fancybox="true"/></div></div><p>我们甚至在火星基地景区内部吃了个烧烤并住了一晚，挺奇特的体验。另外一个令我印象深刻的是赛里木湖，我们还在湖边住了一晚，来看看航拍吧（已经过景区要求的报备程序，飞手是我，一个无人机新手）：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/1689437195768.mp4" fancybox="true"/></div></div><p>(如果无法播放，可以<ahref="https://img.cubik65536.top/1689437195768.mp4">点击这里</a>查看)</p><p>之后回北京我和父亲坐了普快和高铁，算是第一次坐火车了。那这趟旅行先讲这么多。</p><h2 id="月-1">7 月</h2><p>7 月大部分时间都待在家里，但是也出了趟"远“门。我和 <ahref="https://mmdjiji.com"><span class="citation"data-cites="mmdjiji">@mmdjiji</span></a> 一起去了趟 IDO 42nd动漫游戏嘉年华，这也算是我第一次去漫展了，放几张图吧：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/7f0e483a7a133d5d6875aea22068f0c9.jpg" fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/IMG_1616.jpeg" fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/IMG_1596.jpeg" fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/9DD77FA3-5A53-4667-AA27-3DC91C1F910B_1_105_c.jpeg" fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/642E9B1D-2628-4C61-94CD-719E81D53073_1_105_c.jpeg" fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/27A65E5F-C0E2-434A-BC31-A1CE1988F085_1_105_c.jpeg" fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/4A4AA78C-FD29-4B55-8F58-89058977CD3A_1_105_c.jpeg" fancybox="true"/></div></div><p>社恐不敢拍照！呜呜呜</p><p>不过还是感谢吉吉送我的票～</p><h2 id="月-2">8 月</h2><p>又要回加拿大了...进入了新的学校，不过还是成功考上了想要的计算机科学专业（据部门主任说，我们系是今年最难进的之一）。</p><p>另外 8 月 30 日是我的生日，还有 4 天（写稿时是 26 号），那提前祝我 18岁生日快乐吧！</p><div class="tag-plugin quot"><h2 class="content" id="那么，先这样了，下个月见！" type="text"><a href="#那么，先这样了，下个月见！" class="headerlink" title="那么，先这样了，下个月见！"></a>那么，先这样了，下个月见！</h2></div>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LCTT 翻译转载] 软件开发｜Rust 基础系列 #8：编写里程碑 Rust 程序</title>
      <link href="/lctt/translation-linuxcn-article-15935-1/"/>
      <url>/lctt/translation-linuxcn-article-15935-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文：<a href="https://itsfoss.com/milestone-rust-program/">RustBasics Series #8: Write the Milestone Rust Program</a> 首发：<ahref="https://linux.cn/article-15935-1.html">Rust 基础系列#8：编写里程碑 Rust 程序</a> @<a href="https://linux.cn/">Linux 中国</a>作者：<a href="https://itsfoss.com/author/pratham/">Pratham Patel</a>译者：<a href="https://linux.cn/lctt/">LCTT</a> <ahref="https://github.com/Cubik65536">Cubik</a></p></blockquote><span id="more"></span><h2 id="rust-基础系列-8编写里程碑-rust-程序">Rust 基础系列#8：编写里程碑 Rust 程序</h2><p><imgsrc="https://img.linux.net.cn/data/attachment/album/202306/23/114333ni9fkzpykmz37zpu.jpg" /></p><p>到目前为止，我们已经讲解了包括 <ahref="https://www.cubik65536.top/lctt/translation-linuxcn-article-15771-1/">变量、可变性、常量</a>、<ahref="https://www.cubik65536.top/lctt/translation-linuxcn-article-15811-1/">数据类型</a>、<ahref="https://www.cubik65536.top/lctt/translation-linuxcn-article-15855-1/">函数</a>、<ahref="https://www.cubik65536.top/lctt/translation-linuxcn-article-15896-1/">if-else语句</a> 和 <ahref="https://www.cubik65536.top/lctt/translation-linuxcn-article-15908-1/">循环</a>在内的一些关于 Rust 编程的基础知识。</p><p>在 Rust 基础系列的最后一章里，让我们现在用 Rust编写一个程序，使用这些主题，以便更好地理解它们在现实世界中的用途。让我们来编写一个相对简单的程序，用来从水果市场订购水果。</p><h3 id="我们程序的基本结构">我们程序的基本结构</h3><p>来让我们首先向用户问好，并告诉他们如何与程序交互。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;欢迎来到水果市场！&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;请选择要购买的水果。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;\n可以购买的水果：苹果、香蕉、橘子、芒果、葡萄&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;购买完成后，请输入“quit”或“q”。\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取用户输入">获取用户输入</h3><p>上面的代码非常简单。目前，你不知道接下来该做什么，因为你不知道用户接下来想做什么。</p><p>所以让我们添加一些代码，接受用户输入并将其存储在某个地方以便稍后解析，然后根据用户输入采取适当的操作。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;欢迎来到水果市场！&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;请选择要购买的水果。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;\n可以购买的水果：苹果、香蕉、橘子、芒果、葡萄&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;购买完成后，请输入“quit”或“q”。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取用户输入</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">user_input</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    io::<span class="title function_ invoke__">stdin</span>()</span><br><span class="line">        .<span class="title function_ invoke__">read_line</span>(&amp;<span class="keyword">mut</span> user_input)</span><br><span class="line">        .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;无法读取用户输入。&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有三个新元素需要告诉你。所以让我们对这些新元素进行浅层次的探索。</p><h4 id="理解-use-关键字">1. 理解 use 关键字</h4><p>在这个程序的第一行，你可能已经注意到我们“使用”（哈哈！）了一个叫做<code>use</code> 的新关键字。Rust 中的 <code>use</code> 关键字类似于C/C++ 中的 <code>#include</code> 指令和 Python 中的 <code>import</code>关键字。使用 <code>use</code> 关键字，我们从 Rust 标准库<code>std</code> 中“导入”了 <code>io</code>（输入输出）模块。</p><blockquote><p>LCTT 译注：“使用”在原文中为“use”，与新介绍的关键字一样。</p></blockquote><p>你可能会想知道为什么我们在可以使用 <code>println</code>宏来将某些内容输出到标准输出时，导入 <code>io</code> 模块是必要的。Rust的标准库有一个叫做 <code>prelude</code>的模块，它会自动被包含。该模块包含了 Rust程序员可能需要使用的所有常用函数，比如 <code>println</code>宏。（你可以在 <ahref="https://doc.rust-lang.org/std/prelude/index.html">这里</a>阅读更多关于 <code>std::prelude</code> 模块的内容。）</p><p>Rust 标准库 <code>std</code> 中的 <code>io</code>模块是接受用户输入所必需的。因此，我们在程序的第一行添加了一个<code>use</code> 语句。</p><h4 id="理解-rust-中的-string-类型">2. 理解 Rust 中的 String 类型</h4><p>在第 11 行，我创建了一个新的可变变量<code>user_input</code>，正如它的名字所表示的那样，它将被用来存储用户输入。但是在同一行，你可能已经注意到了一些“新的”东西（哈哈，又来了！）。</p><blockquote><p>LCTT 译注：“新的”在原文中为“new”，在第 11 行的代码中，原作者使用了<code>String::new()</code>函数，所以此处的梗与“使用”一样，原作者使用了一个在代码中用到的单词。</p></blockquote><p>我没有使用双引号（<code>""</code>）声明一个空字符串，而是使用<code>String::new()</code> 函数来创建一个新的空字符串。</p><p><code>""</code> 与 <code>String::new()</code> 的区别是你将在 Rust系列的后续文章中学习到的。现在，只需要知道，使用<code>String::new()</code>函数，你可以创建一个<strong>可变</strong>的，<strong>位于堆上</strong>的字符串。</p><p>如果我使用 <code>""</code>创建了一个字符串，我将得到一个叫做“字符串切片”的东西。字符串切片的内容也位于堆上，但是字符串本身是<strong>不可变</strong>的。所以，即使变量本身是可变的，作为字符串存储的实际数据是不可变的，需要被<strong>覆盖</strong>而不是修改。</p><h4 id="接受用户输入">3. 接受用户输入</h4><p>在第 12 行，我调用了 <code>std::io</code> 的 <code>stdin()</code>函数。如果我在程序的开头没有导入 <code>std::io</code>模块，那么这一行将是 <code>std::io::stdin()</code> 而不是<code>io::stdin()</code>。</p><p><code>sdtin()</code>函数返回一个终端的输入句柄。<code>read_line()</code>函数抓住这个输入句柄，然后，正如它的名字所暗示的那样，读取一行输入。这个函数接受一个可变字符串的引用。所以，我传入了<code>user_input</code> 变量，通过在它前面加上<code>&amp;mut</code>，使它成为一个可变引用。</p><blockquote><p>⚠️ <code>read_line()</code> 函数有一个<em>怪癖</em>。这个函数在用户按下回车键之后 <strong>停止</strong>读取输入。因此，这个函数也会记录换行符（<code>\n</code>），并将一个换行符存储在你传入的可变字符串变量的结尾处。</p></blockquote><p>所以，请在处理它时要么考虑到这个换行符，要么将它删除。</p><h3 id="rust-中的错误处理入门">Rust 中的错误处理入门</h3><p>最后，在这个链的末尾有一个 <code>expect()</code>函数。让我们稍微偏题一下，来理解为什么要调用这个函数。</p><p><code>read_line()</code> 函数返回一个叫做 <code>Result</code>的枚举。我会在后面的文章中讲解 Rust 中的枚举，但是现在只需要知道，枚举在Rust 中是非常强大的。这个 <code>Result</code>枚举返回一个值，告诉程序员在读取用户输入时是否发生了错误。</p><p><code>expect()</code> 函数接受这个 <code>Result</code>枚举，并检查结果是否正常。如果没有发生错误，什么都不会发生。但是如果发生了错误，我传入的消息（<code>无法读取用户输入。</code>）将会被打印到STDERR，<em>程序将会退出</em>。</p><blockquote><p>📋 <strong>所有我简要提及的新概念将会在后续的新 Rust系列文章中讲解。</strong></p></blockquote><p>现在我希望你应该已经理解了这些新概念，让我们添加更多的代码来增加程序的功能。</p><h3 id="验证用户输入">验证用户输入</h3><p>我接受了用户的输入，但是我没有对其进行验证。在当前的上下文中，验证意味着用户输入了一些“命令”，我们希望能够处理这些命令。目前，这些命令有两个“类别”。</p><p>第一类用户可以输入的命令是用户希望购买的水果的名称。第二个命令表示用户想要退出程序。</p><p>我们的任务现在是确保用户输入不会偏离 <em>可接受的命令</em>。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;欢迎来到水果市场！&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;请选择要购买的水果。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;\n可以购买的水果：苹果、香蕉、橘子、芒果、葡萄&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;购买完成后，请输入“quit”或“q”。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取用户输入</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">user_input</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    io::<span class="title function_ invoke__">stdin</span>()</span><br><span class="line">        .<span class="title function_ invoke__">read_line</span>(&amp;<span class="keyword">mut</span> user_input)</span><br><span class="line">        .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;无法读取用户输入。&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证用户输入</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">valid_inputs</span> = [<span class="string">&quot;苹果&quot;</span>, <span class="string">&quot;香蕉&quot;</span>, <span class="string">&quot;橘子&quot;</span>, <span class="string">&quot;芒果&quot;</span>, <span class="string">&quot;葡萄&quot;</span>, <span class="string">&quot;quit&quot;</span>, <span class="string">&quot;q&quot;</span>];</span><br><span class="line">    user_input = user_input.<span class="title function_ invoke__">trim</span>().<span class="title function_ invoke__">to_lowercase</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">input_error</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">input</span> <span class="keyword">in</span> valid_inputs &#123;</span><br><span class="line">        <span class="keyword">if</span> input == user_input &#123;</span><br><span class="line">            input_error = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要使验证更容易，我创建了一个叫做 <code>valid_inputs</code>的字符串切片数组（第 17行）。这个数组包含了所有可以购买的水果的名称，以及字符串切片<code>q</code> 和<code>quit</code>，让用户可以传达他们是否希望退出。</p><p>用户可能不知道我们希望输入是什么样的。用户可能会输入“Apple”、“apple”或“APPLE” 来表示他们想要购买苹果。我们的工作是正确处理这些输入。</p><p>在第 18 行，我通过调用 <code>trim()</code> 函数从<code>user_input</code>字符串中删除了尾部的换行符。为了处理上面提到的问题，我使用<code>to_lowercase()</code> 函数将所有字符转换为小写，这样“Apple”、“apple” 和 “APPLE” 都会变成 “apple”。</p><p>现在，来看第 19 行，我创建了一个名为 <code>input_error</code>的可变布尔变量，初始值为 <code>true</code>。稍后在第 20 行，我创建了一个<code>for</code> 循环，它遍历了 <code>valid_inputs</code>数组的所有元素（字符串切片），并将迭代的模式存储在 <code>input</code>变量中。</p><p>在循环内部，我检查用户输入是否等于其中一个有效字符串，如果是，我将<code>input_error</code> 布尔值的值设置为 <code>false</code>，并跳出<code>for</code> 循环。</p><h3 id="处理无效输入">处理无效输入</h3><p>现在是时候处理无效输入了。这可以通过将一些代码移动到无限循环中来完成，如果用户给出无效输入，则<em>继续</em> 该无限循环。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;欢迎来到水果市场！&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;请选择要购买的水果。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">valid_inputs</span> = [<span class="string">&quot;苹果&quot;</span>, <span class="string">&quot;香蕉&quot;</span>, <span class="string">&quot;橘子&quot;</span>, <span class="string">&quot;芒果&quot;</span>, <span class="string">&quot;葡萄&quot;</span>, <span class="string">&quot;quit&quot;</span>, <span class="string">&quot;q&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="symbol">&#x27;mart</span>: <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">user_input</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;\n可以购买的水果：苹果、香蕉、橘子、芒果、葡萄&quot;</span>);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;购买完成后，请输入“quit”或“q”。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取用户输入</span></span><br><span class="line">        io::<span class="title function_ invoke__">stdin</span>()</span><br><span class="line">            .<span class="title function_ invoke__">read_line</span>(&amp;<span class="keyword">mut</span> user_input)</span><br><span class="line">            .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;无法读取用户输入。&quot;</span>);</span><br><span class="line">        user_input = user_input.<span class="title function_ invoke__">trim</span>().<span class="title function_ invoke__">to_lowercase</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证用户输入</span></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">input_error</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">input</span> <span class="keyword">in</span> valid_inputs &#123;</span><br><span class="line">            <span class="keyword">if</span> input == user_input &#123;</span><br><span class="line">                input_error = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理无效输入</span></span><br><span class="line">        <span class="keyword">if</span> input_error &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;错误: 请输入有效的输入&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span> <span class="symbol">&#x27;mart</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，我将一些代码移动到了循环内部，并重新组织了一下代码，以便更好地处理循环的引入。在循环内部，第31 行，如果用户输入了一个无效的字符串，我将 <code>continue</code><code>mart</code> 循环。</p><h3 id="对用户输入做出反应">对用户输入做出反应</h3><p>现在，所有其他的状况都已经处理好了，是时候写一些代码来让用户从水果市场购买水果了，当用户希望退出时，程序也会退出。</p><p>因为你也知道用户选择了哪种水果，所以让我们问一下他们打算购买多少，并告诉他们输入数量的格式。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;欢迎来到水果市场！&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;请选择要购买的水果。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">valid_inputs</span> = [<span class="string">&quot;苹果&quot;</span>, <span class="string">&quot;香蕉&quot;</span>, <span class="string">&quot;橘子&quot;</span>, <span class="string">&quot;芒果&quot;</span>, <span class="string">&quot;葡萄&quot;</span>, <span class="string">&quot;quit&quot;</span>, <span class="string">&quot;q&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="symbol">&#x27;mart</span>: <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">user_input</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">quantity</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;\n可以购买的水果：苹果、香蕉、橘子、芒果、葡萄&quot;</span>);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;购买完成后，请输入“quit”或“q”。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取用户输入</span></span><br><span class="line">        io::<span class="title function_ invoke__">stdin</span>()</span><br><span class="line">            .<span class="title function_ invoke__">read_line</span>(&amp;<span class="keyword">mut</span> user_input)</span><br><span class="line">            .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;无法读取用户输入。&quot;</span>);</span><br><span class="line">        user_input = user_input.<span class="title function_ invoke__">trim</span>().<span class="title function_ invoke__">to_lowercase</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证用户输入</span></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">input_error</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">input</span> <span class="keyword">in</span> valid_inputs &#123;</span><br><span class="line">            <span class="keyword">if</span> input == user_input &#123;</span><br><span class="line">                input_error = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理无效输入</span></span><br><span class="line">        <span class="keyword">if</span> input_error &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;错误: 请输入有效的输入&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span> <span class="symbol">&#x27;mart</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果用户想要退出，就退出</span></span><br><span class="line">        <span class="keyword">if</span> user_input == <span class="string">&quot;q&quot;</span> || user_input == <span class="string">&quot;quit&quot;</span> &#123;</span><br><span class="line">            <span class="keyword">break</span> <span class="symbol">&#x27;mart</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取数量</span></span><br><span class="line">        <span class="built_in">println!</span>(</span><br><span class="line">            <span class="string">&quot;\n你选择购买的水果是 \&quot;&#123;&#125;\&quot;。请输入以千克为单位的数量。</span></span><br><span class="line"><span class="string">（1 千克 500 克的数量应该输入为 &#x27;1.5&#x27;。）&quot;</span>,</span><br><span class="line">            user_input</span><br><span class="line">        );</span><br><span class="line">        io::<span class="title function_ invoke__">stdin</span>()</span><br><span class="line">            .<span class="title function_ invoke__">read_line</span>(&amp;<span class="keyword">mut</span> quantity)</span><br><span class="line">            .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;无法读取用户输入。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在第 11 行，我声明了另一个可变变量，它的值是一个空字符串，在第 48行，我接受了用户的输入，但是这次是用户打算购买的水果的数量。</p><h4 id="解析数量">解析数量</h4><p>我刚刚增加了一些代码，以已知的格式接受数量，但是这些数据被存储为字符串。我需要从中提取出浮点数。幸运的是，这可以通过<code>parse()</code> 方法来完成。</p><p>就像 <code>read_line()</code> 方法一样，<code>parse()</code>方法返回一个 <code>Result</code> 枚举。<code>parse()</code> 方法返回<code>Result</code> 枚举的原因可以通过我们试图实现的内容来轻松理解。</p><p>我正在接受用户的字符串，并尝试将其转换为浮点数。浮点数有两个可能的值。一个是浮点数本身，另一个是小数。</p><p>字符串可以包含字母，但是浮点数不行。所以，如果用户输入的不是浮点数和小数，<code>parse()</code>函数将会返回一个错误。</p><p>因此，这个错误也需要处理。我们将使用 <code>expect()</code>函数来处理这个错误。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;欢迎来到水果市场！&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;请选择要购买的水果。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">valid_inputs</span> = [<span class="string">&quot;苹果&quot;</span>, <span class="string">&quot;香蕉&quot;</span>, <span class="string">&quot;橘子&quot;</span>, <span class="string">&quot;芒果&quot;</span>, <span class="string">&quot;葡萄&quot;</span>, <span class="string">&quot;quit&quot;</span>, <span class="string">&quot;q&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="symbol">&#x27;mart</span>: <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">user_input</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">quantity</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;\n可以购买的水果：苹果、香蕉、橘子、芒果、葡萄&quot;</span>);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;购买完成后，请输入“quit”或“q”。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取用户输入</span></span><br><span class="line">        io::<span class="title function_ invoke__">stdin</span>()</span><br><span class="line">            .<span class="title function_ invoke__">read_line</span>(&amp;<span class="keyword">mut</span> user_input)</span><br><span class="line">            .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;无法读取用户输入。&quot;</span>);</span><br><span class="line">        user_input = user_input.<span class="title function_ invoke__">trim</span>().<span class="title function_ invoke__">to_lowercase</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证用户输入</span></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">input_error</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">input</span> <span class="keyword">in</span> valid_inputs &#123;</span><br><span class="line">            <span class="keyword">if</span> input == user_input &#123;</span><br><span class="line">                input_error = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理无效输入</span></span><br><span class="line">        <span class="keyword">if</span> input_error &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;错误: 请输入有效的输入&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span> <span class="symbol">&#x27;mart</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果用户想要退出，就退出</span></span><br><span class="line">        <span class="keyword">if</span> user_input == <span class="string">&quot;q&quot;</span> || user_input == <span class="string">&quot;quit&quot;</span> &#123;</span><br><span class="line">            <span class="keyword">break</span> <span class="symbol">&#x27;mart</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取数量</span></span><br><span class="line">        <span class="built_in">println!</span>(</span><br><span class="line">            <span class="string">&quot;\n你选择购买的水果是 \&quot;&#123;&#125;\&quot;。请输入以千克为单位的数量。</span></span><br><span class="line"><span class="string">（1 千克 500 克的数量应该输入为 &#x27;1.5&#x27;。）&quot;</span>,</span><br><span class="line">            user_input</span><br><span class="line">        );</span><br><span class="line">        io::<span class="title function_ invoke__">stdin</span>()</span><br><span class="line">            .<span class="title function_ invoke__">read_line</span>(&amp;<span class="keyword">mut</span> quantity)</span><br><span class="line">            .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;无法读取用户输入。&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">quantity</span>: <span class="type">f64</span> = quantity</span><br><span class="line">            .<span class="title function_ invoke__">trim</span>()</span><br><span class="line">            .<span class="title function_ invoke__">parse</span>()</span><br><span class="line">            .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;请输入有效的数量。&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如你所见，我通过变量遮蔽将解析后的浮点数存储在变量<code>quantity</code> 中。为了告诉 <code>parse()</code>函数，我的意图是将字符串解析为 <code>f64</code>，我手动将变量<code>quantity</code> 的类型注释为 <code>f64</code>。</p><p>现在，<code>parse()</code> 函数将会解析字符串并返回一个<code>f64</code> 或者一个错误，<code>expect()</code>函数将会处理这个错误。</p><h3 id="计算价格-最后的修饰">计算价格 + 最后的修饰</h3><p>现在我们知道了用户想要购买的水果及其数量，现在是时候进行计算了，并让用户知道结果/总价了。</p><p>为了真实起见，我将为每种水果设置两个价格。第一个价格是零售价，我们在购买少量水果时向水果供应商支付的价格。水果的第二个价格是当有人批量购买水果时支付的批发价。</p><p>批发价将会在订单数量大于被认为是批发购买的最低订单数量时确定。这个最低订单数量对于每种水果都是不同的。每种水果的价格都是每千克多少卢比。</p><p>想好了逻辑，下面是最终的程序。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> APPLE_RETAIL_PER_KG: <span class="type">f64</span> = <span class="number">60.0</span>;</span><br><span class="line"><span class="keyword">const</span> APPLE_WHOLESALE_PER_KG: <span class="type">f64</span> = <span class="number">45.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BANANA_RETAIL_PER_KG: <span class="type">f64</span> = <span class="number">20.0</span>;</span><br><span class="line"><span class="keyword">const</span> BANANA_WHOLESALE_PER_KG: <span class="type">f64</span> = <span class="number">15.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ORANGE_RETAIL_PER_KG: <span class="type">f64</span> = <span class="number">100.0</span>;</span><br><span class="line"><span class="keyword">const</span> ORANGE_WHOLESALE_PER_KG: <span class="type">f64</span> = <span class="number">80.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MANGO_RETAIL_PER_KG: <span class="type">f64</span> = <span class="number">60.0</span>;</span><br><span class="line"><span class="keyword">const</span> MANGO_WHOLESALE_PER_KG: <span class="type">f64</span> = <span class="number">55.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> GRAPES_RETAIL_PER_KG: <span class="type">f64</span> = <span class="number">120.0</span>;</span><br><span class="line"><span class="keyword">const</span> GRAPES_WHOLESALE_PER_KG: <span class="type">f64</span> = <span class="number">100.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;欢迎来到水果市场！&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;请选择要购买的水果。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">valid_inputs</span> = [<span class="string">&quot;苹果&quot;</span>, <span class="string">&quot;香蕉&quot;</span>, <span class="string">&quot;橘子&quot;</span>, <span class="string">&quot;芒果&quot;</span>, <span class="string">&quot;葡萄&quot;</span>, <span class="string">&quot;quit&quot;</span>, <span class="string">&quot;q&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="symbol">&#x27;mart</span>: <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">user_input</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">quantity</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;\n可以购买的水果：苹果、香蕉、橘子、芒果、葡萄&quot;</span>);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;购买完成后，请输入“quit”或“q”。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取用户输入</span></span><br><span class="line">        io::<span class="title function_ invoke__">stdin</span>()</span><br><span class="line">            .<span class="title function_ invoke__">read_line</span>(&amp;<span class="keyword">mut</span> user_input)</span><br><span class="line">            .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;无法读取用户输入。&quot;</span>);</span><br><span class="line">        user_input = user_input.<span class="title function_ invoke__">trim</span>().<span class="title function_ invoke__">to_lowercase</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证用户输入</span></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">input_error</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">input</span> <span class="keyword">in</span> valid_inputs &#123;</span><br><span class="line">            <span class="keyword">if</span> input == user_input &#123;</span><br><span class="line">                input_error = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理无效输入</span></span><br><span class="line">        <span class="keyword">if</span> input_error &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;错误: 请输入有效的输入&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span> <span class="symbol">&#x27;mart</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果用户想要退出，就退出</span></span><br><span class="line">        <span class="keyword">if</span> user_input == <span class="string">&quot;q&quot;</span> || user_input == <span class="string">&quot;quit&quot;</span> &#123;</span><br><span class="line">            <span class="keyword">break</span> <span class="symbol">&#x27;mart</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取数量</span></span><br><span class="line">        <span class="built_in">println!</span>(</span><br><span class="line">            <span class="string">&quot;\n你选择购买的水果是 \&quot;&#123;&#125;\&quot;。请输入以千克为单位的数量。</span></span><br><span class="line"><span class="string">（1 千克 500 克的数量应该输入为 &#x27;1.5&#x27;。）&quot;</span>,</span><br><span class="line">            user_input</span><br><span class="line">        );</span><br><span class="line">        io::<span class="title function_ invoke__">stdin</span>()</span><br><span class="line">            .<span class="title function_ invoke__">read_line</span>(&amp;<span class="keyword">mut</span> quantity)</span><br><span class="line">            .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;无法读取用户输入。&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">quantity</span>: <span class="type">f64</span> = quantity</span><br><span class="line">            .<span class="title function_ invoke__">trim</span>()</span><br><span class="line">            .<span class="title function_ invoke__">parse</span>()</span><br><span class="line">            .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;请输入有效的数量。&quot;</span>);</span><br><span class="line"></span><br><span class="line">        total += <span class="title function_ invoke__">calc_price</span>(quantity, user_input);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;\n\n总价是 &#123;&#125; 卢比。&quot;</span>, total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">calc_price</span>(quantity: <span class="type">f64</span>, fruit: <span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">f64</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> fruit == <span class="string">&quot;apple&quot;</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">price_apple</span>(quantity)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> fruit == <span class="string">&quot;banana&quot;</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">price_banana</span>(quantity)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> fruit == <span class="string">&quot;orange&quot;</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">price_orange</span>(quantity)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> fruit == <span class="string">&quot;mango&quot;</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">price_mango</span>(quantity)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">price_grapes</span>(quantity)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">price_apple</span>(quantity: <span class="type">f64</span>) <span class="punctuation">-&gt;</span> <span class="type">f64</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> quantity &gt; <span class="number">7.0</span> &#123;</span><br><span class="line">        quantity * APPLE_WHOLESALE_PER_KG</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        quantity * APPLE_RETAIL_PER_KG</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">price_banana</span>(quantity: <span class="type">f64</span>) <span class="punctuation">-&gt;</span> <span class="type">f64</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> quantity &gt; <span class="number">4.0</span> &#123;</span><br><span class="line">        quantity * BANANA_WHOLESALE_PER_KG</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        quantity * BANANA_RETAIL_PER_KG</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">price_orange</span>(quantity: <span class="type">f64</span>) <span class="punctuation">-&gt;</span> <span class="type">f64</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> quantity &gt; <span class="number">3.5</span> &#123;</span><br><span class="line">        quantity * ORANGE_WHOLESALE_PER_KG</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        quantity * ORANGE_RETAIL_PER_KG</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">price_mango</span>(quantity: <span class="type">f64</span>) <span class="punctuation">-&gt;</span> <span class="type">f64</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> quantity &gt; <span class="number">5.0</span> &#123;</span><br><span class="line">        quantity * MANGO_WHOLESALE_PER_KG</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        quantity * MANGO_RETAIL_PER_KG</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">price_grapes</span>(quantity: <span class="type">f64</span>) <span class="punctuation">-&gt;</span> <span class="type">f64</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> quantity &gt; <span class="number">2.0</span> &#123;</span><br><span class="line">        quantity * GRAPES_WHOLESALE_PER_KG</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        quantity * GRAPES_RETAIL_PER_KG</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比之前的版本，我做了一些改动……</p><p>水果的价格可能会波动，但是在我们程序的生命周期内，这些价格不会波动。所以我将每种水果的零售价和批发价存储在常量中。我将这些常量定义在<code>main()</code> 函数之外（即全局常量），因为我不会在<code>main()</code> 函数内计算每种水果的价格。这些常量被声明为<code>f64</code>，因为它们将与 <code>quantity</code> 相乘，而<code>quantity</code> 是 <code>f64</code>。记住，Rust 没有隐式类型转换;)</p><p>当水果名称和用户想要购买的数量被存下来之后，<code>calc_price()</code>函数被调用来计算用户指定数量的水果的价格。这个函数接受水果名称和数量作为参数，并将价格作为<code>f64</code> 返回。</p><p>当你看到 <code>calc_price()</code>函数的内部时，你会发现它是许多人所说的包装函数。它被称为包装函数，因为它调用其他函数来完成它的脏活。</p><p>因为每种水果都有不同的最低订单数量，才能被认为是批发购买，为了确保代码在未来可以轻松维护，每种水果都有单独的函数负责计算价格。</p><p>所以，<code>calc_price()</code>函数所做的就是确定用户选择了哪种水果，并调用相应的函数来计算所选水果的价格。这些水果特定的函数只接受一个参数：数量。这些水果特定的函数将价格作为<code>f64</code> 返回。</p><p>现在，<code>price_*()</code>函数只做一件事。它们检查订单数量是否大于被认为是批发购买的最低订单数量。如果是这样，<code>quantity</code>将会乘以水果的每千克批发价格。否则，<code>quantity</code>将会乘以水果的每千克零售价格。</p><p>由于乘法行末尾没有分号，所以函数返回乘积。</p><p>如果你仔细看看 <code>calc_price()</code>函数中水果特定函数的函数调用，这些函数调用在末尾没有分号。这意味着，<code>price_*()</code>函数返回的值将会被 <code>calc_price()</code> 函数返回给它的调用者。</p><p>而且 <code>calc_price()</code> 函数只有一个调用者。这个调用者在<code>mart</code> 循环的末尾，这个调用者使用这个函数返回的值来增加<code>total</code> 的值。</p><p>最终，当 <code>mart</code> 循环结束（当用户输入 <code>q</code> 或<code>quit</code> 时），存储在变量 <code>total</code>中的值将会被打印到屏幕上，并且用户将会被告知他/她需要支付的价格。</p><h3 id="总结">总结</h3><p>这篇文章中，我使用了之前讲解的 Rust编程语言的所有主题来创建一个简单的程序，这个程序仍然在某种程度上展示了一个现实世界的问题。</p><p>现在，我写的代码肯定可以用一种更符合编程习惯的方式来写，这种方式最好地使用了Rust 的喜爱特性，但是我还没有讲到它们！</p><p>所以，敬请关注后续的 <strong>将 Rust 带入下一个层次</strong>系列，并学习更多 Rust 编程语言的内容！</p><p>Rust 基础系列到此结束。欢迎你的反馈。</p><p><em>（题图：MJ/6d486f23-e6fe-4bef-a28d-df067ef2ec06）</em></p><hr /><p>via: https://itsfoss.com/milestone-rust-program/</p><p>作者：<a href="https://itsfoss.com/author/pratham/">Pratham Patel</a>选题：<a href="https://github.com/lkxed/">lkxed</a> 译者：<ahref="https://github.com/Cubik65536">Cubik65536</a> 校对：<ahref="https://github.com/wxy">wxy</a></p><p>本文由 <a href="https://github.com/LCTT/TranslateProject">LCTT</a>原创编译，<a href="https://linux.cn/">Linux中国</a> 荣誉推出</p>]]></content>
      
      
      <categories>
          
          <category> LCTT </category>
          
          <category> 转载 </category>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Rust 基础 </tag>
            
            <tag> 软件开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LCTT 翻译转载] 软件开发｜Rust 基础系列 #7: 在 Rust 中使用循环</title>
      <link href="/lctt/translation-linuxcn-article-15908-1/"/>
      <url>/lctt/translation-linuxcn-article-15908-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文：<a href="https://itsfoss.com/rust-loops/">Rust Basics Series#7: Using Loops in Rust</a> 首发：<ahref="https://linux.cn/article-15908-1.html">Rust 基础系列 #7: 在 Rust中使用循环</a> @<a href="https://linux.cn/">Linux 中国</a> 作者：<ahref="https://itsfoss.com/author/pratham/">Pratham Patel</a> 译者：<ahref="https://linux.cn/lctt/">LCTT</a> <ahref="https://github.com/Cubik65536">Cubik</a></p></blockquote><span id="more"></span><h2 id="rust-基础系列-7-在-rust-中使用循环">Rust 基础系列 #7: 在 Rust中使用循环</h2><p><imgsrc="https://img.linux.net.cn/data/attachment/album/202306/15/164034klkjbf3ibapjbbfk.jpg" /></p><p>在 Rust 系列的 <ahref="https://www.cubik65536.top/lctt/translation-linuxcn-article-15896-1/">上一篇文章</a>中，我介绍了如何使用 <code>if</code> 和 <code>else</code> 关键字来处理Rust 程序的控制流。</p><p>这是处理程序控制流的一种方法。另一种方法是使用循环。因此，让我们在本文中看看循环。</p><h3 id="rust-中可用的循环">Rust 中可用的循环</h3><p>Rust 编程语言有三种不同的循环，基于你想要实现什么以及可用的内容：</p><ul><li><code>for</code></li><li><code>while</code></li><li><code>loop</code></li></ul><p>我假设你对 <code>for</code> 和 <code>while</code> 已经很熟悉了，但<code>loop</code> 对你来说可能是个新概念。让我们先从熟悉的概念开始。</p><h3 id="for-循环">for 循环</h3><p><code>for</code> 循环主要用于迭代一种称为迭代器的东西。</p><p>这个迭代器可以从任何东西中创建，从数组、向量（很快就会介绍！）、一系列值，或者任何自定义的东西。这里的可能性是无限的。</p><p>来看看 <code>for</code> 循环的语法。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 迭代变量 <span class="keyword">in</span> 迭代器 &#123;</span><br><span class="line">    &lt;语句&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的 <code>迭代变量</code> 在大多数其他编程语言教程中通常被称为<code>i</code> ; )</p><p><code>迭代器</code>可以是任何东西，只要它能告诉下一个值是什么，如果有的话。</p><p>来通过一个程序来理解这个。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">my_arr</span> = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;迭代数组&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">element</span> <span class="keyword">in</span> my_arr &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;\n迭代一个真正的迭代器&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">element</span> <span class="keyword">in</span> my_arr.<span class="title function_ invoke__">iter</span>() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;\nPython 风格的范围&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">element</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">10</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, element);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，我声明了一个数组，它包含从 0 到 9 的 10 个数字。在第 5 行的<code>for</code> 循环中，我只是将这个数组指定为迭代器，Rust会自动处理对这个数组的所有元素的迭代。不需要花哨的<code>my_arr[i]</code> 魔法。</p><p>但是，在第 10 行，我调用了 <code>.iter()</code>函数。这是一个明确的提及，它基于 <code>my_arr</code>的值来获取一个迭代器。这个循环和第 5行的循环之间唯一的区别是，这里你是通过在数组上调用 <code>.iter()</code>函数来明确地调用它的。</p><p><em>在这个上下文环境中</em>，在一个数据类型上调用<code>.iter()</code>函数不是必须的。因为这是一个数组，是语言本身提供的一种数据类型，Rust已经知道如何处理它了。但是你 <em>需要</em>在自定义数据类型中使用它。</p><p>最后，在第 15行，我们有一个循环，它循环遍历一个范围。嗯，差不多是这样。如果你仔细看，这个范围看起来很像切片“类型”。Rust 也知道这一点，并且 <em>为</em>你处理了迭代（哈哈，明白了吗？）。</p><blockquote><p>LCTT 译注：此处的梗是，“为你处理了迭代” 的英文原文是 “handlesiteration <em>for</em> you"，其中的 “for” 与 “for 循环” 的 “for”是同一个单词。</p></blockquote><p>输出如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">迭代数组</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line"></span><br><span class="line">迭代一个真正的迭代器</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line"></span><br><span class="line">Python 风格的范围</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td></tr></table></figure><h3 id="while-循环">while 循环</h3><p><code>while</code> 循环可以被认为是非常类似于 <code>if</code>条件语句。使用 <code>if</code> 语句，只要用户提供的条件为<code>true</code>，<code>if</code> 语句体中的代码就会被执行<em>一次</em>。</p><p>但是，在 <code>while</code> 循环中，如果条件评估为<code>true</code>，循环就会开始循环循环体。只要条件继续评估为<code>true</code>，循环就会继续迭代。</p><p><code>while</code>循环只有在循环完成当前迭代中所有语句的执行并且在检查条件时，它的结果为<code>false</code> 时才会停止。</p><p>来看看 <code>while</code> 循环的语法...</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件 &#123;</span><br><span class="line">    &lt;语句&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到了吗？和 <code>if</code> 条件语句非常相似！不过没有<code>else</code> 块 ; )</p><p>来看一个程序来更好地理解这个。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">var</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> var &lt; <span class="number">3</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;var&#125;&quot;</span>);</span><br><span class="line">        var += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我有一个可变变量 <code>var</code>，它的初始值为 0。只要可变变量<code>var</code> 中存储的值小于 3，<code>while</code> 循环就会执行。</p><p>在循环中，<code>var</code> 的值被打印出来，然后它的值被增加 1。</p><p>这是上面代码的输出：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="loop-循环">loop 循环</h3><p>Rust有一个无限循环。是的，一个没有开始条件和停止条件的循环。它只是一直循环，直到永远。当然，它有触发器来停止代码本身的循环执行。</p><p>无限循环的语法如下：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">loop</span> &#123;</span><br><span class="line">    &lt;语句&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>📋 这些循环主要用于 GUI 软件，退出是一个 <em>显式</em> 操作。</p></blockquote><p>在我给你一个例子之前，因为这个循环非常特殊，让我们先看看如何<em>退出</em> 它 :p</p><p>要停止无限循环的执行，需要在循环内使用 <code>break</code>关键字。</p><p>来看一个例子，只有 0 到 3 之间的整数（包括 0 和3）才会被打印到程序输出。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">var</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> var &gt; <span class="number">3</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, var);</span><br><span class="line">        var += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看待这个特定的例子的最好方法是将它看作是一个增加了一堆没有必要的东西的<code>while</code> 循环 ; )</p><p>你有一个可变变量 <code>var</code>，它的初始值为0，它被用作迭代器。无限循环从一个 <code>if</code> 条件开始，如果<code>var</code> 的值大于 3，<code>break</code>关键字就会被执行。后来，就像 <code>while</code>循环的前一个例子一样，<code>var</code>的值被打印到标准输出，然后它的值被增加 1。</p><p>它的输出如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="标记循环">标记循环</h3><p>假设有两个无限循环，一个嵌套在另一个中。由于某种原因，退出条件在最内层循环中被检查，但这个退出条件是为了退出最外层循环。</p><p>在这种情况下，标记循环可能是有益的。</p><blockquote><p>💡 <code>break</code> 和 <code>continue</code>关键字并不仅仅用于无限循环。它们可以用于 Rust语言提供的所有三种循环。</p></blockquote><p>接下来是如何标记循环。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;标记: <span class="keyword">loop</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>要告诉编译器一个循环被标记了，从一个单引号字符开始，输入它的标签，然后跟着一个冒号。然后，继续使用你通常定义循环的方式。</p><p>当你需要退出某个循环时，只需像这样指定循环标签：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span> &#x27;标记;</span><br></pre></td></tr></table></figure><p>来看一个例子来更好地理解这个。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">a</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">b</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="symbol">&#x27;parent</span>: <span class="keyword">loop</span> &#123;</span><br><span class="line">        a += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">loop</span> &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;a: &#123;&#125;, b: &#123;&#125;&quot;</span>, a, b);</span><br><span class="line">            b += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> a + b == <span class="number">10</span> &#123;</span><br><span class="line">                <span class="built_in">println!</span>(<span class="string">&quot;\n&#123;&#125; + &#123;&#125; = 10&quot;</span>, a, b);</span><br><span class="line">                <span class="keyword">break</span> <span class="symbol">&#x27;parent</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，我使用两个可变变量 <code>a</code> 和<code>b</code>，它们的初始值都设置为 0。</p><p>然后，最外层的循环被标记为 <code>parent</code>。<code>parent</code>循环将变量 <code>a</code> 的值增加 1，并有一个内部/子循环。</p><p>这个（在第 8 行的）子循环打印变量 <code>a</code> 和 <code>b</code>的值。在这个循环内部，变量 <code>b</code> 的值增加了 1。退出条件是<code>a + b == 10</code>。这意味着只要变量 <code>a</code> 和<code>b</code> 中存储的值相加，结果为 10，<code>parent</code>循环就会被打破。即使第 14 行的 <code>break</code>条件“属于”内部循环，它也会打破 <code>parent</code> 循环。</p><p>来看看程序的输出。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a: 1, b: 0</span><br><span class="line">a: 1, b: 1</span><br><span class="line">a: 1, b: 2</span><br><span class="line">a: 1, b: 3</span><br><span class="line">a: 1, b: 4</span><br><span class="line">a: 1, b: 5</span><br><span class="line">a: 1, b: 6</span><br><span class="line">a: 1, b: 7</span><br><span class="line">a: 1, b: 8</span><br><span class="line"></span><br><span class="line">1 + 9 = 10</span><br></pre></td></tr></table></figure><p>就像从程序输出中可以看出的那样，循环在 <code>a</code> 和<code>b</code> 分别具有值 1 和 9 时停止。</p><h3 id="continue-关键字">continue 关键字</h3><p>如果你已经在其他编程语言（如C/C++/Java/Python）中使用过循环，你可能已经知道 <code>continue</code>关键字的用法。</p><p>当 <code>break</code>关键字用于完全停止循环执行时，<code>continue</code>关键字用于“跳过”循环执行的 <strong>当前迭代</strong>并从下一迭代开始（如果条件允许）。</p><p>来看一个例子来理解 <code>continue</code> 关键字的工作原理。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">10</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我有一个 <code>for</code> 循环，它迭代了 0 到 9之间的整数（包括 0 和9）。一旦循环开始，我就设置了一个条件检查，看看这个数字是不是偶数。如果这个数字是偶数，<code>continue</code>关键字就会被执行。</p><p>但是如果这个数字是奇数，这个数字就会被打印到程序输出。</p><p>来看看这个程序的输出。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">7</span><br><span class="line">9</span><br></pre></td></tr></table></figure><p>正如你所看到的，循环似乎一直在“进行”，尽管 0 到 9之间显然有偶数。但是因为我使用了 <code>continue</code>关键字，当遇到这个关键字时，循环执行就会停止。</p><p>这个循环跳过了它下面的任何东西，并继续下一次迭代。这就是为什么偶数没有被打印出来，但是0 到 9 之间的所有奇数都被打印到了程序输出中。</p><h3 id="总结">总结</h3><p>要总结这篇长文，我演示了 3种不同循环的用法：<code>for</code>、<code>while</code> 和<code>loop</code>。我还讨论了两个关键字，它们影响这些循环的控制流：<code>break</code>和 <code>continue</code>。</p><p>我希望你现在能理解每个循环的适当用例。如果你有任何问题，请告诉我。</p><p><em>（题图：MJ/25579e09-ae1c-47d3-8266-3bd9a54456c0）</em></p><hr /><p>via: https://itsfoss.com/rust-loops/</p><p>作者：<a href="https://itsfoss.com/author/pratham/">Pratham Patel</a>选题：<a href="https://github.com/lkxed/">lkxed</a> 译者：<ahref="https://github.com/Cubik65536">Cubik65536</a> 校对：<ahref="https://github.com/wxy">wxy</a></p><p>本文由 <a href="https://github.com/LCTT/TranslateProject">LCTT</a>原创编译，<a href="https://linux.cn/">Linux中国</a> 荣誉推出</p>]]></content>
      
      
      <categories>
          
          <category> LCTT </category>
          
          <category> 转载 </category>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Rust 基础 </tag>
            
            <tag> 软件开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LCTT 翻译转载] 软件开发｜Rust 基础系列 #6: 条件语句</title>
      <link href="/lctt/translation-linuxcn-article-15896-1/"/>
      <url>/lctt/translation-linuxcn-article-15896-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文：<a href="https://itsfoss.com/rust-if-else/">Rust Basics Series#6: Conditional Statements</a> 首发：<ahref="https://linux.cn/article-15896-1.html">Rust 基础系列 #6:条件语句</a> @<a href="https://linux.cn/">Linux 中国</a> 作者：<ahref="https://itsfoss.com/author/pratham/">Pratham Patel</a> 译者：<ahref="https://linux.cn/lctt/">LCTT</a> <ahref="https://github.com/Cubik65536">Cubik</a></p></blockquote><span id="more"></span><h2 id="rust-基础系列-6-条件语句">Rust 基础系列 #6: 条件语句</h2><p><imgsrc="https://img.linux.net.cn/data/attachment/album/202306/11/094832bkkbs7oxntx7zxas.jpg" /></p><p>在 <ahref="https://www.cubik65536.top/lctt/translation-linuxcn-article-15855-1/">上一篇文章</a>中，你学习了函数。在这篇文章中，我们将学习使用条件语句来管理 Rust程序的控制流。</p><h3 id="什么是条件语句">什么是条件语句？</h3><p>在编写代码的时候，最常见的任务之一就是检查某些条件是否为<code>true</code> 或 <code>false</code>。“如果温度高于35°C，打开空调。”</p><p>通过使用 <code>if</code> 和 <code>else</code>这样的关键字（有时候结合使用），程序员可以根据条件（例如提供的参数数量、从命令行传递的选项、文件名、错误发生等）改变程序的行为。</p><p>所以，对一个程序员来说，了解任何语言的控制流都是至关重要的，更不用说Rust 了。</p><h4 id="条件运算符">条件运算符</h4><p>下表列出了所有常用的单个条件运算符：</p><table><thead><tr class="header"><th style="text-align: left;">运算符</th><th style="text-align: left;">示例</th><th style="text-align: left;">解释</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><code>&gt;</code></td><td style="text-align: left;"><code>a &gt; b</code></td><td style="text-align: left;"><code>a</code> <strong>大于</strong><code>b</code></td></tr><tr class="even"><td style="text-align: left;"><code>&lt;</code></td><td style="text-align: left;"><code>a &lt; b</code></td><td style="text-align: left;"><code>a</code> <strong>小于</strong><code>b</code></td></tr><tr class="odd"><td style="text-align: left;"><code>==</code></td><td style="text-align: left;"><code>a == b</code></td><td style="text-align: left;"><code>a</code> <strong>等于</strong><code>b</code></td></tr><tr class="even"><td style="text-align: left;"><code>!=</code></td><td style="text-align: left;"><code>a != b</code></td><td style="text-align: left;"><code>a</code> <strong>不等于</strong><code>b</code></td></tr><tr class="odd"><td style="text-align: left;"><code>&gt;=</code></td><td style="text-align: left;"><code>a &gt;= b</code></td><td style="text-align: left;"><code>a</code> <strong>大于</strong> 或<strong>等于</strong> <code>b</code></td></tr><tr class="even"><td style="text-align: left;"><code>&lt;=</code></td><td style="text-align: left;"><code>a &lt;= b</code></td><td style="text-align: left;"><code>a</code> <strong>小于</strong> 或<strong>等于</strong> <code>b</code></td></tr></tbody></table><p>以及下表是逻辑运算符，它们用于一个或多个条件之间：</p><table><colgroup><col style="width: 33%" /><col style="width: 33%" /><col style="width: 33%" /></colgroup><thead><tr class="header"><th style="text-align: left;">运算符</th><th style="text-align: left;">示例</th><th style="text-align: left;">解释</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><code>||</code> （逻辑或）</td><td style="text-align: left;"><code>条件1 || 条件2</code></td><td style="text-align: left;"><code>条件1</code> 或 <code>条件2</code>中至少有一个为 <code>true</code></td></tr><tr class="even"><td style="text-align: left;"><code>&amp;&amp;</code> （逻辑与）</td><td style="text-align: left;"><code>条件1 &amp;&amp; 条件2</code></td><td style="text-align: left;"><strong>所有</strong> 条件都为<code>true</code></td></tr><tr class="odd"><td style="text-align: left;"><code>!</code> （逻辑非）</td><td style="text-align: left;"><code>!条件</code></td><td style="text-align: left;"><code>条件</code> 的布尔值的相反值</td></tr></tbody></table><blockquote><p>📋 与数学相似，你可以使用圆括号来指定操作的优先级。</p></blockquote><h3 id="使用-if-else">使用 if else</h3><p>要控制 Rust 代码的基本流程，使用两个关键字：<code>if</code> 和<code>else</code>。这可以根据提供的条件的状态创建两个“执行路径”。</p><p>一个简单的带有替代执行路径的 if 块的语法如下：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件 &#123;</span><br><span class="line">    &lt;语句&gt;;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    &lt;语句&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>📋当只有一个条件时，将其括在圆括号中并不是强制性的。根据语法，使用圆括号是可选的。你仍然应该使用它们来指定优先级并优化可读性。</p></blockquote><p>来看看一个例子。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = <span class="number">36</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span> = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;a 大于 b&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;b 大于 a&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，我声明了两个整数变量 <code>a</code> 和<code>b</code>，它们的值分别为 '36' 和 '25'。在第 5 行，我检查变量<code>a</code> 中存储的值是否大于变量 <code>b</code>中存储的值。如果条件计算结果为 <code>true</code>，则会执行第 6行的代码。如果条件计算结果为 <code>false</code>，由于我们有一个<code>else</code> 块（可选），第 8 行的代码将被执行。</p><p>来看看程序的输出。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a 大于 b</span><br></pre></td></tr></table></figure><p>完美！</p><p>来修改一下变量 <code>a</code> 的值，使其小于变量 <code>b</code>的值，看看会发生什么。我将把 <code>a</code> 的值改为'10'。修改后的输出如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b 大于 a</span><br></pre></td></tr></table></figure><p>但是，如果我将相同的值存储在变量 <code>a</code> 和 <code>b</code>中呢？为了看到这一点，我将两个变量的值都设置为'40'。修改后的输出如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b 大于 a</span><br></pre></td></tr></table></figure><p>嗯？从逻辑上讲，这没有任何意义... :(</p><p>但是这可以改进！我们继续。</p><h3 id="使用-else-if-条件">使用 else if 条件</h3><p>与其他任何编程语言一样，你可以使用 <code>else if</code>块来提供多于两个的执行路径。语法如下：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件 &#123;</span><br><span class="line">    &lt;语句&gt;;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> 条件 &#123;</span><br><span class="line">    &lt;语句&gt;;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    &lt;语句&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，通过使用 <code>else if</code>块，我可以改进程序的逻辑。下面是修改后的程序。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = <span class="number">40</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span> = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> a == b &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;a 与 b 是相等的&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;a 大于 b&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;b 大于 a&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，我的程序的逻辑是正确的。它已经处理了所有的边缘情况（我能想到的）。第5 行处理了 <code>a</code> 等于 <code>b</code> 的情况。第 7 行处理了<code>a</code> 可能大于 <code>b</code> 的情况。而 <code>a</code> 小于<code>b</code> 的情况则由第 9 行的 <code>else</code> 块隐式处理。</p><p>现在，当我运行这段代码时，我得到了以下输出：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a 与 b 是相等的</span><br></pre></td></tr></table></figure><p>现在这就完美了！</p><h3 id="示例找到最大值">示例：找到最大值</h3><p>我知道使用 <code>if</code> 和 <code>else</code>很容易，但是让我们再看一个程序。这次，我们来比较三个数字。我还将在这个实例中使用逻辑运算符！</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = <span class="number">73</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span> = <span class="number">56</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">c</span> = <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">if</span> (a != b) &amp;&amp; (a != c) &amp;&amp; (b != c) &#123;</span><br><span class="line">        <span class="title function_ invoke__">if</span> (a &gt; b) &amp;&amp; (a &gt; c) &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;a 是最大的&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="title function_ invoke__">if</span> (b &gt; a) &amp;&amp; (b &gt; c) &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;b 是最大的&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;c 是最大的&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个程序第一眼看上去可能很复杂，但是不要害怕，我会解释的！</p><p>最开始，我声明了三个变量 <code>a</code>、<code>b</code> 和<code>c</code>，并赋予了我能想到的随机值。然后，在第 6行，我检查了没有变量的值与其他变量相同的条件。首先，我检查<code>a</code> 和 <code>b</code> 的值，然后是 <code>a</code> 和<code>c</code>，最后是 <code>b</code> 和<code>c</code>。这样我就可以确定没有变量中存储了重复的值。</p><p>然后，在第 7 行，我检查了变量 <code>a</code>中存储的值是否是最大的。如果这个条件计算结果为<code>true</code>，则会执行第 8 行的代码。否则，将检查第 9行的执行路径。</p><p>在第 9 行，我检查了变量 <code>b</code>中存储的值是否是最大的。如果这个条件计算结果为<code>true</code>，则会执行第 10 行的代码。如果这个条件也是<code>false</code>，那么只有一种可能。3 个变量中的最大值既不是<code>a</code> 也不是 <code>b</code>。</p><p>所以，自然地，在 <code>else</code> 块中，我打印出变量 <code>c</code>拥有最大值。</p><p>来看看程序的输出：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a 是最大的</span><br></pre></td></tr></table></figure><p>这是预期的结果。尝试修改分配给每个变量的值，并自己测试一下！ :)</p><h3 id="总结">总结</h3><p>你学习到了如何使用 <code>if</code> 和 <code>else</code>语句。在你继续使用大量 <code>if</code> <code>else if</code>语句制作自己的 AI 之前（哈哈），让我们在本系列的下一篇文章中学习 Rust中的循环。</p><p>持续关注。</p><p><em>（题图：MJ/3eea3bbb-b630-4470-ae21-391ab86cd5bf）</em></p><hr /><p>via: https://itsfoss.com/rust-if-else/</p><p>作者：<a href="https://itsfoss.com/author/pratham/">Pratham Patel</a>选题：<a href="https://github.com/lkxed/">lkxed</a> 译者：<ahref="https://github.com/Cubik65536">Cubik65536</a> 校对：<ahref="https://github.com/wxy">wxy</a></p><p>本文由 <a href="https://github.com/LCTT/TranslateProject">LCTT</a>原创编译，<a href="https://linux.cn/">Linux中国</a> 荣誉推出</p>]]></content>
      
      
      <categories>
          
          <category> LCTT </category>
          
          <category> 转载 </category>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Rust 基础 </tag>
            
            <tag> 软件开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 年 5 月总结</title>
      <link href="/2023-05-MonthJournal/"/>
      <url>/2023-05-MonthJournal/</url>
      
        <content type="html"><![CDATA[<p>2023 年 5月报来了，让我们来看看这个月都发生了什么吧！（这个月报超短）</p><span id="more"></span><h2 id="codeedit">CodeEdit</h2><p>这个月没写什么代码，但周会仍然是每次都参加了的。</p><h2 id="期末考试">期末考试</h2><p>5 月下半和 6月初一堆期末考试，所以其实几乎所有时间都被用在复习上了。</p><div class="tag-plugin quot"><h2 class="content" id="那么，先这样了，下个月见！" type="text"><a href="#那么，先这样了，下个月见！" class="headerlink" title="那么，先这样了，下个月见！"></a>那么，先这样了，下个月见！</h2></div>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LCTT 翻译转载] 软件开发｜Rust 基础系列 #5: Rust 中的函数</title>
      <link href="/lctt/translation-linuxcn-article-15855-1/"/>
      <url>/lctt/translation-linuxcn-article-15855-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文：<a href="https://itsfoss.com/rust-functions/">Rust BasicsSeries #5: Functions in the Rust Programming Language</a> 首发：<ahref="https://linux.cn/article-15855-1.html">Rust 基础系列 #5: Rust中的函数</a> @<a href="https://linux.cn/">Linux 中国</a> 作者：<ahref="https://itsfoss.com/author/pratham/">Pratham Patel</a> 译者：<ahref="https://linux.cn/lctt/">LCTT</a> <ahref="https://github.com/Cubik65536">Cubik</a></p></blockquote><span id="more"></span><h2 id="rust-基础系列-5-rust-中的函数">Rust 基础系列 #5: Rust中的函数</h2><p><imgsrc="https://img.linux.net.cn/data/attachment/album/202305/29/150550h23qbhahwzb66hb1.jpg" /></p><blockquote><p>在这一章中，在实例的帮助下，学习如何使用函数并从中返回值。</p></blockquote><p>就跟任何现代编程语言一样，Rust 也有函数。</p><p>你已经熟悉的函数是 <code>main</code>函数。这个函数在程序启动时被调用。</p><p>但是其他函数呢？在本文中，你将学习如何在 Rust 程序中使用函数。</p><h3 id="函数的基本语法">函数的基本语法</h3><p>你可能已经在我们声明 <code>main</code>函数时知道了这一点，不管怎么样，还是让我们看一下声明函数的语法。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">function_name</span>() &#123;</span><br><span class="line">    &lt;<span class="title function_ invoke__">statement</span>(s)&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="title function_ invoke__">function_name</span>();</span><br></pre></td></tr></table></figure><p>来让我们看一个简单的函数，它将字符串 <code>"Hi there!"</code>打印到标准输出。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="title function_ invoke__">greet</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">greet</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Hi there!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>📋 与 C不一样的是，不管你是否要在声明或定义之前调用函数都没有关系。只要这个函数在<em>某个地方</em> 被声明了，Rust 就会处理它。</p></blockquote><p>正如预期，它的输出如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi there!</span><br></pre></td></tr></table></figure><p>这挺简单的。让我们把它提升到下一个级别。让我们创建一个接受参数并返回值的函数。有没有参数和有没有返回值这两者之间无关。</p><h3 id="使用函数接受参数">使用函数接受参数</h3><p>声明一个接受参数的函数的语法如下：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">function_name</span>(variable_name: <span class="keyword">type</span>) &#123;</span><br><span class="line">    &lt;<span class="title function_ invoke__">statement</span>(s)&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="title function_ invoke__">function_name</span>(value);</span><br></pre></td></tr></table></figure><p>你可以把函数参数想象成一个传递给函数的 <ahref="https://www.cubik65536.top/lctt/translation-linuxcn-article-15837-1/">元组</a>。它可以接受多种数据类型的参数，而且你可以接受任意多个参数。所以，你不必局限于接受相同类型的参数。</p><p>与某些语言不同的是，Rust 没有<em>默认参数</em>。<strong>在调用函数时填充所有参数是强制性的</strong>。</p><h4 id="示例饥饿函数">示例：饥饿函数</h4><p>来让我们看一个程序来更好地理解这个。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="title function_ invoke__">food</span>(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">food</span>(theplas: <span class="type">i32</span>, rotis: <span class="type">i32</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(</span><br><span class="line">        <span class="string">&quot;我饿了... 我需要 &#123;&#125; 个葫芦巴叶饼和 &#123;&#125; 个罗提！&quot;</span>,</span><br><span class="line">        theplas, rotis</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在第 5 行，我声明了一个名为 <code>food</code> 的函数。这个函数接受 2个参数：<code>theplas</code> 和<code>rotis</code>（印度食物的名字）。然后我打印了这些变量的内容。</p><p>对于 <code>main</code> 函数，我使用参数 <code>2</code> 和<code>4</code> 调用 <code>food</code> 函数。这意味着<code>theplas</code> 被赋值为 <code>2</code>，<code>rotis</code>被赋值为 <code>4</code>。</p><p>来让我们看一下程序的输出：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我饿了... 我需要 2 个葫芦巴叶饼和 4 个罗提！</span><br></pre></td></tr></table></figure><p>我现在真的饿了... 😋</p><h3 id="从函数返回值">从函数返回值</h3><p>就像函数可以接受参数一样，函数也可以返回一个或多个值。这样的函数的语法如下：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">function_name</span>() <span class="punctuation">-&gt;</span> data_type &#123;</span><br><span class="line">    &lt;<span class="title function_ invoke__">statement</span>(s)&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="title function_ invoke__">function_name</span>();</span><br></pre></td></tr></table></figure><p>函数可以使用 <code>return</code>关键字或者使用表达式而不是语句来返回一个值。</p><p>等等！什么是表达式？</p><h4 id="在进一步之前语句与表达式">在进一步之前：语句与表达式</h4><p>在讲解 Rust 函数的例子中提起这个可能不太合适，但是你应该理解 Rust和其他编程语言中语句和表达式的区别。</p><p>语句是以分号结尾且 <em>不会计算出某个值</em>的代码行。另一方面，表达式是一行不以分号结尾且计算出某个值的代码行。</p><p>来让我们用一个例子来理解：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = <span class="number">873</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span> = &#123;</span><br><span class="line">        <span class="comment">// 语句</span></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Assigning some value to b...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 表达式</span></span><br><span class="line">        a * <span class="number">10</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;b: &#123;b&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在第 3行，我开始了一个代码块，在这个代码块中我有一个语句和一个表达式。注释标明了哪个是哪个。</p><p>在第 5行的代码不会计算出某个值，因此需要以分号结尾。这是一个语句。</p><p>第 8 行的代码计算出了一个值。它是<code>a * 10</code>（<code>873 * 10</code>），并计算出了<code>8730</code>。因为这一行没有以分号结尾，所以这是一个表达式。</p><blockquote><p>📋使用表达式是从代码块中返回某些东西的一种方便的方法。因此，当返回一个值时，它是<code>return</code> 关键字的替代方案。表达式不仅仅用于从函数中 “返回”一个值。正如你刚刚看到的，<code>a * 10</code> 的值是从内部作用域 “返回”到外部作用域，并赋值给变量<code>b</code>。一个简单的作用域不是一个函数，但表达式的值仍然被 “返回”了。</p></blockquote><h4 id="示例购买腐烂的水果">示例：购买腐烂的水果</h4><p>来让我们看一个演示以理解函数如何返回一个值：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(</span><br><span class="line">        <span class="string">&quot;如果我从水果摊买了 2 公斤苹果，我必须付给他们 &#123;&#125; 印度卢比。&quot;</span>,</span><br><span class="line">        <span class="title function_ invoke__">retail_price</span>(<span class="number">2.0</span>)</span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">println!</span>(</span><br><span class="line">        <span class="string">&quot;但是，如果我从水果摊买了 30 公斤苹果，我就要付给他们 &#123;&#125; 印度卢比。&quot;</span>,</span><br><span class="line">        <span class="title function_ invoke__">wholesale_price</span>(<span class="number">30.0</span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">retail_price</span>(weight: <span class="type">f64</span>) <span class="punctuation">-&gt;</span> <span class="type">f64</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> weight * <span class="number">500.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">wholesale_price</span>(weight: <span class="type">f64</span>) <span class="punctuation">-&gt;</span> <span class="type">f64</span> &#123;</span><br><span class="line">    weight * <span class="number">400.0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我在上述代码中有两个函数：<code>retail_price</code> 和<code>wholesale_price</code>。两个函数都接受一个参数并将值存储在<code>weight</code> 变量中。这个变量的类型是<code>f64</code>，函数签名表示最终函数返回一个 <code>f64</code> 值。</p><p>这两个函数都将购买的苹果的重量乘以一个数字。这个数字表示苹果的当前每公斤价格。由于批发商有大量订单，物流在某种程度上更容易，价格可以降低一点。</p><p>除了每公斤价格之外，这两个函数还有一个区别。那就是，<code>retail_price</code>函数使用 <code>return</code> 关键字返回乘积。而<code>wholesale_price</code> 函数使用表达式返回乘积。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果我从水果摊买了 2 公斤苹果，我必须付给他们 1000 印度卢比。</span><br><span class="line">但是，如果我从水果摊买了 30 公斤苹果，我就要付给他们 12000 印度卢比。</span><br></pre></td></tr></table></figure><p>输出显示，从函数返回值的两种方法都按预期工作。</p><h4 id="返回多个值">返回多个值</h4><p>你可以有一个返回不同类型的多个值的函数。你有很多选择，但返回一个元组是最简单的。</p><p>接下来是一个示例：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> (maths, english, science, sanskrit) = <span class="title function_ invoke__">tuple_func</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;数学考试得分: &#123;maths&#125;&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;英语考试得分: &#123;english&#125;&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;科学考试得分: &#123;science&#125;&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;梵语考试得分: &#123;sanskrit&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">tuple_func</span>() <span class="punctuation">-&gt;</span> (<span class="type">f64</span>, <span class="type">f64</span>, <span class="type">f64</span>, <span class="type">f64</span>) &#123;</span><br><span class="line">    <span class="comment">// return marks for a student</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">maths</span> = <span class="number">84.50</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">english</span> = <span class="number">85.00</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">science</span> = <span class="number">75.00</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">sanskrit</span> = <span class="number">67.25</span>;</span><br><span class="line"></span><br><span class="line">    (maths, english, science, sanskrit)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数 <code>tuple_func</code> 返回 4 个封装在一个元组中的<code>f64</code> 值。这些值是一个学生在四门科目（满分 100分）中获得的分数。</p><p>当函数被调用时，这个元组被返回。我可以使用 <code>tuple_name.0</code>方案打印这些值，但我认为最好先解构元组，这样可以帮助我们搞清楚值对应的是什么。然后我使用了包含被解构的元组的值的变量来打印分数。</p><p>这是我得到的输出：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数学考试得分: 84.5</span><br><span class="line">英语考试得分: 85</span><br><span class="line">科学考试得分: 75</span><br><span class="line">梵语考试得分: 67.25</span><br></pre></td></tr></table></figure><h3 id="总结">总结</h3><p>本文介绍了 Rust 编程语言中的函数。这些是函数的 “类型”：</p><ul><li>不接受任何参数也不返回任何值的函数</li><li>接收一个或多个参数的函数</li><li>给调用者返回一个或多个值的函数</li></ul><p>你知道接下来是什么吗？Rust 中的条件语句，也就是if-else。请继续关注并享受学习 Rust 的过程。</p><p><em>（题图：MJ/5a07503b-c691-4276-83b2-bb42f5fda347）</em></p><hr /><p>via: https://itsfoss.com/rust-functions/</p><p>作者：<a href="https://itsfoss.com/author/pratham/">Pratham Patel</a>选题：<a href="https://github.com/lkxed/">lkxed</a> 译者：<ahref="https://github.com/Cubik65536">Cubik65536</a> 校对：<ahref="https://github.com/wxy">wxy</a></p><p>本文由 <a href="https://github.com/LCTT/TranslateProject">LCTT</a>原创编译，<a href="https://linux.cn/">Linux中国</a> 荣誉推出</p>]]></content>
      
      
      <categories>
          
          <category> LCTT </category>
          
          <category> 转载 </category>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Rust 基础 </tag>
            
            <tag> 软件开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Rocky Linux 上安装 Mastodon</title>
      <link href="/2023-05-28-Mastodon-on-Rocky-Linux/"/>
      <url>/2023-05-28-Mastodon-on-Rocky-Linux/</url>
      
        <content type="html"><![CDATA[<p>前一段时间，我在我自己的服务器上部署了 <ahref="https://mstdn.ixor.tech">我自己的 Mastodon 示例</a>，在本文中，我将简单展示如何在 Rocky Linux 上搭配 Docker 和 DockerCompose 来部署 Mastodon。</p><span id="more"></span><h2 id="安装-docker-和-docker-compose">安装 Docker 和 DockerCompose</h2><p>(如果你已经安装了 Docker 和 Docker Compose，可以跳过这一步)</p><h3 id="使用-dnf-工具添加-docker-仓库">使用 dnf 工具添加 Docker仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h3 id="安装相关软件包">安装相关软件包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf -y install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure><h3 id="启动-docker-服务">启动 Docker 服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl --now <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><p>(参考：<a href="https://docs.rockylinux.org/gemstones/docker/">Docker- Install Engine - Rocky Linux Documentation</a>)</p><h2 id="创建-mastodon-用户并创建-mastodon-目录">创建 Mastodon 用户并创建Mastodon 目录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /home/mastodon/mastodon</span><br><span class="line"><span class="built_in">cd</span> /home/mastodon/mastodon/</span><br></pre></td></tr></table></figure><h2 id="拉取-mastodon-docker-镜像">拉取 Mastodon Docker 镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ghcr.io/mastodon/mastodon:latest</span><br></pre></td></tr></table></figure><h2 id="下载-mastodon-docker-compose-文件">下载 Mastodon Docker Compose文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/tootsuite/mastodon/master/docker-compose.yml</span><br></pre></td></tr></table></figure><h2 id="修改-mastodon-docker-compose-文件">修改 Mastodon Docker Compose文件</h2><p>使用 vim 编辑 docker-compose.yml 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><p>将 docker-compose.yml 文件中的内容修改为如下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:14-alpine</span></span><br><span class="line">    <span class="attr">shm_size:</span> <span class="string">256mb</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">internal_network</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&#x27;CMD&#x27;</span>, <span class="string">&#x27;pg_isready&#x27;</span>, <span class="string">&#x27;-U&#x27;</span>, <span class="string">&#x27;postgres&#x27;</span>]</span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./postgres14:/var/lib/postgresql/data</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;POSTGRES_HOST_AUTH_METHOD=trust&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:7-alpine</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">internal_network</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&#x27;CMD&#x27;</span>, <span class="string">&#x27;redis-cli&#x27;</span>, <span class="string">&#x27;ping&#x27;</span>]</span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./redis:/data</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">es:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/elasticsearch/elasticsearch:7.17.9</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m -Des.enforce.bootstrap.checks=true&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;xpack.license.self_generated.type=basic&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;xpack.security.enabled=false&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;xpack.watcher.enabled=false&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;xpack.graph.enabled=false&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;xpack.ml.enabled=false&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;bootstrap.memory_lock=true&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;cluster.name=es-mastodon&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;discovery.type=single-node&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;thread_pool.write.queue_size=1000&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">external_network</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">internal_network</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">       <span class="attr">test:</span> [<span class="string">&quot;CMD-SHELL&quot;</span>, <span class="string">&quot;curl --silent --fail localhost:9200/_cluster/health || exit 1&quot;</span>]</span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">./elasticsearch:/var/lib/elasticsearch/data</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">memlock:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">-1</span></span><br><span class="line">      <span class="attr">nofile:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">65536</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">65536</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;127.0.0.1:9200:9200&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ghcr.io/mastodon/mastodon:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">env_file:</span> <span class="string">.env.production</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">bash</span> <span class="string">-c</span> <span class="string">&quot;rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">external_network</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">internal_network</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="comment"># prettier-ignore</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&#x27;CMD-SHELL&#x27;</span>, <span class="string">&#x27;wget -q --spider --proxy=off localhost:3000/health || exit 1&#x27;</span>]</span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;127.0.0.1:3000:3000&#x27;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">es</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./public/system:/mastodon/public/system</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">streaming:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ghcr.io/mastodon/mastodon:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">env_file:</span> <span class="string">.env.production</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">node</span> <span class="string">./streaming</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">external_network</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">internal_network</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="comment"># prettier-ignore</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&#x27;CMD-SHELL&#x27;</span>, <span class="string">&#x27;wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1&#x27;</span>]</span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;127.0.0.1:4000:4000&#x27;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">sidekiq:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ghcr.io/mastodon/mastodon:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">env_file:</span> <span class="string">.env.production</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">bundle</span> <span class="string">exec</span> <span class="string">sidekiq</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">external_network</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">internal_network</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./public/system:/mastodon/public/system</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&#x27;CMD-SHELL&#x27;</span>, <span class="string">&quot;ps aux | grep &#x27;[s]idekiq\ 6&#x27; || false&quot;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment">## Uncomment to enable federation with tor instances along with adding the following ENV variables</span></span><br><span class="line">  <span class="comment">## http_proxy=http://privoxy:8118</span></span><br><span class="line">  <span class="comment">## ALLOW_ACCESS_TO_HIDDEN_SERVICE=true</span></span><br><span class="line">  <span class="comment"># tor:</span></span><br><span class="line">  <span class="comment">#   image: sirboops/tor</span></span><br><span class="line">  <span class="comment">#   networks:</span></span><br><span class="line">  <span class="comment">#      - external_network</span></span><br><span class="line">  <span class="comment">#      - internal_network</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># privoxy:</span></span><br><span class="line">  <span class="comment">#   image: sirboops/privoxy</span></span><br><span class="line">  <span class="comment">#   volumes:</span></span><br><span class="line">  <span class="comment">#     - ./priv-config:/opt/config</span></span><br><span class="line">  <span class="comment">#   networks:</span></span><br><span class="line">  <span class="comment">#     - external_network</span></span><br><span class="line">  <span class="comment">#     - internal_network</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">external_network:</span></span><br><span class="line">  <span class="attr">internal_network:</span></span><br><span class="line">    <span class="attr">internal:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="初始化-postgresql-数据库">初始化 PostgreSQL 数据库</h2><p>刚才 <code>docker-compose.yml</code> 文件中，数据库 (<code>db</code>)部分的地址为<code>./postgres14:/var/lib/postgresql/data</code>，因此你的数据库绝对地址为<code>/home/mastodon/mastodon/postgres14</code>。</p><h3 id="执行以下命令">执行以下命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name postgres14 -v /home/mastodon/mastodon/postgres14:/var/lib/postgresql/data -e POSTGRES_PASSWORD=[数据库管理员密码] --<span class="built_in">rm</span> -d postgres:14-alpine</span><br></pre></td></tr></table></figure><p>执行完后，检查<code>/home/mastodon/mastodon/postgres14</code>，应该出现 PostgreSQL相关的多个文件/文件夹。</p><h3 id="然后执行以下命令">然后执行以下命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it postgres14 psql -U postgres</span><br></pre></td></tr></table></figure><h3 id="然后创建-mastodon-用户并退出-postgresql">然后创建 mastodon用户并退出 PostgreSQL</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> mastodon <span class="keyword">WITH</span> PASSWORD <span class="string">&#x27;[数据库密码（最好和数据库管理员密码不一样）]&#x27;</span> CREATEDB;</span><br><span class="line">\q</span><br></pre></td></tr></table></figure><div class="tag-plugin note" color="yellow"><div class="title">提示</div><div class="body"><p>你可以使用 <code>openssl rand -base64 32</code>命令来生成随机密码</p></div></div><h3 id="最后停止-postgresql-容器">最后停止 PostgreSQL 容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop postgres14</span><br></pre></td></tr></table></figure><h2 id="配置-mastodon">配置 Mastodon</h2><h3 id="配置文件">配置文件</h3><p>在 <code>/home/mastodon/mastodon</code> 目录下创建<code>.env.production</code> 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> .env.production</span><br></pre></td></tr></table></figure><h3 id="交互式配置">交互式配置</h3><p>执行以下命令使用 Mastodon 的交互式配置工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose run --<span class="built_in">rm</span> web bundle <span class="built_in">exec</span> rake mastodon:setup</span><br></pre></td></tr></table></figure><p>然后按照以下提示进行配置</p><div class="tag-plugin note" color="yellow"><div class="title">提示</div><div class="body"><p>以下选项带有 <code>⭐️</code>表示则意味着你必须自行填写其内容，其他的你可以直接使用默认值</p></div></div><ul><li>⭐️ Domain name: <strong>[你的域名]</strong></li><li>⭐️ Single user mode disables registrations and redirects the landingpage to your public profile. Do you want to enable single user mode?<strong>yes</strong> <div class="tag-plugin note" color="yellow"><div class="title">提示</div><div class="body"><p>如果你只希望自己一个人使用这个实例，并将这个实例当作一个类似于你个人内容更新站的话，填写<code>yes</code>。如果你希望公开运营这个服务器，或者与朋友共用这个实例，填写<code>no</code>。</p></div></div></li><li>⭐️ Are you using Docker to run Mastodon? <strong>Yes</strong><div class="tag-plugin note" color="yellow"><div class="title">提示</div><div class="body"><p>此处必须填写 <code>Yes</code></p></div></div></li><li>PostgreSQL host: db</li><li>PostgreSQL port: 5432</li><li>⭐️ Name of PostgreSQL database: mastodon</li><li>Name of PostgreSQL user: postgres</li><li>⭐️ Password of PostgreSQL user: [你设置好的数据库密码]<div class="tag-plugin note" color="yellow"><div class="title">提示</div><div class="body"><p>此处密码输入/粘贴后不会显示，如果一切正常会出现<code>Database configuration works! 🎆</code> 提示</p></div></div></li><li>Redis host: redis</li><li>Redis port: 6379</li><li>Redis password: 此处没有密码，直接回车。如果一切正常会出现<code>Redis configuration works! 🎆</code> 提示</li><li>⭐️ Do you want to store uploaded files on the cloud?<strong>No</strong> <div class="tag-plugin note" color="yellow"><div class="title">提示</div><div class="body"><p>如果你希望将上传到 Mastodon 实例的文件存储到云端，填写<code>Yes</code>，然后按照提示进行配置（本文不涉及这部分配置）。如果你希望将上传到Mastodon 实例的文件存储到本地，填写 <code>No</code>。</p></div></div></li><li>⭐️ Do you want to send e-mails from localhost? <strong>No</strong><div class="tag-plugin note" color="yellow"><div class="title">提示</div><div class="body"><p>如果你希望使用本地的 SMTP 服务器发送邮件，填写<code>Yes</code>，然后按照提示进行配置（本文不涉及这部分配置）。如果你希望使用第三方SMTP 服务器发送邮件，填写 <code>No</code>。</p></div></div></li><li>⭐️ SMTP server: [你的 SMTP 服务器地址]</li><li>⭐️ SMTP port: [你的 SMTP 服务器端口]</li><li>⭐️ SMTP username: [你的 SMTP 服务器用户名 (邮箱地址)]</li><li>⭐️ SMTP password: [你的 SMTP 服务器密码（邮箱密码）]<div class="tag-plugin note" color="yellow"><div class="title">提示</div><div class="body"><p>此处密码输入/粘贴后不会显示</p></div></div></li><li>⭐️ SMTP authentication: [你的 SMTP 服务器认证方式]<div class="tag-plugin note" color="yellow"><div class="title">提示</div><div class="body"><p>此处的认证方式根据你的 SMTP 提供商而定，以 Office365为例，这里应该使用 <code>login</code></p></div></div></li><li>⭐️ SMTP OpenSSL verify mode: (使用上下选择) <div class="tag-plugin note" color="yellow"><div class="title">提示</div><div class="body"><p>此处的认证模式根据你的 SMTP 提供商而定，以 Office365为例，这里应该使用 <code>none</code></p></div></div></li><li>Enable STARTTLS: auto</li><li>E-mail address to send e-mails "from": [你的邮箱昵称 <你的邮箱地址>]<div class="tag-plugin note" color="yellow"><div class="title">提示</div><div class="body"><p>你可以尝试使用默认配置，或者进行部分修改</p></div></div></li><li>⭐️ Send a test e-mail with this configuration right now?<strong>Yes</strong></li><li>⭐️ Send test e-mail to: [你的个人邮箱地址] <div class="tag-plugin note" color="yellow"><div class="title">提示</div><div class="body"><p>此处会测试你的 SMTP配置是否正确，如果你的个人邮箱收到了一封测试邮件，则一切正常</p></div></div></li><li>⭐️ This configuration will be written to .env.production Saveconfiguration? (Y/n) <strong>Yes</strong></li><li>Below is your configuration, save it to an .env.production fileoutside Docker:</li></ul><p>然后会出现 .env.production 配置，复制下来并将内容粘贴到<code>/home/mastodon/mastodon/.env.production</code> 文件中。</p><h2 id="为相应文件夹赋权">为相应文件夹赋权</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chown</span> 991:991 -R ./public</span><br><span class="line"><span class="built_in">chown</span> -R 70:70 ./postgres14</span><br></pre></td></tr></table></figure><h2 id="启动-mastodon">启动 Mastodon</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose down</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h2 id="配置-nginx">配置 Nginx</h2><p>在进行这一步之前，你需要确保你的域名已经解析到了你的服务器 IP上，并且你的服务器已经安装了 Nginx。</p><h3 id="创建-ssl-证书">创建 SSL 证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 certbot (在此之前，请确保你的服务器已经安装了 snapd)</span></span><br><span class="line">sudo snap install --classic certbot</span><br><span class="line"><span class="comment"># 创建软链接</span></span><br><span class="line">sudo <span class="built_in">ln</span> -s /snap/bin/certbot /usr/bin/certbot</span><br><span class="line"><span class="comment"># 生成证书</span></span><br><span class="line">sudo certbot certonly --nginx -d [你的域名]</span><br></pre></td></tr></table></figure><h3 id="创建-nginx-配置文件">创建 Nginx 配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> /etc/nginx/conf.d/[你的域名].conf</span><br></pre></td></tr></table></figure><h3 id="编辑-nginx-配置文件">编辑 Nginx 配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p>在 <code>http</code> 块中添加以下内容（或确保以下内容已经存在）</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/conf.d/[你的域名].conf</span><br></pre></td></tr></table></figure><p>按照以下模板进行配置</p><details class="tag-plugin folding" child="codeblock"><summary><span>Mastodon Nginx 配置模板</span></summary><div class="body"><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">map</span> <span class="variable">$http_upgrade</span> <span class="variable">$connection_upgrade</span> &#123;</span><br><span class="line">  <span class="attribute">default</span> upgrade;</span><br><span class="line">  &#x27;&#x27;      close;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:3000</span> fail_timeout=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">upstream</span> streaming &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:4000</span> fail_timeout=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">proxy_cache_path</span> /var/cache/nginx levels=<span class="number">1</span>:<span class="number">2</span> keys_zone=CACHE:<span class="number">10m</span> inactive=<span class="number">7d</span> max_size=<span class="number">1g</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">listen</span> [::]:<span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> [你的域名];</span><br><span class="line">  <span class="attribute">root</span> /home/mastodon/mastodon/public;</span><br><span class="line">  <span class="section">location</span> /.well-known/acme-challenge/ &#123; <span class="attribute">allow</span> all; &#125;</span><br><span class="line">  <span class="section">location</span> / &#123; <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$host</span><span class="variable">$request_uri</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">443</span> ssl http2;</span><br><span class="line">  <span class="attribute">listen</span> [::]:<span class="number">443</span> ssl http2;</span><br><span class="line">  <span class="attribute">server_name</span> [你的域名];</span><br><span class="line"></span><br><span class="line">  <span class="attribute">ssl_protocols</span> TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line">  <span class="attribute">ssl_ciphers</span> HIGH:!MEDIUM:!LOW:!aNULL:!NULL:!SHA;</span><br><span class="line">  <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">  <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">10m</span>;</span><br><span class="line">  <span class="attribute">ssl_session_tickets</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">ssl_certificate</span>     /etc/letsencrypt/live/[你的域名]/fullchain.pem;</span><br><span class="line">  <span class="attribute">ssl_certificate_key</span> /etc/letsencrypt/live/[你的域名]/privkey.pem;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">keepalive_timeout</span>    <span class="number">70</span>;</span><br><span class="line">  <span class="attribute">sendfile</span>             <span class="literal">on</span>;</span><br><span class="line">  <span class="attribute">client_max_body_size</span> <span class="number">99m</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">root</span> /home/mastodon/mastodon/public;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line">  <span class="attribute">gzip_disable</span> <span class="string">&quot;msie6&quot;</span>;</span><br><span class="line">  <span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line">  <span class="attribute">gzip_proxied</span> any;</span><br><span class="line">  <span class="attribute">gzip_comp_level</span> <span class="number">6</span>;</span><br><span class="line">  <span class="attribute">gzip_buffers</span> <span class="number">16</span> <span class="number">8k</span>;</span><br><span class="line">  <span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">  <span class="attribute">gzip_types</span> text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml image/x-icon;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">@proxy</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># If Docker is used for deployment and Rails serves static files,</span></span><br><span class="line">  <span class="comment"># then needed must replace line `try_files $uri =404;` with `try_files $uri @proxy;`.</span></span><br><span class="line">  <span class="section">location</span> = /sw.js &#123;</span><br><span class="line">    <span class="attribute">add_header</span> Cache-Control <span class="string">&quot;public, max-age=604800, must-revalidate&quot;</span>;</span><br><span class="line">    <span class="attribute">add_header</span> Strict-Transport-Security <span class="string">&quot;max-age=63072000; includeSubDomains&quot;</span>;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">@proxy</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> <span class="regexp">~ ^/assets/</span> &#123;</span><br><span class="line">    <span class="attribute">add_header</span> Cache-Control <span class="string">&quot;public, max-age=2419200, must-revalidate&quot;</span>;</span><br><span class="line">    <span class="attribute">add_header</span> Strict-Transport-Security <span class="string">&quot;max-age=63072000; includeSubDomains&quot;</span>;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">@proxy</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> <span class="regexp">~ ^/avatars/</span> &#123;</span><br><span class="line">    <span class="attribute">add_header</span> Cache-Control <span class="string">&quot;public, max-age=2419200, must-revalidate&quot;</span>;</span><br><span class="line">    <span class="attribute">add_header</span> Strict-Transport-Security <span class="string">&quot;max-age=63072000; includeSubDomains&quot;</span>;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">@proxy</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> <span class="regexp">~ ^/emoji/</span> &#123;</span><br><span class="line">    <span class="attribute">add_header</span> Cache-Control <span class="string">&quot;public, max-age=2419200, must-revalidate&quot;</span>;</span><br><span class="line">    <span class="attribute">add_header</span> Strict-Transport-Security <span class="string">&quot;max-age=63072000; includeSubDomains&quot;</span>;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">@proxy</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> <span class="regexp">~ ^/headers/</span> &#123;</span><br><span class="line">    <span class="attribute">add_header</span> Cache-Control <span class="string">&quot;public, max-age=2419200, must-revalidate&quot;</span>;</span><br><span class="line">    <span class="attribute">add_header</span> Strict-Transport-Security <span class="string">&quot;max-age=63072000; includeSubDomains&quot;</span>;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">@proxy</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> <span class="regexp">~ ^/packs/</span> &#123;</span><br><span class="line">    <span class="attribute">add_header</span> Cache-Control <span class="string">&quot;public, max-age=2419200, must-revalidate&quot;</span>;</span><br><span class="line">    <span class="attribute">add_header</span> Strict-Transport-Security <span class="string">&quot;max-age=63072000; includeSubDomains&quot;</span>;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">@proxy</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> <span class="regexp">~ ^/shortcuts/</span> &#123;</span><br><span class="line">    <span class="attribute">add_header</span> Cache-Control <span class="string">&quot;public, max-age=2419200, must-revalidate&quot;</span>;</span><br><span class="line">    <span class="attribute">add_header</span> Strict-Transport-Security <span class="string">&quot;max-age=63072000; includeSubDomains&quot;</span>;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">@proxy</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> <span class="regexp">~ ^/sounds/</span> &#123;</span><br><span class="line">    <span class="attribute">add_header</span> Cache-Control <span class="string">&quot;public, max-age=2419200, must-revalidate&quot;</span>;</span><br><span class="line">    <span class="attribute">add_header</span> Strict-Transport-Security <span class="string">&quot;max-age=63072000; includeSubDomains&quot;</span>;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">@proxy</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> <span class="regexp">~ ^/system/</span> &#123;</span><br><span class="line">    <span class="attribute">add_header</span> Cache-Control <span class="string">&quot;public, max-age=2419200, immutable&quot;</span>;</span><br><span class="line">    <span class="attribute">add_header</span> Strict-Transport-Security <span class="string">&quot;max-age=63072000; includeSubDomains&quot;</span>;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">@proxy</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span><span class="regexp"> ^~</span> /api/v1/streaming &#123;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Proxy <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">proxy_pass</span> http://streaming;</span><br><span class="line">    <span class="attribute">proxy_buffering</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Connection <span class="variable">$connection_upgrade</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">add_header</span> Strict-Transport-Security <span class="string">&quot;max-age=63072000; includeSubDomains&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">tcp_nodelay</span> <span class="literal">on</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> <span class="variable">@proxy</span> &#123;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Proxy <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">proxy_pass_header</span> Server;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">    <span class="attribute">proxy_buffering</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Connection <span class="variable">$connection_upgrade</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">proxy_cache</span> CACHE;</span><br><span class="line">    <span class="attribute">proxy_cache_valid</span> <span class="number">200</span> <span class="number">7d</span>;</span><br><span class="line">    <span class="attribute">proxy_cache_valid</span> <span class="number">410</span> <span class="number">24h</span>;</span><br><span class="line">    <span class="attribute">proxy_cache_use_stale</span> <span class="literal">error</span> timeout updating http_500 http_502 http_503 http_504;</span><br><span class="line">    <span class="attribute">add_header</span> X-Cached <span class="variable">$upstream_cache_status</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">tcp_nodelay</span> <span class="literal">on</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">error_page</span> <span class="number">404</span> <span class="number">500</span> <span class="number">501</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /<span class="number">500</span>.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><p>在配置完成后，执行 <code>sudo nginx -t</code>检查配置文件是否正确，如果正确则执行<code>sudo systemctl restart nginx</code> 重启 Nginx 服务。</p><div class="tag-plugin quot"><h2 class="content" id="到现在，你的 Mastodon 实例就启动完成了！访问你的域名来试试吧！" type="text"><a href="#到现在，你的 Mastodon 实例就启动完成了！访问你的域名来试试吧！" class="headerlink" title="到现在，你的 Mastodon 实例就启动完成了！访问你的域名来试试吧！"></a>到现在，你的 Mastodon 实例就启动完成了！访问你的域名来试试吧！</h2></div><h2 id="修改配置文件">修改配置文件</h2><p>如果你想修改 Mastodon 的配置文件，可以使用<code>vim /home/mastodon/mastodon/.env.production</code>命令来编辑配置文件</p><p>修改完成后，使用以下命令重启 Mastodon 服务即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose down</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h2 id="使用-toolctl-管理-mastodon">使用 toolctl 管理 Mastodon</h2><h3 id="进入-docker-环境中操作">进入 Docker 环境中操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/mastodon/mastodon</span><br><span class="line">docker <span class="built_in">exec</span> -it web /bin/bash <span class="comment"># 此处的 web 是容器名，如果你的容器名不是 web，请自行修改</span></span><br></pre></td></tr></table></figure><h3 id="在-homemastodonmastodon-目录下操作">在<code>/home/mastodon/mastodon</code> 目录下操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/mastodon/mastodon</span><br><span class="line">docker-compose run --<span class="built_in">rm</span> web bin/tootctl 具体命令</span><br></pre></td></tr></table></figure><h3 id="在任意位置操作">在任意位置操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> web tootctl 具体命令</span><br></pre></td></tr></table></figure><h2 id="升级">升级</h2><p>如果需要升级 Mastodon，可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/mastodon/mastodon</span><br><span class="line">docker-compose down</span><br><span class="line">docker pull ghcr.io/mastodon/mastodon:latest</span><br></pre></td></tr></table></figure><p>如果你的 <code>docker-compose.yml</code>文件中制定了具体版本号，那么你就需要更改版本号。如果你填写的是<code>latest</code>，那么就不需要更改。</p><p>然后使用以下命令重启 Mastodon 服务即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>如果官方升级提升要求你执行<code>docker-compose run --rm web rails db:migrate</code>之类的命令，那么你可以在启动后执行。</p><p>在确认升级没有问题后，可以执行 <code>docker image prune -a</code>来清理旧的镜像。</p><h2id="如果在操作过程中出现了任何问题...">如果在操作过程中出现了任何问题...</h2><p>如果你在操作过程中出现了任何问题，而且没有对站点进行魔改，那么在Docker 环境外通过以下命令重新搭建容器即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/mastodon/mastodon</span><br><span class="line">docker-compose down</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h2 id="开启全文搜索">开启全文搜索</h2><p>如果你想开启全文搜索，可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/mastodon/mastodon</span><br><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><p>将 <code>docker-compose.yml</code> 文件中的 <code>es</code>部分前面的注释符号 <code>#</code> 去掉</p><p>然后编辑 <code>.env.production</code> 文件，加上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ES_ENABLED=true</span><br><span class="line">ES_HOST=es</span><br><span class="line">ES_PORT=9200</span><br></pre></td></tr></table></figure><p>然后重启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose down</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>等 Mastodon 路径下出现 <code>elasticsearch</code>文件夹后，赋权并再次重启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chown</span> 1000:1000 -R elasticsearch</span><br><span class="line">docker-compose down</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>全文搜索就开启了！</p><p>你可以使用<code>docker-compose run --rm web bin/tootctl search deploy</code>建立对之前嘟文的搜索索引。</p><div class="tag-plugin quot"><h2 class="content" id="那么，关于 Mastodon 部署的内容就到这里了！GL&HF！" type="text"><a href="#那么，关于 Mastodon 部署的内容就到这里了！GL&HF！" class="headerlink" title="那么，关于 Mastodon 部署的内容就到这里了！GL&HF！"></a>那么，关于 Mastodon 部署的内容就到这里了！GL&HF！</h2></div>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mastodon </tag>
            
            <tag> Rocky Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LCTT 翻译转载] 软件开发｜Rust 基础系列 #4: Rust 中的数组和元组</title>
      <link href="/lctt/translation-linuxcn-article-15837-1/"/>
      <url>/lctt/translation-linuxcn-article-15837-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文：<a href="https://itsfoss.com/rust-arrays-tuples/">Rust BasicsSeries #4: Arrays and Tuples in Rust</a> 首发：<ahref="https://linux.cn/article-15837-1.html">Rust 基础系列 #4: Rust中的数组和元组</a> @<a href="https://linux.cn/">Linux 中国</a> 作者：<ahref="https://itsfoss.com/author/pratham/">Pratham Patel</a> 译者：<ahref="https://linux.cn/lctt/">LCTT</a> <ahref="https://github.com/Cubik65536">Cubik</a></p></blockquote><span id="more"></span><h2 id="rust-基础系列-4-rust-中的数组和元组">Rust 基础系列 #4: Rust中的数组和元组</h2><p><imgsrc="https://img.linux.net.cn/data/attachment/album/202305/23/165645ljp41i87p7xcpx1z.jpg" /></p><blockquote><p>在 Rust 系列的第四篇中，学习复合数据类型、数组和元组。</p></blockquote><p>在上一篇文章中，你学习到了 Rust 中的 <ahref="https://www.cubik65536.top/lctt/translation-linuxcn-article-15811-1/">标量数据类型</a>。它们是整型、浮点数、字符和布尔值。</p><p>在本文中，我们将会看看 Rust 编程语言中的复合数据类型。</p><h3 id="rust-中的复合数据类型是什么">Rust 中的复合数据类型是什么？</h3><p>复合数据类型可以在一个变量中存储多个值。这些值可以是相同的标量数据类型，也可以是不同的标量数据类型。</p><p>Rust 编程语言中有两种这样的数据类型：</p><ul><li><ruby>数组<rt>Array</rt></ruby>：存储相同类型的多个值。</li><li><ruby>元组<rt>Tuple</rt></ruby>：存储多个值，可以是相同的类型，也可以是不同的类型。</li></ul><p>让我们了解一下它们吧！</p><h3 id="rust-中的数组">Rust 中的数组</h3><p>Rust 编程语言中的数组具有以下特性：</p><ul><li>每一个元素都必须是相同的类型</li><li>数组有一个固定的长度</li><li>数组存储在堆栈中，即其中存储的数据可以被 <em>迅速</em> 访问</li></ul><p>创建数组的语法如下：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无类型声明</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">variable_name</span> = [element1, element2, ..., elementn];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有类型声明</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">variable_name</span>: [data_type; array_length] = [element1, element2, ..., elementn];</span><br></pre></td></tr></table></figure><p>数组中的元素是在方括号中声明的。要访问数组的元素，需要在方括号中指定要访问的索引。</p><p>来让我们看一个例子来更好地理解这个。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// 无类型声明</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">greeting</span> = [<span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;!&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有类型声明</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">pi</span>: [<span class="type">i32</span>; <span class="number">10</span>] = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">character</span> <span class="keyword">in</span> greeting &#123;</span><br><span class="line">        <span class="built_in">print!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, character);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;\nPi: 3.1&#123;&#125;&#123;&#125;&#123;&#125;&#123;&#125;&quot;</span>, pi[<span class="number">0</span>], pi[<span class="number">1</span>], pi[<span class="number">2</span>], pi[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，我定义了一个字符数组和另一个存储 <code>i32</code>类型的值的数组。<code>greeting</code> 数组以单独字符的形式存储了字符串<code>"Hello world!"</code> 的字符。<code>pi</code>数组以单独数字的形式存储了圆周率小数点后的前 10 位数字。</p><p>然后，我使用 <code>for</code> 循环打印了 <code>greeting</code>数组的每个字符。（我很快就会讲到循环。）然后，我打印了 <code>pi</code>数组的前 4 个值。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello world!</span><br><span class="line">Pi: 3.11415</span><br></pre></td></tr></table></figure><p>如果你想创建一个数组，其中每个元素都是 <em>y</em>，并且出现<em>x</em> 次，你可以使用以下快捷方式在 Rust 中实现：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">variable_name</span> = [y; x];</span><br></pre></td></tr></table></figure><p>来看一个演示……</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">10</span>; <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> a &#123;</span><br><span class="line">        <span class="built_in">print!</span>(<span class="string">&quot;&#123;i&#125; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我创建了一个变量 <code>a</code>，它的长度为 5。数组中的每个元素都是'10'。我通过使用 <code>for</code>循环打印数组的每个元素来验证这一点。</p><p>它的输出如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 10 10 10 10</span><br></pre></td></tr></table></figure><blockquote><p>🤸 作为练习，尝试创建一个长度为 <em>x</em>的数组，然后尝试访问数组的第 <em>x+1</em> 个元素。看看会发生什么。</p></blockquote><h3 id="rust-中的元组">Rust 中的元组</h3><p>Rust 中的元组具有以下特性：</p><ul><li>就像数组一样，元组的长度是固定的</li><li>元素可以是相同的/不同的标量数据类型</li><li>元组存储在堆栈中，所以访问速度更快</li></ul><p>创建元组的语法如下：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无类型声明</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">variable_name</span> = (element1, element2, ..., element3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有类型声明</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">variable_name</span>: (data_type, ..., data_type) = (element1, element2, ..., element3);</span><br></pre></td></tr></table></figure><p>元组的元素写在圆括号中。要访问元素，使用点运算符，后跟该元素的索引。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = (<span class="number">38</span>, <span class="number">923.329</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span>: (<span class="type">char</span>, <span class="type">i32</span>, <span class="type">f64</span>, <span class="type">bool</span>) = (<span class="string">&#x27;r&#x27;</span>, <span class="number">43</span>, <span class="number">3.14</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;a.0: &#123;&#125;, a.1: &#123;&#125;, a.2: &#123;&#125;&quot;</span>, a.<span class="number">0</span>, a.<span class="number">1</span>, a.<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;b.0: &#123;&#125;, b.1: &#123;&#125;, b.2: &#123;&#125;, b.3: &#123;&#125;&quot;</span>, b.<span class="number">0</span>, b.<span class="number">1</span>, b.<span class="number">2</span>, b.<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 元组解构</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">pixel</span> = (<span class="number">50</span>, <span class="number">0</span>, <span class="number">200</span>);</span><br><span class="line">    <span class="keyword">let</span> (red, green, blue) = pixel;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;red: &#123;&#125;, green: &#123;&#125;, blue: &#123;&#125;&quot;</span>, red, green, blue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我在第 2 行和第 3行声明了两个元组。它们只包含我当时想到的随机值。但是仔细看，两个元组中每个元素的数据类型都不同。然后，在第5 行和第 6 行，我打印了两个元组的每个元素。</p><p>在第 9 行，我声明了一个名为 <code>pixel</code> 的元组，它有 3个元素。每个元素都是组成像素的颜色红色、绿色和蓝色的亮度值。这个范围是从0 到 255。所以，理想情况下，我会声明类型为<code>(u8, u8, u8)</code>，但是在学习代码时不需要这样优化 ; )</p><p>然后，在第 10 行，我“解构”了 <code>pixel</code>元组的每个值，并将其存储在单独的变量<code>red</code>、<code>green</code> 和 <code>blue</code>中。然后，我打印了 <code>red</code>、<code>green</code> 和<code>blue</code> 变量的值，而不是 <code>pixel</code> 元组的值。</p><p>让我们看看输出……</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.0: 38, a.1: 923.329, a.2: true</span><br><span class="line">b.0: r, b.1: 43, b.2: 3.14, b.3: false</span><br><span class="line">red: 50, green: 0, blue: 200</span><br></pre></td></tr></table></figure><p>看起来不错 :)</p><h3 id="额外内容切片">额外内容：切片</h3><p>准确的来说，<ruby>切片<rt>Slice</rt></ruby> 不是 Rust中的复合数据类型。相反，切片是现有复合数据类型的 “切片”。</p><p>一个切片由三个元素组成：</p><ul><li>一个初始索引</li><li>切片运算符（<code>..</code> 或 <code>..=</code>）</li><li>一个结束索引</li></ul><p>接下来是数组切片的一个示例：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">my_array</span> = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">my_slice</span> = &amp;my_array[<span class="number">0</span>..<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">element</span> <span class="keyword">in</span> my_slice &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;element&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就像 C 和 C++ 一样，<code>&amp;</code>用于存储变量的引用（而不是原始指针）。所以 <code>&amp;my_array</code>意味着对变量 <code>my_array</code> 的引用。</p><p>然后，来看看切片。切片由 <code>[0..4]</code>表示。这里，<code>0</code> 是切片开始的索引。而 <code>4</code>是切片结束的索引。这里的 4 是一个非包含索引。</p><p>这是程序输出，以更好地理解正在发生的事情：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>如果你想要一个 <em>包含</em> 范围，你可以使用 <code>..=</code>作为包含范围的切片运算符。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">my_array</span> = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">my_slice</span> = &amp;my_array[<span class="number">0</span>..=<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">element</span> <span class="keyword">in</span> my_slice &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;element&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，这个范围是从第 0 个元素到第 4个元素，下面是输出来证明这一点：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h3 id="总结">总结</h3><p>本文讲到了 Rust编程语言中的复合数据类型。你学习了如何声明和访问存储在数组和元组类型中的值。此外，你还了解了切片“类型”，以及如何解构元组。</p><p>在下一章中，你将学习如何在 Rust 程序中使用函数。敬请关注。</p><p><em>（题图：MJ/22a0d143-2216-439f-8e1d-abd94cdfdbd0）</em></p><hr /><p>via: https://itsfoss.com/rust-arrays-tuples/</p><p>作者：<a href="https://itsfoss.com/author/pratham/">Pratham Patel</a>选题：<a href="https://github.com/lkxed/">lkxed</a> 译者：<ahref="https://github.com/Cubik65536">Cubik65536</a> 校对：<ahref="https://github.com/wxy">wxy</a></p><p>本文由 <a href="https://github.com/LCTT/TranslateProject">LCTT</a>原创编译，<a href="https://linux.cn/">Linux中国</a> 荣誉推出</p>]]></content>
      
      
      <categories>
          
          <category> LCTT </category>
          
          <category> 转载 </category>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Rust 基础 </tag>
            
            <tag> 软件开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LCTT 翻译转载] 软件开发｜Rust 基础系列 #3: Rust 中的数据类型</title>
      <link href="/lctt/translation-linuxcn-article-15811-1/"/>
      <url>/lctt/translation-linuxcn-article-15811-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文：<a href="https://itsfoss.com/rust-data-types/">Rust BasicsSeries #3: Data Types in Rust</a> 首发：<ahref="https://linux.cn/article-15811-1.html">Rust 基础系列 #3: Rust中的数据类型</a> @<a href="https://linux.cn/">Linux 中国</a> 作者：<ahref="https://itsfoss.com/author/pratham/">Pratham Patel</a> 译者：<ahref="https://linux.cn/lctt/">LCTT</a> <ahref="https://github.com/Cubik65536">Cubik</a></p></blockquote><span id="more"></span><h2 id="rust-基础系列-3-rust-中的数据类型">Rust 基础系列 #3: Rust中的数据类型</h2><p><imgsrc="https://img.linux.net.cn/data/attachment/album/202305/13/215245a1wjvnwtcwawasnw.jpg" /></p><p>在 <a href="https://linux.cn/article-15771-1.html">上一篇</a> 关于Rust 编程语言的文章中，我们提到了变量、常量和<ruby>遮蔽<rt>shadowing</rt></ruby> 。</p><p>现在来讲解数据类型是再自然不过的了。</p><h3 id="数据类型是什么">数据类型是什么？</h3><p>将这个词汇展开些单词的顺序改变一下你就会得到答案了；“数据类型” -&gt;“数据的类型”。</p><p>计算机使用 <code>0</code> 和 <code>1</code>来存储数据，但是为了让数据在读取时有意义，我们使用数据类型来表示这些<code>0</code> 和 <code>1</code> 的含义。</p><p>Rust 有两种数据类型：</p><ul><li><strong>标量数据类型</strong>：只能存储单个值的类型。</li><li><strong>复合数据类型</strong>：可以存储多个值，甚至是不同类型的值。</li></ul><p>在本文中，我将讲解标量数据类型。我将在下一篇文章中讲解第二类数据类型。</p><p>接下来是 Rust 中四种主要标量数据类型的简要概述：</p><ul><li><strong>整型</strong>：存储整数。有每种特定情况下使用的子类型。</li><li><strong>浮点数</strong>：存储带有小数部分的数字。有两种基于大小的子类型。</li><li><strong>字符</strong>：使用 UTF-8编码存储单个字符。（是的，你可以在字符中存储表情符号*。）</li><li><strong>布尔值</strong>： 存储 <code>true</code> 或<code>false</code>。（给那些无法就 <code>0</code> 是 <code>true</code>还是 <code>0</code> 是 <code>false</code> 达成一致的开发者。）</li></ul><h3 id="整型">整型</h3><p>在编程语言中，整型指的是一个整数。Rust中的整型要么是<strong>有符号</strong>的，要么是<strong>无符号</strong>的。无符号整型只能存储0 和正数，而有符号整型可以存储负数、0 和正数。</p><blockquote><p>💡 一个有符号整型的范围从 <code>-(2<sup>n-1</sup>)</code> 开始，以<code>(2<sup>n-1</sup>)-1</code> 结束。同样，无符号整型的范围从<code>0</code> 开始，以 <code>(2<sup>n</sup>)-1</code> 结束。</p></blockquote><p>这是根据符号和长度可用的整型：</p><figure><imgsrc="https://media.discordapp.net/attachments/1001332168506753024/1062952929734164540/data-type-table1.png"alt="Rust 中的整型数据类型" /><figcaption aria-hidden="true">Rust 中的整型数据类型</figcaption></figure><p>正如你所见，Rust 有 8、16、32、64 甚至 128位的有符号和无符号整型！</p><p>使用 <code>*size</code> 的整型根据计算机的架构而变化。在 8位微控制器上，它是 <code>*8</code>，在 32 位的旧计算机上，它是<code>*32</code>，在现代 64 位系统上，它是 <code>*64</code>。</p><p>使用 <code>*size</code>是为了存储与内存（这与裸机相关）有关的数据，比如指针、偏移量等。</p><blockquote><p>💡 当你没有显式地指定整型的子类型时，Rust 编译器会默认推断为<code>i32</code>。显然，如果值比 <code>i32</code> 能存储的值大或小，Rust编译器会礼貌地报错并要求你手动指定类型。</p></blockquote><p>Rust不仅允许你以十进制形式存储整数，还允许你以二进制、八进制和十六进制形式存储整数。</p><p>为了更好的可读性，你可以使用下划线 <code>_</code>来代替逗号来书写/读取大数。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">bin_value</span> = <span class="number">0b100_0101</span>; <span class="comment">// 使用前缀“0b”表示二进制</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">oct_value</span> = <span class="number">0o105</span>; <span class="comment">// 使用前缀“0o”表示八进制</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">hex_value</span> = <span class="number">0x45</span>; <span class="comment">// 使用前缀“0x”表示十六进制</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">dec_value</span> = <span class="number">1_00_00_000</span>; <span class="comment">// 和写一克若（1,00,00,000）一样</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;二进制值: &#123;bin_value&#125;&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;八进制值: &#123;oct_value&#125;&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;十六进制值: &#123;hex_value&#125;&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;十进制值: &#123;dec_value&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我使用二进制、八进制和十六进制分别将十进制数 69 存储在变量<code>bin_value</code>、<code>oct_value</code> 和 <code>hex_value</code>中。在变量 <code>dec_value</code> 中，我存储了数字 <ruby><ahref="https://zh.wikipedia.org/zh-cn/克若">1 克若</a><rt>1Crore</rt></ruby>（一千万），并且使用了下划线替代逗号，这是印度的书写系统。对于那些更熟悉国际计数系统的人来说，你可以将其写成<code>10_000_000</code>。</p><p>在编译并运行这个二进制文件后，我得到了如下输出：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">二进制值: 69</span><br><span class="line">八进制值: 69</span><br><span class="line">十六进制值: 69</span><br><span class="line">十进制值: 10000000</span><br></pre></td></tr></table></figure><h3 id="浮点数">浮点数</h3><p>浮点数是一种存储带有小数部分的数字的数据类型。</p><p>与 Rust 中的整型不同，浮点数只有两种子类型：</p><ul><li><code>f32</code>: 单精度浮点数类型</li><li><code>f64</code>: 双精度浮点数类型</li></ul><p>和 Rust 中的整型一样，当 Rust推断一个变量的类型时，如果它看起来像一个浮点数，那么它就会被赋予<code>f64</code> 类型。这是因为 <code>f64</code> 类型比 <code>f32</code>类型有更高的精度，并且在大多数计算操作中几乎和 <code>f32</code>类型一样快。请注意，<em>浮点数据类型（<code>f32</code> 和<code>f64</code>）都是<strong>有符号</strong>的</em>。</p><blockquote><p>📋 Rust 编程语言按照 <ahref="https://zh.wikipedia.org/zh-cn/IEEE_754">IEEE 754</a>二进制浮点数表示与算术标准存储浮点数。</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">pi</span>: <span class="type">f32</span> = <span class="number">3.1400</span>; <span class="comment">// f32</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">golden_ratio</span> = <span class="number">1.610000</span>; <span class="comment">// f64</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">five</span> = <span class="number">5.00</span>; <span class="comment">// 小数点表示它必须被推断为浮点数</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">six</span>: <span class="type">f64</span> = <span class="number">6</span>.; <span class="comment">// 尽管类型说明被显式的添加了，小数点也是**必须**的</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;pi: &#123;pi&#125;&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;黄金比例: &#123;golden_ratio&#125;&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;五: &#123;five&#125;&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;六: &#123;six&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仔细看第 5 行。尽管我已经为变量 <code>six</code>指定了类型，但我<strong>必须</strong>至少加上一个小数点。小数点之后有什么就由你决定了。</p><p>程序的输出是相当可预测的... 吗？</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pi: 3.14</span><br><span class="line">黄金比例: 1.61</span><br><span class="line">五: 5</span><br><span class="line">六: 6</span><br></pre></td></tr></table></figure><p>在上面的输出中，你可能已经注意到，当显示变量<code>pi</code>、<code>golden_ratio</code> 和 <code>five</code>中存储的值时，我在变量声明时在结尾增加的零已经消失了。</p><p>就算这些零没有被 <em>移除</em>，它们也会在通过 <code>println</code>宏输出值时被省略。所以，不，Rust 没有篡改你的变量值。</p><h3 id="字符">字符</h3><p>你可以在一个变量中存储一个字符，类型是 <code>char</code>。像 80年代的传统编程语言一样，你可以存储一个 <ahref="https://www.ascii-code.com/?ref=itsfoss.com">ASCII</a> 字符。但是Rust 还扩展了字符类型，以存储一个有效的 UTF-8字符。这意味着你可以在一个字符中存储一个表情符号 😉</p><blockquote><p>💡一些表情符号实际上是两个已有表情符号的组合。一个很好的例子是“燃烧的心”表情符号：❤️‍🔥。这个表情符号是通过使用<ahref="https://unicode-table.com/en/200D/?ref=itsfoss.com">零宽度连接器</a>来组合两个表情符号构成的：❤️ + 🔥 = ❤️‍🔥</p><p>Rust 的字符类型无法存储这样的表情符号。</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">p</span>: <span class="type">char</span> = <span class="string">&#x27;p&#x27;</span>; <span class="comment">// 带有显性类型说明</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">crab</span> = &#x27;🦀&#x27;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Oh look, &#123;&#125; &#123;&#125;! :&#123;&#125;&quot;</span>, a, crab, p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正如你所见，我已经将 ASCII 字符 'a' 和 'p' 存储在变量 <code>a</code>和 <code>p</code> 中。我还在变量 <code>crab</code> 中存储了一个有效的UTF-8 字符，即螃蟹表情符号。然后我打印了存储在每个变量中的字符。</p><p>这是输出：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Oh look, a 🦀! :p</span><br></pre></td></tr></table></figure><h3 id="布尔值">布尔值</h3><p>在 Rust 中，布尔值类型只存储两个可能的值之一：<code>true</code> 或<code>false</code>。如果你想显性指定类型，请使用 <code>bool</code>。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">val_t</span>: <span class="type">bool</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">val_f</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;val_t: &#123;val_t&#125;&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;val_f: &#123;val_f&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译并执行上述代码后，结果如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">val_t: true</span><br><span class="line">val_f: false</span><br></pre></td></tr></table></figure><h3 id="额外内容显性类型转换">额外内容：显性类型转换</h3><p>在上一篇讲述 Rust 编程语言中的变量的文章中，我展示了一个非常基础的 <ahref="https://www.cubik65536.top/lctt/translation-linuxcn-article-15771-1/">温度转换程序</a>。在那里，我提到Rust 不允许隐式类型转换。</p><p>但这不代表 Rust 也不允许 <em>显性</em> 类型转换 ; )</p><p>要进行显性类型转换，使用 <code>as</code>关键字，后面跟着要转换的数据类型。</p><p>这是一个示例程序：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = <span class="number">3</span> <span class="keyword">as</span> <span class="type">f64</span>; <span class="comment">// f64</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span> = <span class="number">3.14159265359</span> <span class="keyword">as</span> <span class="type">i32</span>; <span class="comment">// i32</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;a: &#123;a&#125;&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;b: &#123;b&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在第二行，我没有使用 <code>3.0</code>，而是在 <code>3</code> 后面写上<code>as f64</code>，以表示我希望编译器将<code>3</code>（一个整数）转换为 64位浮点数的类型转换。第三行也是一样。但是这里，类型转换是<strong>有损的</strong>。这意味着小数部分<em>完全消失</em>。它不是存储为<code>3.14159265359</code>，而是存储为简单的 <code>3</code>。</p><p>程序的输出可以验证这一点：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a: 3</span><br><span class="line">b: 3</span><br></pre></td></tr></table></figure><h3 id="总结">总结</h3><p>本文介绍了 Rust中的原始/标量数据类型。主要有四种这样的数据类型：整型、浮点数、字符和布尔值。</p><p>整型用于存储整数，它们有几种子类型，基于它们是有符号还是无符号以及长度。浮点数用于存储带有小数的数字，根据长度有两种子类型。字符数据类型用于存储单个有效的UTF-8 编码字符。最后，布尔值用于存储 <code>true</code> 或<code>false</code> 值。</p><p>在下一章中，我将讨论数组和元组等复合数据类型。敬请关注。</p><p><em>（题图：MJ/c0c49e15-cc9d-4eef-8e52-2f0d62294965）</em></p><hr /><p>via: https://itsfoss.com/rust-data-types/</p><p>作者：<a href="https://itsfoss.com/author/pratham/">Pratham Patel</a>选题：<a href="https://github.com/lkxed/">lkxed</a> 译者：<ahref="https://github.com/Cubik65536">Cubik65536</a> 校对：<ahref="https://github.com/wxy">wxy</a></p><p>本文由 <a href="https://github.com/LCTT/TranslateProject">LCTT</a>原创编译，<a href="https://linux.cn/">Linux中国</a> 荣誉推出</p>]]></content>
      
      
      <categories>
          
          <category> LCTT </category>
          
          <category> 转载 </category>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Rust 基础 </tag>
            
            <tag> 软件开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 年 4 月总结</title>
      <link href="/2023-04-MonthJournal/"/>
      <url>/2023-04-MonthJournal/</url>
      
        <content type="html"><![CDATA[<p>2023 年 4 月报来了，让我们来看看这个月都发生了什么吧！</p><span id="more"></span><h2 id="mastodon">Mastodon</h2><p>我成功搭建了我自己的 Mastodon 实例 <a href="https://mstdn.ixor.tech"class="uri">https://mstdn.ixor.tech</a>。我以后也会在这个站点上更新动态，欢迎关注。</p><h2 id="codeedit">CodeEdit</h2><p>这个月我又重新开始关注 <ahref="https://www.codeedit.app">CodeEdit</a> 的开发。该 App在月中的时候重构了设置界面，将 Xcode 风格更换为了 macOS Ventura的新式风格设置。我则提交了包括 <ahref="https://github.com/CodeEditApp/CodeEdit/pull/1244">#1244</a>，<ahref="https://github.com/CodeEditApp/CodeEdit/pull/1248">#1248</a> 和 <ahref="https://github.com/CodeEditApp/CodeEdit/pull/1253">#1263</a> 等PR，修复了版本管理账户无法登录，无法删除账号的bug，并添加了在报错情况下弹窗提醒用户的功能。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/235374253-cf3b904b-e0de-4d42-9c08-0572fc9bb761.png" fancybox="true"/></div></div><p>同时，我参加了开发团队四月最后的一个周会，这也是我参与的第一个周会。在周会上，我简单报告了我做的工作，也听到了其他开发者的讨论。可预见的是，我也会尽量参加之后的例行周会。</p><h2 id="remotemc">RemoteMC</h2><p>这个月没有进行什么开发工作，不过对 RemoteMC-MCDR的一部分功能进行了重新设计。同时，我也进行了 RemoteMC-Core 和RemoteMC-MCDR 正式版发布的规划，可以期待一下。</p><h2 id="其他项目">其他项目</h2><p>其他项目我暂时没有推进什么内容。</p><h2 id="月">5 月</h2><p>5月是这个学年最后一个完整的上课月，考试也不少。项目开发工作应该仍然会以一个比较缓慢的速度进行。</p><div class="tag-plugin quot"><h2 class="content" id="那么，先这样了，下个月见！" type="text"><a href="#那么，先这样了，下个月见！" class="headerlink" title="那么，先这样了，下个月见！"></a>那么，先这样了，下个月见！</h2></div>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LCTT 翻译转载] 软件开发｜Rust 基础系列 #2: 在 Rust 程序中使用变量和常量</title>
      <link href="/lctt/translation-linuxcn-article-15771-1/"/>
      <url>/lctt/translation-linuxcn-article-15771-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文：<a href="https://itsfoss.com/rust-variables/">Rust BasicsSeries #2: Using Variables and Constants in Rust Programs</a> 首发：<ahref="https://linux.cn/article-15771-1.html">Rust 基础系列 #2: 在 Rust程序中使用变量和常量</a> @<a href="https://linux.cn/">Linux 中国</a>作者：<a href="https://itsfoss.com/author/pratham/">Pratham Patel</a>译者：<a href="https://linux.cn/lctt/">LCTT</a> <ahref="https://github.com/Cubik65536">Cubik</a></p></blockquote><span id="more"></span><h2 id="rust-基础系列-2-在-rust-程序中使用变量和常量">Rust 基础系列 #2:在 Rust 程序中使用变量和常量</h2><p><imgsrc="https://img.linux.net.cn/data/attachment/album/202305/01/144948gp13zdindx50ll0p.png" /></p><blockquote><p>推进你的 Rust 学习，熟悉 Rust 程序的变量和常量。</p></blockquote><p>在 <ahref="https://www.cubik65536.top/lctt/translation-linuxcn-article-15709-1/">该系列的第一章</a>中，我讲述了为什么Rust 是一门越来越流行的编程语言。我还展示了如何 <ahref="https://www.cubik65536.top/lctt/translation-linuxcn-article-15709-1/">在Rust 中编写 Hello World 程序</a>。</p><p>让我们继续 Rust 之旅。在本文中，我将向你介绍 Rust编程语言中的变量和常量。</p><p>此外，我还将讲解一个称为“<ruby>遮蔽<rt>shadowing</rt></ruby>”的新编程概念。</p><h3 id="rust-变量的独特之处">Rust 变量的独特之处</h3><p>在编程语言中，变量是指 <em>存储某些数据的内存地址的一个别名</em>。</p><p>对 Rust 语言来讲也是如此。但是 Rust有一个独特的“特性”。每个你声明的变量都是 <strong>默认<ruby>不可变的<rt>immutable</rt></ruby></strong>。这意味着一旦给变量赋值，就不能再改变它的值。</p><p>这个决定是为了确保默认情况下，你不需要使用 <ruby>自旋锁<rt>spinlock</rt></ruby> 或 <ruby>互斥锁<rt>mutex</rt></ruby>等特殊机制来引入多线程。Rust <strong>会保证</strong>安全的并发。由于所有变量（默认情况下）都是不可变的，因此你不需要担心线程会无意中更改变量值。</p><p>这并不是在说 Rust中的变量就像常量一样，因为它们确实不是常量。变量可以被显式地定义为可变的。这样的变量称为<strong>可变变量</strong> 。</p><p>这是在 Rust 中声明变量的语法：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认情况下不可变</span></span><br><span class="line"><span class="comment">// 初始化值是**唯一**的值</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">variable_name</span> = value;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 &#x27;mut&#x27; 关键字定义可变变量</span></span><br><span class="line"><span class="comment">// 初始化值可以被改变</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">variable_name</span> = value;</span><br></pre></td></tr></table></figure><blockquote><p>🚧尽管你可以改变可变变量的值，但你不能将另一种数据类型的值赋值给它。</p><p>这意味着，如果你有一个可变的浮点型变量，你不能在后面将一个字符赋值给它。</p></blockquote><h3 id="rust-数据类型概观">Rust 数据类型概观</h3><p>在上一篇文章中，你可能注意到了我提到 Rust是一种强类型语言。但是在定义变量时，你不需要指定数据类型，而是使用一个通用的关键字<code>let</code>。</p><p>Rust编译器可以根据赋值给变量的值推断出变量的数据类型。但是如果你仍然希望明确指定数据类型并希望注释类型，那么可以这样做。以下是语法：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">variable_name</span>: data_type = value;</span><br></pre></td></tr></table></figure><p>下面是 Rust 编程语言中一些常见的数据类型：</p><ul><li><strong>整数类型</strong>：分别用于有符号和无符号的 32 位整数的<code>i32</code> 和 <code>u32</code></li><li><strong>浮点类型</strong>：分别用于 32 位和 64 位浮点数的<code>f32</code> 和 <code>f64</code></li><li><strong>布尔类型</strong>：<code>bool</code></li><li><strong>字符类型</strong>：<code>char</code></li></ul><p>我会在下一篇文章中更详细地介绍 Rust的数据类型。现在，这应该足够了。</p><blockquote><p>🚧 Rust 并不支持隐式类型转换。因此，如果你将值 <code>8</code>赋给一个浮点型变量，你将会遇到编译时错误。你应该赋的值是 <code>8.</code>或 <code>8.0</code>。</p></blockquote><p>Rust 还强制要求在读取存储在其中的值之前初始化变量。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="comment">// 该代码块不会被编译</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, a); <span class="comment">// 本行报错</span></span><br><span class="line">    <span class="comment">// 读取一个**未初始化**变量的值是一个编译时错误</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123; <span class="comment">// 该代码块会被编译</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span>;</span><br><span class="line">    a = <span class="number">128</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, a); <span class="comment">// 本行不会报错</span></span><br><span class="line">    <span class="comment">// 变量 &#x27;a&#x27; 有一个初始值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你在不初始化的情况下声明一个变量，并在给它赋值之前使用它，Rust编译器将会抛出一个 <strong>编译时错误</strong> 。</p><p>虽然错误很烦人，但在这种情况下，Rust编译器强制你不要犯写代码时常见的错误之一：未初始化的变量。</p><h3 id="rust-编译器的错误信息">Rust 编译器的错误信息</h3><p>来写几个程序，你将</p><ul><li>通过执行“正常”的任务来理解 Rust的设计，这些任务实际上是内存相关问题的主要原因</li><li>阅读和理解 Rust 编译器的错误/警告信息</li></ul><h4 id="测试变量的不可变性">测试变量的不可变性</h4><p>让我们故意写一个试图修改不可变变量的程序，看看接下来会发生什么。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">a</span> = <span class="number">172</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span> = <span class="number">273</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;a: &#123;a&#125;, b: &#123;b&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    a = <span class="number">380</span>;</span><br><span class="line">    b = <span class="number">420</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;a: &#123;&#125;, b: &#123;&#125;&quot;</span>, a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直到第 4 行看起来都是一个简单的程序。但是在第 7 行，变量<code>b</code> —— 一个不可变变量 —— 的值被修改了。</p><p>注意打印 Rust 变量值的两种方法。在第 4行，我将变量括在花括号中，以便打印它们的值。在第 8行，我保持括号为空，并使用 C的风格将变量作为参数。这两种方法都是有效的。（除了修改不可变变量的值，这个程序中的所有内容都是正确的。）</p><p>来编译一下！如果你按照上一章的步骤做了，你已经知道该怎么做了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rustc main.rs</span></span><br><span class="line">error[E0384]: cannot assign twice to immutable variable `b`</span><br><span class="line"><span class="meta prompt_"> --&gt; </span><span class="language-bash">main.rs:7:5</span></span><br><span class="line">  |</span><br><span class="line">3 |     let b = 273;</span><br><span class="line">  |         -</span><br><span class="line">  |         |</span><br><span class="line">  |         first assignment to `b`</span><br><span class="line">  |         help: consider making this binding mutable: `mut b`</span><br><span class="line">...</span><br><span class="line">7 |     b = 420;</span><br><span class="line">  |     ^^^^^^^ cannot assign twice to immutable variable</span><br><span class="line"></span><br><span class="line">error: aborting due to previous error</span><br><span class="line"></span><br><span class="line">For more information about this error, try `rustc --explain E0384`.</span><br></pre></td></tr></table></figure><blockquote><p>📋 “binding” 一词是指变量名。但这只是一个简单的解释。</p></blockquote><p>这很好的展示了 Rust强大的错误检查和信息丰富的错误信息。第一行展示了阻止上述代码编译的错误信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error[E0384]: cannot assign twice to immutable variable b</span><br></pre></td></tr></table></figure><p>这意味着，Rust 编译器注意到我试图给变量 <code>b</code>重新赋值，但变量 <code>b</code>是一个不可变变量。所以这就是导致这个错误的原因。</p><p>编译器甚至可以识别出错误发生的确切行和列号。</p><p>在显示 <code>first assignment to b</code>的行下面，是提供帮助的行。因为我正在改变不可变变量 <code>b</code>的值，所以我被告知使用 <code>mut</code> 关键字将变量 <code>b</code>声明为可变变量。</p><blockquote><p>🖥️ 自己实现一个修复来更好地理解手头的问题。</p></blockquote><h4 id="使用未初始化的变量">使用未初始化的变量</h4><p>现在，让我们看看当我们尝试读取未初始化变量的值时，Rust编译器会做什么。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span>: <span class="type">i32</span>;</span><br><span class="line">    a = <span class="number">123</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;a: &#123;a&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span>: <span class="type">i32</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;b: &#123;b&#125;&quot;</span>);</span><br><span class="line">    b = <span class="number">123</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，我有两个不可变变量 <code>a</code> 和<code>b</code>，在声明时都没有初始化。变量 <code>a</code>在其值被读取之前被赋予了一个值。但是变量 <code>b</code>的值在被赋予初始值之前被读取了。</p><p>来编译一下，看看结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rustc main.rs</span></span><br><span class="line">warning: value assigned to `b` is never read</span><br><span class="line"><span class="meta prompt_"> --&gt; </span><span class="language-bash">main.rs:8:5</span></span><br><span class="line">  |</span><br><span class="line">8 |     b = 123;</span><br><span class="line">  |     ^</span><br><span class="line">  |</span><br><span class="line">  = help: maybe it is overwritten before being read?</span><br><span class="line">  = note: `#[warn(unused_assignments)]` on by default</span><br><span class="line"></span><br><span class="line">error[E0381]: used binding `b` is possibly-uninitialized</span><br><span class="line"><span class="meta prompt_"> --&gt; </span><span class="language-bash">main.rs:7:19</span></span><br><span class="line">  |</span><br><span class="line">6 |     let b: i32;</span><br><span class="line">  |         - binding declared here but left uninitialized</span><br><span class="line">7 |     println!(&quot;b: &#123;b&#125;&quot;);</span><br><span class="line">  |                   ^ `b` used here but it is possibly-uninitialized</span><br><span class="line">  |</span><br><span class="line">  = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)</span><br><span class="line"></span><br><span class="line">error: aborting due to previous error; 1 warning emitted</span><br><span class="line"></span><br><span class="line">For more information about this error, try `rustc --explain E0381`.</span><br></pre></td></tr></table></figure><p>这里，Rust 编译器抛出了一个编译时错误和一个警告。警告说变量<code>b</code> 的值从来没有被读取过。</p><p>但是这是荒谬的！变量 <code>b</code> 的值在第 7行被访问了。但是仔细看；警告是关于第 8行的。这很令人困惑；让我们暂时跳过这个警告，继续看错误。</p><p>这个错误信息说<code>used binding b is possibly-uninitialized</code>。和之前的例子一样，Rust编译器指出错误是由于尝试在第 7 行读取变量 <code>b</code>的值而引起的。读取变量 <code>b</code>的值是错误的原因是它的值没有初始化。在 Rust编程语言中，这是非法的。因此编译时错误出现。</p><blockquote><p>🖥️ 这个错误可以很容易地通过交换第 7 和第 8行的代码来解决。试一下，看看错误是否消失了。</p></blockquote><h3 id="示例程序交换数字">示例程序：交换数字</h3><p>现在你已经熟悉了常见的变量相关问题，让我们来看一个交换两个变量值的程序。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">a</span> = <span class="number">7186932</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">b</span> = <span class="number">1276561</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;a: &#123;a&#125;, b: &#123;b&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换变量值</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">temp</span> = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;a: &#123;&#125;, b: &#123;&#125;&quot;</span>, a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我在这里声明了两个变量 <code>a</code> 和<code>b</code>。这两个变量都是可变的，因为我希望在后面改变它们的值。我赋予了一些随机值。最初，我打印了这些变量的值。</p><p>然后，在第 8 行，我创建了一个名为 <code>temp</code>的不可变变量，并将存储在 <code>a</code>中的值赋给它。之所以这个变量是不可变的，是因为 <code>temp</code>的值不会改变。</p><p>要交换值，我将变量 <code>b</code> 的值赋给变量<code>a</code>，在下一行，我将 <code>temp</code> 的值（它包含<code>a</code> 的值）赋给变量<code>b</code>。现在值已经交换了，我打印了变量 <code>a</code> 和<code>b</code> 的值。</p><p>在编译并执行上面的代码后，我得到了以下输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a: 7186932, b: 1276561</span><br><span class="line">a: 1276561, b: 7186932</span><br></pre></td></tr></table></figure><p>正如你所见，值已经交换了。完美。</p><h3 id="使用未使用的变量">使用未使用的变量</h3><p>当你声明了一些变量，打算在后面使用它们，但是还没有使用它们，然后编译你的Rust 代码来检查一些东西时，Rust 编译器会警告你。</p><p>原因是显而易见的。不会被使用的变量占用了不必要的初始化时间（CPU周期）和内存空间。如果不会被使用，为什么要在程序写上它呢？尽管编译器确实会优化这一点。但是它仍然是一个问题，因为它会以多余的代码的形式影响可读性。</p><p>但是，有的时候，你可能会面对这样的情况：创建一个变量与否不在你的控制之下。比如说，当一个函数返回多个值，而你只需要其中的一些值时。在这种情况下，你不能要求库维护者根据你的需要调整他们的函数。</p><p>所以，在这种情况下，你可以写一个以下划线开头的变量，Rust编译器将不再显示这样的警告。如果你真的不需要使用存储在该未使用变量中的值，你可以简单地将其命名为<code>_</code>（下划线），Rust 编译器也会忽略它！</p><p>接下来的程序不仅不会生成任何输出，而且也不会生成任何警告和/或错误消息：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">_unnecessary_var</span> = <span class="number">0</span>; <span class="comment">// 没有警告</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">_</span> = <span class="number">0.0</span>; <span class="comment">// 完全忽略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算术运算">算术运算</h3><p>数学就是数学，Rust 并没有在这方面创新。你可以使用在其他编程语言（如C、C++ 和/或 Java）中使用过的所有算术运算符。</p><p>包含可以在 Rust编程语言中使用的所有运算符和它们的含义的完整列表可以在 <ahref="https://doc.rust-lang.org/book/appendix-02-operators.html?ref=itsfoss.com#operators">这里</a>找到。</p><h4 id="示例程序一个生锈的温度计">示例程序：一个生锈的温度计</h4><p>（LCTT 译注：这里的温度计“生锈”了是因为它是使用Rust（生锈）编写的，原作者在这里玩了一个双关。）</p><p>接下来是一个典型的程序，它将华氏度转换为摄氏度，反之亦然。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">boiling_water_f</span>: <span class="type">f64</span> = <span class="number">212.0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">frozen_water_c</span>: <span class="type">f64</span> = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">boiling_water_c</span> = (boiling_water_f - <span class="number">32.0</span>) * (<span class="number">5.0</span> / <span class="number">9.0</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">frozen_water_f</span> = (frozen_water_c * (<span class="number">9.0</span> / <span class="number">5.0</span>)) + <span class="number">32.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(</span><br><span class="line">        <span class="string">&quot;Water starts boiling at &#123;&#125;°C (or &#123;&#125;°F).&quot;</span>,</span><br><span class="line">        boiling_water_c, boiling_water_f</span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">println!</span>(</span><br><span class="line">        <span class="string">&quot;Water starts freezing at &#123;&#125;°C (or &#123;&#125;°F).&quot;</span>,</span><br><span class="line">        frozen_water_c, frozen_water_f</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没什么大不了的……华氏温度转换为摄氏温度，反之亦然。</p><p>正如你在这里看到的，由于 Rust 不允许自动类型转换，我不得不在整数32、9 和 5 后放一个小数点。除此之外，这与你在 C、C++ 和/或 Java中所做的类似。</p><p>作为练习，尝试编写一个程序，找出给定数中有多少位数字。</p><h3 id="常量">常量</h3><p>如果你有一些编程知识，你可能知道这意味着什么。常量是一种特殊类型的变量，它的值<strong>永远不会改变</strong>。<em>它保持不变</em>。</p><p>在 Rust 编程语言中，使用以下语法声明常量：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CONSTANT_NAME: data_type = value;</span><br></pre></td></tr></table></figure><p>如你所见，声明常量的语法与我们在 Rust中看到的变量声明非常相似。但是有两个不同之处：</p><ul><li>常量的名字需要像 <code>SCREAMING_SNAKE_CASE</code>这样。所有的大写字母和单词之间用下划线分隔。</li><li>常量的数据类型<strong>必须</strong>被显性定义。</li></ul><h4 id="变量与常量的对比">变量与常量的对比</h4><p>你可能在想，既然变量默认是不可变的，为什么语言还要包含常量呢？</p><p>接下来这个表格应该可以帮助你消除疑虑。（如果你好奇并且想更好地理解这些区别，你可以看看<ahref="https://blog.thefossguy.com/posts/immutable-vars-vs-constants-rs.md?ref=itsfoss.com">我的博客</a>，它详细地展示了这些区别。）</p><figure><img src="https://itsfoss.com/content/images/2023/02/image.png"alt="一个展示 Rust 编程语言中变量和常量之间区别的表格" /><figcaption aria-hidden="true">一个展示 Rust编程语言中变量和常量之间区别的表格</figcaption></figure><h4id="使用常量的示例程序计算圆的面积">使用常量的示例程序：计算圆的面积</h4><p>这是一个很直接的关于 Rust中常量的简单程序。它计算圆的面积和周长。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">const</span> PI: <span class="type">f64</span> = <span class="number">3.14</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">radius</span>: <span class="type">f64</span> = <span class="number">50.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">circle_area</span> = PI * (radius * radius);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">circle_perimeter</span> = <span class="number">2.0</span> * PI * radius;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;有一个周长为 &#123;radius&#125; 厘米的圆&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;它的面积是 &#123;&#125; 平方厘米&quot;</span>, circle_area);</span><br><span class="line">    <span class="built_in">println!</span>(</span><br><span class="line">        <span class="string">&quot;以及它的周长是 &#123;&#125; 厘米&quot;</span>,</span><br><span class="line">        circle_perimeter</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果运行代码，将产生以下输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">有一个周长为 50 厘米的圆</span><br><span class="line">它的面积是 7850 平方厘米</span><br><span class="line">以及它的周长是 314 厘米</span><br></pre></td></tr></table></figure><h3 id="rust-中的变量遮蔽">Rust 中的变量遮蔽</h3><p>如果你是一个 C++程序员，你可能已经知道我在说什么了。当程序员<strong>声明</strong>一个与已经声明的变量同名的新变量时，这就是变量遮蔽。</p><p>与 C++ 不同，Rust 允许你在同一作用域中执行变量遮蔽！</p><blockquote><p>💡当程序员遮蔽一个已经存在的变量时，新变量会被分配一个新的内存地址，但是使用与现有变量相同的名称引用。</p></blockquote><p>来看看它在 Rust 中是如何工作的。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = <span class="number">108</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;a 的地址: &#123;:p&#125;, a 的值 &#123;a&#125;&quot;</span>, &amp;a);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = <span class="number">56</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;a 的地址: &#123;:p&#125;, a 的值: &#123;a&#125; // 遮蔽后&quot;</span>, &amp;a);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">b</span> = <span class="number">82</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;\nb 的地址: &#123;:p&#125;, b 的值: &#123;b&#125;&quot;</span>, &amp;b);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">b</span> = <span class="number">120</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;b的地址: &#123;:p&#125;, b的值: &#123;b&#125; // 遮蔽后&quot;</span>, &amp;b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">c</span> = <span class="number">18</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;\nc 的地址: &#123;:p&#125;, c的值: &#123;c&#125;&quot;</span>, &amp;c);</span><br><span class="line">    c = <span class="number">29</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;c 的地址: &#123;:p&#125;, c的值: &#123;c&#125; // 遮蔽后&quot;</span>, &amp;c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>println</code> 语句中花括号内的 <code>:p</code> 与 C 中的<code>%p</code> 类似。它指定值的格式为内存地址（指针）。</p><p>我在这里使用了 3 个变量。变量 <code>a</code> 是不可变的，并且在第 4行被遮蔽。变量 <code>b</code> 是可变的，并且在第 9 行也被遮蔽。变量<code>c</code> 是可变的，但是在第 14行，只有它的值被改变了。它没有被遮蔽。</p><p>现在，让我们看看输出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a 的地址: 0x7ffe954bf614, a 的值 108</span><br><span class="line">a 的地址: 0x7ffe954bf674, a 的值: 56 // 遮蔽后</span><br><span class="line"></span><br><span class="line">b 的地址: 0x7ffe954bf6d4, b 的值: 82</span><br><span class="line">b 的地址: 0x7ffe954bf734, b 的值: 120 // 遮蔽后</span><br><span class="line"></span><br><span class="line">c 的地址: 0x7ffe954bf734, c 的值: 18</span><br><span class="line">c 的地址: 0x7ffe954bf734, c 的值: 29 // 遮蔽后</span><br></pre></td></tr></table></figure><p>来看看输出，你会发现不仅所有三个变量的值都改变了，而且被遮蔽的变量的地址也不同（检查十六进制的最后几个字符）。</p><p>变量 <code>a</code> 和 <code>b</code>的内存地址改变了。这意味着变量的可变性或不可变性并不是遮蔽变量的限制。</p><h3 id="总结">总结</h3><p>本文介绍了 Rust 编程语言中的变量和常量。还介绍了算术运算。</p><p>做个总结：</p><ul><li>Rust 中的变量默认是不可变的，但是可以引入可变性。</li><li>程序员需要显式地指定变量的可变性。</li><li>常量总是不可变的，无论如何都需要类型注释。</li><li>变量遮蔽是指使用与现有变量相同的名称声明一个 <em>新</em> 变量。</li></ul><p>很好！我相信和 Rust 一起的进展不错。在下一章中，我将讨论 Rust中的数据类型。敬请关注。</p><p>与此同时，如果你有任何问题，请告诉我。</p><p><em>（题图：MJ/7c5366b8-f926-487e-9153-0a877145ca5）</em></p><hr /><p>via: https://itsfoss.com/rust-variables/</p><p>作者：<a href="https://itsfoss.com/author/pratham/">Pratham Patel</a>选题：<a href="https://github.com/lkxed/">lkxed</a> 译者：<ahref="https://github.com/Cubik65536">Cubik</a> 校对：<ahref="https://github.com/wxy">wxy</a></p><p>本文由 <a href="https://github.com/LCTT/TranslateProject">LCTT</a>原创编译，<a href="https://linux.cn/">Linux中国</a> 荣誉推出</p>]]></content>
      
      
      <categories>
          
          <category> LCTT </category>
          
          <category> 转载 </category>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Rust 基础 </tag>
            
            <tag> 软件开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin HTML DSL 代码复用</title>
      <link href="/2023-04-28-kotlin-ktor-dsl-reuse/"/>
      <url>/2023-04-28-kotlin-ktor-dsl-reuse/</url>
      
        <content type="html"><![CDATA[<p>我在开发 <ahref="https://github.com/iXORTech/RemoteMC-Core">RemoteMC-Core</a>的时候，大量的使用了 Ktor 来完成各项工作。其中就包含使用 Ktor 的 HTMLDSL 功能来生成 HTML页面。但是，我发现我会需要在不同的页面中大量的重复使用一些代码（例如导航栏代码），这样会导致代码不易维护等问题，所以我想着能不能重复使用一段生成代码，在经过一番搜索之后，我发现是可以的！来一起看看怎么做吧！</p><span id="more"></span><blockquote><p>本文部分内容参考自 <ahref="https://medium.com/kotlin-thursdays/static-web-with-kotlin-dsls-9ff53a604bd2">StaticWeb with Kotlin DSLs</a></p></blockquote><p>首先，我们要确定我们要复用的代码是什么。在这里，我要复用的代码是页脚的代码，它长这样：</p><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">hr &#123;&#125;</span><br><span class="line">a(href = <span class="string">&quot;https://github.com/iXORTech/RemoteMC-Core/issues&quot;</span>) &#123;</span><br><span class="line">  +I18N.reportBug()</span><br><span class="line">&#125;</span><br><span class="line">hr &#123;&#125;</span><br><span class="line">a(href = <span class="string">&quot;https://github.com/iXORTech&quot;</span>) &#123;</span><br><span class="line">  i &#123; attributes[<span class="string">&quot;data-feather&quot;</span>] = <span class="string">&quot;github&quot;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line">+<span class="string">&quot; | <span class="subst">$&#123;I18N.poweredBy&#125;</span> &quot;</span></span><br><span class="line">a(href = <span class="string">&quot;https://ixor.tech&quot;</span>) &#123; +<span class="string">&quot;iXOR Technology&quot;</span> &#125;</span><br><span class="line">+<span class="string">&quot; <span class="subst">$&#123;I18N.withLove&#125;</span>&quot;</span></span><br><span class="line">br &#123;&#125;</span><br><span class="line">+I18N.htmlThemeDesigned0()</span><br><span class="line">a(href = <span class="string">&quot;https://github.com/athul/archie&quot;</span>) &#123; +<span class="string">&quot;Archie Theme&quot;</span> &#125;</span><br><span class="line">+I18N.htmlThemeDesigned1()</span><br><span class="line">a(href = <span class="string">&quot;https://github.com/KevinZonda&quot;</span>) &#123; +<span class="string">&quot;@KevinZonda&quot;</span> &#125;</span><br><span class="line">+I18N.htmlThemeDesigned2()</span><br></pre></td></tr></table></figure><p>而且，要注意的是，它永远会被包含在一个 <code>DIV</code> 对象中。</p><p>这时，我们要做的就是创建一个新文件用于放置复用的代码，然后写上这段代码：</p><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> DIV.<span class="title">htmlPageFooter</span><span class="params">()</span></span> = footer &#123;</span><br><span class="line">  hr &#123;&#125;</span><br><span class="line">  a(href = <span class="string">&quot;https://github.com/iXORTech/RemoteMC-Core/issues&quot;</span>) &#123;</span><br><span class="line">    +I18N.reportBug()</span><br><span class="line">  &#125;</span><br><span class="line">  hr &#123;&#125;</span><br><span class="line">  a(href = <span class="string">&quot;https://github.com/iXORTech&quot;</span>) &#123;</span><br><span class="line">    i &#123; attributes[<span class="string">&quot;data-feather&quot;</span>] = <span class="string">&quot;github&quot;</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  +<span class="string">&quot; | <span class="subst">$&#123;I18N.poweredBy&#125;</span> &quot;</span></span><br><span class="line">  a(href = <span class="string">&quot;https://ixor.tech&quot;</span>) &#123; +<span class="string">&quot;iXOR Technology&quot;</span> &#125;</span><br><span class="line">  +<span class="string">&quot; <span class="subst">$&#123;I18N.withLove&#125;</span>&quot;</span></span><br><span class="line">  br &#123;&#125;</span><br><span class="line">  +I18N.htmlThemeDesigned0()</span><br><span class="line">  a(href = <span class="string">&quot;https://github.com/athul/archie&quot;</span>) &#123; +<span class="string">&quot;Archie Theme&quot;</span> &#125;</span><br><span class="line">  +I18N.htmlThemeDesigned1()</span><br><span class="line">  a(href = <span class="string">&quot;https://github.com/KevinZonda&quot;</span>) &#123; +<span class="string">&quot;@KevinZonda&quot;</span> &#125;</span><br><span class="line">  +I18N.htmlThemeDesigned2()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这基本上就是为 <code>DIV</code> 增加了一个扩展函数<code>htmlPageFooter</code>，这样的话，只要我们在一个 <code>DIV</code>块中，就可以直接使用 <code>htmlPageFooter</code> 函数来生成页脚了：</p><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">  htmlPageFooter()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你不想在 <code>DIV</code>对象中调用这个函数，你则需要将扩展函数前的 <code>DIV</code>换成你想要的对象，例如 <code>BODY</code>，然后照常调用就可以了。</p><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  htmlPageFooter()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，如果我们需要向复用块中添加其他内容，我们可以就像其他函数一样设置参数：</p><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> BODY.<span class="title">pageWrapper</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  title: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  content: <span class="type">DIV</span>.() -&gt; <span class="type">Unit</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> = div &#123;</span><br><span class="line">  h1 &#123; +title &#125;</span><br><span class="line">  content()</span><br><span class="line">  htmlPageFooter()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个函数里，<code>title</code> 参数就是一个普通的字符串，用来填写<code>h1</code> 中的标题内容。而 <code>content</code> 实际上是一个 DIV对象，我们在调用 <code>pageWrapper</code> 函数的时候填写的<code>content</code>内容会被包装在一个 DIV 对象中，放置在<code>content()</code> 被调用的位置。而调用的时候，我们并不需要将<code>content</code>参数填写在括号中，而是直接在函数调用括号的外面再添加一个大括号，然后在大括号中填写<code>content</code> 的内容。就像这样：</p><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pageWrapper(<span class="string">&quot;Title&quot;</span>) &#123;</span><br><span class="line">  p &#123; +<span class="string">&quot;Hello World!&quot;</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这种情况下，我们的代码与以下写法是等价的：</p><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  h1 &#123; +<span class="string">&quot;Title&quot;</span> &#125;</span><br><span class="line">  div &#123;</span><br><span class="line">    p &#123; +<span class="string">&quot;Hello World!&quot;</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，Kotlin Ktor HTML DSL的代码复用就介绍到这里了，希望对你有所帮助！GL &amp; HF！</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> Ktor </tag>
            
            <tag> Ktor HTML DSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LCTT 翻译转载] 软件开发｜Rust 基础系列 #1: 创建并运行你的首个 Rust 程序</title>
      <link href="/lctt/translation-linuxcn-article-15709-1/"/>
      <url>/lctt/translation-linuxcn-article-15709-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>注：与其他 LCTT系列转载不同，本文并非由我本人翻译，但是由于我有计划翻译该系列文章后续内容，所以将本前置文章搬运过来。</p></blockquote><blockquote><p>原文：<a href="https://itsfoss.com/rust-introduction/">Rust BasicsSeries #1: Create and Run Your First Rust Program</a> 首发：<ahref="https://linux.cn/article-15709-1.html">Rust 基础系列 #1:创建并运行你的首个 Rust 程序</a> @<a href="https://linux.cn/">Linux中国</a> 作者：<a href="https://itsfoss.com/author/pratham/">PrathamPatel</a> 译者：<a href="https://linux.cn/lctt/">LCTT</a> <ahref="https://github.com/mcfd">mcfd</a></p></blockquote><span id="more"></span><h2 id="rust-基础系列-1-创建并运行你的首个-rust-程序">Rust 基础系列 #1:创建并运行你的首个 Rust 程序</h2><p><imgsrc="https://img.linux.net.cn/data/attachment/album/202304/10/164143yksc0b56bbs0itiu.jpg" /></p><blockquote><p>在 Rust 编程系列的第一篇中，你将学习如何用 Rust编写和执行你的第一个程序。</p></blockquote><p>Rust是最快风靡开发者和科技公司的系统编程语言之一。日常使用它的开发者将其评为<strong>最受欢迎的编程语言</strong>之一，而它<ahref="https://survey.stackoverflow.co/2022/?ref=itsfoss.com#section-most-loved-dreaded-and-wanted-programming-scripting-and-markup-languages">已经连续七年获此殊荣了</a>！</p><p>它是如此的受欢迎，以致于现在有两股巨大的推力将其带入 Linux生态系统中：</p><ul><li><ahref="https://news.itsfoss.com/linux-kernel-6-1-release/?ref=itsfoss.com">将Rust 作为 Linux 内核的二级支持语言</a></li><li>System76 <ahref="https://news.itsfoss.com/pop-os-cosmic-rust/?ref=itsfoss.com">正在使用Rust 重写他们自己的桌面环境</a></li></ul><p>而这还仅仅是在 Linux 生态系统中。安卓上的蓝牙软件 <ahref="https://android.googlesource.com/platform//system/bt/+/83498aa554aea220fcff30b6310a0a7b4557969f/gd/rust/linux/stack/src/bluetooth.rs?ref=itsfoss.com">Gabeldorsche</a>现在也是由 Rust 编写的。</p><p>你是否也看到了 Rust 的流行趋势？那么你或许也想学习使用 Rust进行编程。</p><h3 id="为什么你要考虑-rust-而不是其他编程语言">为什么你要考虑 Rust而不是其他编程语言？</h3><p>首先，Rust 是一门 <strong>类型安全的编程语言</strong> 并且<strong>拥有极其严格的编译期检查</strong>。因此，你首先会 “被迫”写不出不安全的代码（好吧，通常是这样）。</p><p>Rust 编程语言有以下 “目标”：</p><ul><li><strong>性能</strong>：Rust 的二进制文件和 C语言的二进制文件一样快，有时甚至超过了 C++ 的二进制文件！</li><li><strong>内存安全</strong>：Rust 非常重视内存安全。</li><li><strong>并发性</strong>：对内存安全的关注消除了很多类似竞争的情况，并帮助你在程序中无畏并发。</li></ul><p>以下是在 C/C++ 等语言中可能犯的一些错误（但 Rust 不会）：</p><ul><li>释放后使用</li><li>双重释放</li><li>越界访问</li><li>使用 <code>NULL</code></li><li>不适当的指针运算或访问</li><li>使用未经初始化的变量</li><li>线程不安全的多线程</li></ul><p>看看 <ahref="https://langui.sh/2019/07/23/apple-memory-safety/?ref=itsfoss.com">苹果</a>、<ahref="https://msrc-blog.microsoft.com/2019/07/18/we-need-a-safer-systems-programming-language/?ref=itsfoss.com">微软</a>、<ahref="https://security.googleblog.com/2019/05/queue-hardening-enhancements.html?ref=itsfoss.com">谷歌</a>等大公司因这类 <ahref="https://docs.google.com/spreadsheets/d/1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY/view?ref=itsfoss.com#gid=1190662839">0day</a>错误而引起的问题吧。</p><p>现在你可能知道了为什么要选择 Rust语言而不是其他编程语言，让我们开始学习 Rust 语言的系列教程吧！</p><h3 id="目标受众">目标受众</h3><p>出于对 Rust 的热爱，我写了这个系列的 Rust 教程，帮助你熟悉 Rust编程的概念。</p><p>这个教程系列是为已经熟悉 C 和 C++等编程语言的人准备的。我假设你已经知道了<em>变量</em>、<em>函数</em>、<em>循环</em> 等基本术语。</p><p>我对你的唯一要求是你不懈的坚持与努力。</p><h3 id="安装-rust-工具链">安装 Rust 工具链</h3><p>我希望你能在本地安装 <ahref="https://itsfoss.com/install-rust-cargo-ubuntu-linux/">Rust工具链</a>。你可以通过运行以下命令来做到这一点： （LCTT 译注：如果你使用Linux 发行版，请不要直接安装软件源里的 Rust工具链，尽管这样看起来很便捷。）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --proto &#x27;=https&#x27; --tlsv1.3 -sSf https://sh.rustup.rs | sh</span><br></pre></td></tr></table></figure><figure><img src="https://itsfoss.com/content/images/2023/03/install-rust.svg"alt="Installing Rust on Ubuntu Linux" /><figcaption aria-hidden="true">Installing Rust on UbuntuLinux</figcaption></figure><p>除了 Rust基本工具链，我还建议再安装一些工具，这些工具将在开发过程中帮助你：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rustup component add rust-src rust-analyzer rust-analysis</span><br></pre></td></tr></table></figure><p>你还需要 <ahref="https://learnubuntu.com/install-gcc/?ref=itsfoss.com">安装gcc</a>。否则，你可能会遇到“链接器 <code>cc</code>未找到”的错误。该软件包在不同的发行版中都被称为 gcc。</p><p>在 Ubuntu 和 Debian 上使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc</span><br></pre></td></tr></table></figure><blockquote><p>💡 如果你不希望在本地安装 Rust工具链，不用担心。你还可以直接在你的浏览器中运行 Rust 代码！只要到 <ahref="https://play.rust-lang.org/?ref=itsfoss.com">Rust 试验场</a>并把所讨论的代码粘贴在那里。</p></blockquote><h3 id="hello-rust">Hello Rust!</h3><p>自从 <ruby>丹尼斯·里奇<rt>Dennis Ritchie</rt></ruby> 和<ruby>布莱恩・柯林汉<rt>Brian Kernighan</rt></ruby> 用 “Hello World”程序介绍了 C 语言后，在 UNIX世界里，你学习的任何新编程语言第一步都这样做，这已经成为一种习惯。</p><p>因此，让我们也用 Rust 编写我们的 Hello World 程序。</p><p>我将在我的家目录里 <ahref="https://itsfoss.com/make-directories/">新建一个项目目录</a> 叫做<code>learn-rust-its-foss</code>。然后，在这里我将新建一个叫<code>hello-world</code> 的目录。最后，在里面新建 <code>main.rs</code>文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 这串代码将打印字符</span><br><span class="line">// &quot;Hello world!&quot; 将被打印到 `标准输出`</span><br><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line">    println!(&quot;Hello world!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>📋 就像 C、C++ 和 Java 源代码文件相应的扩展名是<code>.c</code>、<code>.cpp</code> 和 <code>.java</code>，Rust的源文件扩展名是 <code>.rs</code>。</p></blockquote><p>作为一个 C/C++ 程序员，你可能已经在 <ahref="https://learnubuntu.com/install-gcc/?ref=itsfoss.com">Linux 上使用GCC</a>，在 macOS 上使用 <code>Clang</code>，在 Windows 上使用MSVC。但是为了编译 Rust 代码，该语言的创造者自己提供了一个官方的<code>rustc</code> 编译器。</p><p>运行 Rust 程序和 <ahref="https://itsfoss.com/run-c-program-linux/">执行 C/C++ 程序</a>是一样的。你首先编译代码，然后得到可执行文件，最后再运行这个可执行文件从而来运行代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">main.rs</span><br><span class="line"></span><br><span class="line">$ rustc main.rs</span><br><span class="line"></span><br><span class="line">$ ls</span><br><span class="line">main  main.rs</span><br><span class="line"></span><br><span class="line">$ ./main</span><br><span class="line">Hello world!</span><br></pre></td></tr></table></figure><p>很好！</p><h3 id="解读-rust-代码">解读 Rust 代码</h3><p>现在你已经编写、编译并运行了你的第一个 Rust 程序，让我们对 “HelloWorld” 的代码进行解读，并理解每一部分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>fn</code> 关键字用来在 Rust 中声明一个函数。在它后面<code>main</code>是这个被声明函数的名字。像许多编译型编程语言一样，<code>main</code>是一个特殊的函数，用来作为你的程序的入口。</p><p>任何写在 <code>main</code> 函数里的代码（在大括号 <code>&#123;</code><code>&#125;</code> 之间）将在程序被启动时运行。</p><h4 id="println-宏">println 宏</h4><p>在 <code>main</code> 函数中, 有一个语句（LCTT 译注：“语句” 区别于“表达式”）:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">println!(&quot;Hello world!&quot;);</span><br></pre></td></tr></table></figure><p>就像 C 语言的标准库有 <code>printf</code> 函数一样，Rust语言的标准库有 <code>println</code><strong>宏</strong>。宏类似于函数，但它以<strong>感叹号</strong>（<code>!</code>）来区分。你将在本系列的后面学习宏和函数的知识。</p><p><code>println</code>宏接收一个格式化的字符串，并把它放到程序的标准输出中（在我们的例子中，就是终端）。由于我希望输出一些文本而不是一个变量，我将把文本放在双引号（<code>"</code>）内。最后，我用一个分号来结束这个语句，表示语句的结束。</p><blockquote><p>📋 你只需知道，任何看起来像函数调用但在开头括号前有感叹号的东西，就是Rust 编程语言中的一个宏。</p></blockquote><h4 id="注释">注释</h4><p>Rust 遵循已知的 C编程语言的注释风格。单行注释以两个正斜杠（<code>//</code>）开始，多行注释以<code>/*</code> 开始，以 <code>*/</code> 结束。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 这是一个多行注释</span><br><span class="line">// 但是没有什么阻止你在</span><br><span class="line">// 第二行或第三行也这样写</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 这是一个“真•多行注释”</span><br><span class="line"> * 它看起来比较漂亮</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><h3 id="总结">总结</h3><p>你刚刚通过 Hello World 程序迈出了用 Rust 写代码的第一步。</p><p>作为一种练习，也许你可以编写并执行一个打印出<code>Yes! I did Rust</code> 的 Rust 程序。</p><p>在本系列的下一部分中，你将学习在 Rust 程序中使用变量。敬请期待！</p><p><em>（题图：MJ:computer sci-fi ,code secure ,"rust" ,gold blue slive,background dark, high resolution super detailed）</em></p><hr /><p>via: https://itsfoss.com/rust-introduction/</p><p>作者：<a href="https://itsfoss.com/author/pratham/">Pratham Patel</a>选题：<a href="https://github.com/lkxed/">lkxed</a> 译者：<ahref="https://github.com/mcfd">mcfd</a> 校对：<ahref="https://github.com/wxy">wxy</a></p><p>本文由 <a href="https://github.com/LCTT/TranslateProject">LCTT</a>原创编译，<a href="https://linux.cn/">Linux中国</a> 荣誉推出</p>]]></content>
      
      
      <categories>
          
          <category> LCTT </category>
          
          <category> 转载 </category>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Rust 基础 </tag>
            
            <tag> 软件开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 年 3 月总结</title>
      <link href="/2023-03-MonthJournal/"/>
      <url>/2023-03-MonthJournal/</url>
      
        <content type="html"><![CDATA[<p>2023 年 3 月的月总结来了！没错，今年 1 月和 2 月的回顾都被我咕了...非常抱歉，但是确实比较懒所以就没有写回顾...不过我会在这篇文章内简单做一下回顾。同时，我会尽量从现在开始恢复月更的节奏。那么让我们开始吧～</p><span id="more"></span><h2 id="月份快速回顾">1 月份快速回顾</h2><p>一月第一周在放假，<del>第二周在开学，第三周在放假，第四周在开学，第五周在放假，第六周在开学，第七周在放假，第八周在开学，第九周在放假，第十周在开学，第十一周在放假，第十二周在开学，第十三周在放假，第十四周在开学，第十五周在放假，第十六周在开学，第十七周在放假，第十八周在开学，第十九周在放假，第二十周在开学，第二十一周在放假，第二十二周在开学，第二十三周在放假，第二十四周在开学，第二十五周在放假，第二十六周在开学，第二十七周在放假，第二十八周在开学，第二十九周在放假，第三十周在开学，第三十一周在放假，第三十二周在开学，第三十三周在放假，第三十四周在开学，第三十五周在放假，第三十六周在开学，第三十七周在放假，第三十八周在开学，第三十九周在放假，第四十周在开学，第四十一周在放假，第四十二周在开学，第四十三周在放假，第四十四周在开学，第四十五周在放假，第四十六周在开学，第四十七周在放假，第四十八周在开学，第四十九周在放假，第五十周在开学，第五十一周在放假，第五十二周在开学，第五十三周在放假，第五十四周在开学，第五十五周在放</del><strong>GitHub Copilot 你给我补出了个啥啊！</strong></p><p>言归正传，放假的时候基本上都是在补觉，然后同时推进了一下 RemoteMC的开发进度。另外，我还在这段时间之内给我运营的 Minecraft 服务器 <ahref="https://mc.hmu.ac.cn"><span class="citation"data-cites="MCHMU">@MCHMU</span></a>的服务端插件进行了一些完善，更新了一部分插件并自己写了一些插件。同时，我还开发了<ahref="https://github.com/iXORTech/minecraft-item-data-getter">minecraft-item-data-getter</a>，这个项目是一个Minecraft Fabric 模组，用于将运行的 Minecraft 对应的所有物品 ID输出到一个 JSON文件中。这个项目最开始的目的是为了给计划开发的扫地插件提供数据的，但是因为扫地功能最终还是又我们使用的数据包开发者重新实现了，所以这两个项目就都被搁置了。</p><p>我也在 1 月 4 日加入了 <ahref="https://github.com/travellings-link">开往</a>维护组。如果你发现到了，我的侧边栏底部一直有一个 <code>开往</code>链接，这是一个随机访问其他博客方便互访的项目，我也（计算到 3月底）加入了这个项目半年多了，我认为这个项目非常不错，也欢迎各位加入这个项目。</p><p>到月中开学之后，我找到了一个非常有趣的项目 <ahref="https://github.com/CodeEditApp/CodeEdit">CodeEdit</a>。这个项目的目标是使用Swift 原生技术开发的，并拥有类似于Xcode（苹果开发的，主要用于开发苹果系统软件的 IDE）的设计风格的 VSCode替代品。我也在之后为这个项目贡献了一些代码，修复了在启动时触发触觉触控(Haptic Touch) 的 bug (<ahref="https://github.com/CodeEditApp/CodeEdit/pull/976">#976</a>) 的bug（虽然后来因为额外的功能增加，我的代码并没有做出很大的贡献）和版本管理账户管理bug (<ahref="https://github.com/CodeEditApp/CodeEdit/pull/1013">#1013</a>) 两个bug。我也很期待这个项目以后的发展，虽然目前这个软件还处于 Alpha阶段，路线图上我认为很关键的插件功能以及很多其他关键功能都还没有实现，但是我认为这个项目的发展前景还是很好的。</p><p>在月底，我还完成了博客主题的多语言配置和相关功能的魔改，折腾了不少，效果我觉得还不错。</p><h2 id="月份快速回顾-1">2 月份快速回顾</h2><p>二月没什么特别的事情，前半个月我都在准备参加今年的 Canadian ComputerCompetiton (CCC) 初级分类的比赛。在竞赛那天，我连 3小时的时间都没用满就将所有题都拿满分了，我当时还挺高兴，结果过了半个多月最终结果名册出来的时候，我发现满分的人名写了两页多...平常只有十几个半页不到啊... 我的天...</p><h3 id="keychron-v3">Keychron V3</h3><p>还有一件事！我换键盘啦！因为对热插拔 &amp; VIA编程键盘挺感兴趣的，所以购买了一把青轴的 KeychonV3，这也是我第一把全高的机械键盘，希望以后能换套键轴啥的继续折腾。</p><p>接下来进入 3 月回顾</p><h2 id="slopecraft">SlopeCraft</h2><p>在这个月，Minecraft 的一个地图画生成工具 <ahref="https://github.com/SlopeCraft/SlopeCraft">SlopeCraft</a>正式将开发工作转移到了其同名组织中了。我之前就与项目开发者 <ahref="https://github.com/ToKiNoBug"><span class="citation"data-cites="ToKiNoBug">@ToKiNoBug</span></a>大佬沟通过并提供过软件的非官方 macOS 版本。这次，我参与了文档，issue/pr模板等社区内容的撰写。并且我将会帮助 SlopeCraft 提供官方的 macOS版本，同时我也会帮助进行一些开发工作。敬请期待～</p><h2 id="remotemc-系列">RemoteMC 系列</h2><p>这个月我实现了 RemoteMC-Core的关于页面的开发，但是其他部分就没有什么变化了...</p><h2 id="rust">Rust</h2><p>因为对 <a href="https://tauri.app">Tauri</a> 这个 GUI框架挺感兴趣，所以我开始学习 Rust 了，目前在参考 <ahref="https://rustwiki.org/" class="uri">https://rustwiki.org/</a> 上的<a href="https://rustwiki.org/zh-CN/rust-by-example/">通过例子学Rust</a> 和 <a href="https://rustwiki.org/zh-CN/book/">Rust程序设计语言</a> 学习 Rust。希望能够在未来使用 Rust开发一些有趣的东西。</p><h2 id="考试和...">考试和...</h2><p>考试！考试！还是考试！这个学年只剩最后两个半月，各种大小考试又都来了...不过还是有好消息的！我收到了想去的学校的 offer，付出还是值得的。</p><p>那么我们下个月再见，GL &amp; HF！</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LCTT 原创翻译转载] 观点｜不编写代码也可以为开源项目做出贡献</title>
      <link href="/lctt/translation-linuxcn-article-15633-1/"/>
      <url>/lctt/translation-linuxcn-article-15633-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文：<ahref="https://opensource.com/article/23/3/non-code-contribution-open-source">Contributeto open source without code</a> 首发：<ahref="https://linux.cn/article-15633-1.html">不编写代码也可以为开源项目做出贡献</a>@<a href="https://linux.cn/">Linux 中国</a> 作者：<ahref="https://opensource.com/article/23/3/non-code-contribution-open-source">DebraChen</a> 译者：<a href="https://linux.cn/lctt/">LCTT</a> <ahref="https://linux.cn/lctt/Cubik65536">Cubik</a></p></blockquote><span id="more"></span><h2id="不编写代码也可以为开源项目做出贡献">不编写代码也可以为开源项目做出贡献</h2><p><imgsrc="https://img.linux.net.cn/data/attachment/album/202303/16/231703lt3v8fw7t85uya30.jpg" /></p><blockquote><p>如果你想通过非代码贡献成为一个提交者，或者没有时间做代码贡献，那么第一步就是加入社区。</p></blockquote><p>对于不同的人来说，开源“社区”意味着不同的东西。我认为开源有点像“爱情”，因为它是关于人和关系的。把开源当作一个社区，因为没有人，就没有源代码，无论是开源还是闭源。</p><p>我是 <a href="https://dolphinscheduler.apache.org/en-us">ApacheDolphinScheduler</a>社区的成员。由于该项目有意保持低代码，因此它吸引了许多 <ahref="https://opensource.com/article/21/2/what-technical">非软件开发人员</a>。有时，那些不编写代码的人不确定是否有一种有意义的方式来为主要由源代码组成的开源项目做出贡献。我的经验告诉我，有，我将在本文中解释原因。</p><h3 id="向社区做出贡献">向社区做出贡献</h3><p>在 Apache DolphinScheduler项目中，我主要负责全球运营、影响力和社区关怀。</p><p>一些人会说项目是树而开源是土壤。这是一个恰当的比喻，它说明了积极培育你想要帮助成长的东西的重要性。</p><p>我有一个更简单的想法：尽一切可能使其变得更好。</p><p>一个社区需要不断的关注，不是因为它很贪心，而是因为它是生活的一部分。社区是你身边的人，无论是物理空间还是在线空间。</p><p>自从加入开源社区以来，我已经独立发起并组织了一些活动，包括：</p><ul><li>平均每月在中国举办一次会议。</li><li>建议社区参与大数据领域内的技术分享。</li><li>协调了中国“大数据”领域几乎所有的开源项目，与这些社区进行了个别访问和交流。</li></ul><p>在我看来，一个优秀的项目应该在一个良好的生态系统中成长。社区需要走出去，交换想法，分享资源，并与其他优秀的社区合作。每个人都应该感受到社区在工作中带来的好处。</p><p>我的海外扩张遵循相同的模式。当然，由于文化和语言的差异，这样做很困难。这需要耗费精力，但这是值得的。</p><p>到目前为止，我们已经在包括美国、印度、新加坡、德国、法国、芬兰等国家成功举办了会议。</p><p>所以我如何为 DolphinScheduler做出贡献？我是否向项目提交代码？我是社区经理吗？我有正式的职称吗？</p><p>我认为自己是一个助手。我促进沟通和联系，这与任何代码贡献一样，都是“ApacheWay”的一个例子。</p><h3 id="从-dolphinscheduler-开始">从 DolphinScheduler 开始</h3><p>我第一次接触开源是在开放原子基金会工作时，担任开源教育运营经理。作为中国第一个开源基金会，开放原子运营了以<a href="https://gitee.com/openharmony">OpenHarmony</a>为代表的许多项目。</p><p>我加入了 DolphinScheduler社区并发现了一群热衷于分享知识、提供指导和支持，并热衷于帮助其他人发现对他们自己的生活有用的工具的人。</p><p>DolphinScheduler 旨在成为一个拥有全球影响力的调度系统，帮助团队以 <ahref="https://opensource.com/article/22/5/practical-tips-agile">敏捷</a>和高效的方式工作。</p><h3 id="对社区的第一印象">对社区的第一印象</h3><p>听到社区对项目开发的抱怨是一件常见的事情。我们都会时不时地抱怨。也许你报告了一个错误，但开发人员没有解决你的问题。或者，也许你有一个很棒的功能想法，但团队忽略了它。如果你是一个开源社区的成员，你以前就听到过这些不满，如果你没有，你最终会听到。</p><p>我了解到，这些声音对于开源社区来说都很重要。这是一个好现象，因为当你听到这些反馈时，这意味着社区愿意发现错误，报告它们，提出问题和回答问题。听到这些抱怨可能会揭示项目结构中需要改进的地方。社区中是否有志愿者可以回应错误报告并对它们进行分类，以便它们能够被分配给正确的开发人员？是否有一个志愿者组等待成立，以便迅速回应项目论坛或论坛中新人的问题？</p><p>开源项目的门口有一个招待员可以帮助邀请犹豫不决的社区成员。招待员还可以确保没有“门槛”。每个人都受欢迎，每个人都有自己的贡献，即使他们能提供的只是互相帮助的氛围。</p><p>尽管你我都希望能为每个人解决技术问题，但这是不现实的。但任何人都愿意帮助找到解决方案，这是社区的一个伟大优势。这些用户自发地充当了社区的“客户服务”部门。</p><p>在 DolphinScheduler 项目中，我们有很多人（Yan Jiang、Xu Zhiwu、ZhangQichen、Wang Yuxiang、Xiang Zihao、Yang Qiyu、Yang Jiahao、Gao Chufeng和 GaoFeng，顺序不分先后！）。即使他们不开发解决方案，他们也不遗余力地寻找能够开发解决方案的人。</p><h3 id="给社区的话">给社区的话</h3><p>如果你希望通过非代码贡献成为提交者，或者没有时间进行代码贡献，那么第一步就是加入社区。没有注册表格或批准流程，但也没有快速通道。你通过参与加入社区。你通过可靠且持续的参与与其他人建立关系。</p><p>我随时都可以聊天，总是渴望谈论全球活动组织、文档、反馈等。</p><h3 id="成为提交者">成为提交者</h3><p>Apache DolphinScheduler面临着许多挑战。大多数公司，即使是支持开源的公司，也会选择非开源的商业工具。我希望与社区合作伙伴一起，使DolphinScheduler成为世界级的调度系统。我希望每个人都可以收获他们想要的技术成果，而DolphinScheduler 可以帮助他们实现这一目标。</p><p>加入我们的社区，帮助我们推广开放和敏捷的工作方式。或者找到一个需要你非编码技能的项目。发现让你的同龄人社区获得力量是多么酷和有趣！</p><hr /><p>via:https://opensource.com/article/23/3/non-code-contribution-open-source</p><p>作者：<a href="https://opensource.com/users/debra-chen">DebraChen</a> 选题：<a href="https://github.com/lkxed/">lkxed</a> 译者：<ahref="https://github.com/Cubik65536">Cubik65536</a> 校对：<ahref="https://github.com/校对者ID">wxy</a></p><p>本文由 <a href="https://github.com/LCTT/TranslateProject">LCTT</a>原创编译，<a href="https://linux.cn/">Linux 中国</a> 荣誉推出</p>]]></content>
      
      
      <categories>
          
          <category> LCTT </category>
          
          <category> 转载 </category>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源 </tag>
            
            <tag> 开源贡献 </tag>
            
            <tag> 社区 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LCTT 原创翻译转载] 技术｜在 Ubuntu 中安装 DOSBox 来玩复古游戏</title>
      <link href="/lctt/translation-linuxcn-article-15619-1/"/>
      <url>/lctt/translation-linuxcn-article-15619-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文：<a href="https://itsfoss.com/ubuntu-dosbox/">Install DOSBox inUbuntu to Play Retro Games</a> 首发：<ahref="https://linux.cn/article-15619-1.html">在 Ubuntu 中安装 DOSBox来玩复古游戏</a> @<a href="https://linux.cn/">Linux 中国</a> 作者：<ahref="https://itsfoss.com/ubuntu-dosbox/">Sagar Sharma</a> 译者：<ahref="https://linux.cn/lctt/">LCTT</a> <ahref="https://linux.cn/lctt/Cubik65536">Cubik</a></p></blockquote><span id="more"></span><h2 id="在-ubuntu-中安装-dosbox-来玩复古游戏">在 Ubuntu 中安装 DOSBox来玩复古游戏</h2><p><imgsrc="https://img.linux.net.cn/data/attachment/album/202303/12/091038c81kxkmhdonj1mkm.jpg" /></p><p>DOSBox 是一款自由开源的软件，它可以让你模拟上个世纪的 MS-DOS操作系统。</p><p>你为什么要这么做呢？因为怀旧：它可以让你游玩在 80 年代和 90年代流行的 8 位游戏。</p><p>这其中包含了马里奥、魂斗罗、DOOM 等传奇游戏。</p><p>听起来不错吧？让我介绍一下如何在 Ubuntu 中安装DOSBox。我还会向你展示如何在 DOSBox 中安装并游玩复古游戏。</p><p>DOSBox 也可以在其他 Linux发行版中使用。除了安装部分，其余的指令应该对所有发行版都有效。</p><blockquote><p>✋🏻 DOS 是一个主要基于命令行的操作系统。使用 DOSbox 需要使用终端。</p></blockquote><h3 id="在-ubuntu-中安装-dosbox">在 Ubuntu 中安装 DOSBox</h3><p>DOSBox 包可以在 <ahref="https://itsfoss.com/ubuntu-repositories/">Universe 软件仓库</a>中找到。这个仓库应该已经被启用了，所以可以使用下面的命令来安装DOSBox：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install dosbox</span><br></pre></td></tr></table></figure><p>完成之后，从系统菜单中启动 DOSBox。</p><p>或者，你也可以使用终端来启动 DOSBox：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dosbox</span><br></pre></td></tr></table></figure><p><strong>需要首先运行一次，因为它会为我们创建一个配置文件。实际上，第一次启动时不需要做任何事情，因为它会创建配置文件。</strong></p><p>然后在 DOSBox 终端中执行 <code>exit</code> 命令来关闭 DOSBox：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><p><imgsrc="https://itsfoss.com/content/images/2023/02/run-DOSBox-on-ubuntu.png" /></p><p>如果你想要调整配置，配置文件位于<code>~/.dosbox/dosbox-[版本].conf</code>。</p><p>在这个配置文件中，你可以调整几乎所有的东西，比如在启动 DOSBox时进入全屏模式，更改核心等等。</p><p>但是（对我来说）启用全屏模式会使事情变得更糟，并且必须重新登录才能进入默认模式：</p><figure><imgsrc="https://itsfoss.com/content/images/2023/02/full-screen-error-on-DOSBox.png"alt="DOSBox 全屏模式错误" /><figcaption aria-hidden="true">DOSBox 全屏模式错误</figcaption></figure><p><strong>所以，除非你知道你在做什么，否则不要修改配置。</strong></p><h3 id="在-dosbox-中安装游戏">在 DOSBox 中安装游戏</h3><p>你可以从互联网档案馆的软件库中访问数百款流行游戏。</p><blockquote><p><strong><ahref="https://archive.org/details/softwarelibrary_msdos_games?tab=collection&amp;ref=its-foss">从互联网档案馆下载游戏</a></strong></p></blockquote><p>每款游戏都有自己的 zip 文件，其中包含 .exe文件。下载你喜欢的游戏。</p><p>然后，在你的主目录中<ahref="https://itsfoss.com/make-directories/">创建一个新目录</a>，命名为<code>dosbox</code>，并为你下载的游戏创建目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/dosbox &amp;&amp; cd ~/dosbox</span><br><span class="line">mkdir [游戏名称]</span><br></pre></td></tr></table></figure><p>我下载了马里奥。你可以给目录起任何名字。这里没什么要求，只是为了管理游戏而已。</p><figure><imgsrc="https://itsfoss.com/content/images/2023/02/create-a-directory-in-linux--1.png"alt="在 Linux 中创建目录" /><figcaption aria-hidden="true">在 Linux 中创建目录</figcaption></figure><p>然后，将 <code>.zip</code> 文件解压到你刚刚创建的 <code>dosbox</code>目录中：</p><figure><imgsrc="https://itsfoss.com/content/images/2023/02/extract-file-to-the-dosbox-directory-1.png"alt="解压文件到 dosbox 目录" /><figcaption aria-hidden="true">解压文件到 dosbox 目录</figcaption></figure><p>如果你想的话，你也可以在终端中 <ahref="https://learnubuntu.com/unzip-file/?ref=its-foss">使用 unzip命令</a> 来做同样的事情：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip ~/Downloads/MARIO.zip -d ~/dosbox/mario/</span><br></pre></td></tr></table></figure><p>当你完成之后，启动 DOSBox：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dosbox</span><br></pre></td></tr></table></figure><p>然后，将游戏挂载到虚拟 C 驱动器上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount c ~/dosbox/mario</span><br></pre></td></tr></table></figure><figure><imgsrc="https://itsfoss.com/content/images/2023/02/mount-the-game-to-the-virtual-C-drive.png"alt="将游戏挂载到虚拟 C 驱动器上" /><figcaption aria-hidden="true">将游戏挂载到虚拟 C 驱动器上</figcaption></figure><p>然后，切换到虚拟 C 驱动器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c:</span><br></pre></td></tr></table></figure><figure><imgsrc="https://itsfoss.com/content/images/2023/02/switch-to-the-virtual-drive-C.png"alt="切换到虚拟 C 驱动器" /><figcaption aria-hidden="true">切换到虚拟 C 驱动器</figcaption></figure><p>最后，通过输入游戏的文件名来启动游戏：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mario</span><br></pre></td></tr></table></figure><p>然后，享受游戏吧。</p><figure><imgsrc="https://itsfoss.com/content/images/2023/02/play-mario-on-Linux.gif"alt="在 Ubuntu 中玩马里奥" /><figcaption aria-hidden="true">在 Ubuntu 中玩马里奥</figcaption></figure><h3 id="想要更多复古的东西">想要更多复古的东西？</h3><p>如果你有不再使用的旧电脑或者树莓派，你可以把它们变成复古游戏机。有很多Linux 项目就是为了这个目的而存在的。</p><blockquote><p><strong><ahref="https://itsfoss.com/retro-gaming-console-linux-distros/">把你的电脑变成复古游戏机的Linux 发行版</a></strong></p></blockquote><p>为什么只玩游戏呢？你也可以把复古的计算机终端带回来。</p><blockquote><p><strong><a href="https://itsfoss.com/cool-retro-term/">用 Cool RetroTerminal 获得一个复古的 Linux 终端</a></strong></p></blockquote><p>希望该指南对你有所帮助。你是如何在 Linux上玩游戏的？在评论中告诉我吧。</p><hr /><p>via: https://itsfoss.com/ubuntu-dosbox/</p><p>作者：<a href="https://itsfoss.com/author/sagar/">Sagar Sharma</a>选题：<a href="https://github.com/lkxed/">lkxed</a> 译者：<ahref="https://github.com/Cubik65536">Cubik65536</a> 校对：<ahref="https://github.com/wxy">wxy</a></p><p>本文由 <a href="https://github.com/LCTT/TranslateProject">LCTT</a>原创编译，<a href="https://linux.cn/">Linux 中国</a> 荣誉推出</p>]]></content>
      
      
      <categories>
          
          <category> LCTT </category>
          
          <category> 转载 </category>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> DOSBox </tag>
            
            <tag> 复古游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LCTT 原创翻译转载] 观点｜Linux 只是一个内核：这是什么意思？</title>
      <link href="/lctt/translation-linuxcn-article-15594-1/"/>
      <url>/lctt/translation-linuxcn-article-15594-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文：<a href="https://itsfoss.com/linux-kernel-os/">Linux is Just aKernel: What Does it Mean?</a> 首发：<ahref="https://linux.cn/article-15594-1.html">Linux只是一个内核：这是什么意思？</a> @<a href="https://linux.cn/">Linux中国</a> 作者：<a href="https://itsfoss.com/linux-kernel-os/">AbhishekPrakash</a> 译者：<a href="https://linux.cn/lctt/">LCTT</a> <ahref="https://linux.cn/lctt/Cubik65536">Cubik</a></p></blockquote><span id="more"></span><h2 id="linux-只是一个内核这是什么意思">Linux只是一个内核：这是什么意思？</h2><p><imgsrc="https://img.linux.net.cn/data/attachment/album/202303/04/085224mw1qoq5kaukqzxmz.jpg" /></p><blockquote><p>这是一个困扰 Linux用户的常见问题。这也是考试和面试中经常问到的一个问题。下面是你需要了解的所有内容。</p></blockquote><p>你可能在网络上的各种论坛以及讨论区听过这句话：</p><blockquote><p>Linux 只是一个内核。</p></blockquote><p>这让你感到好奇。它是个内核？还是个操作系统？两者之间有什么区别？</p><p>我将在本文中回答这些问题。</p><h3 id="linux-是操作系统还是内核">Linux 是操作系统还是内核？</h3><p>好吧，<strong>从技术上讲，Linux只是一个内核</strong>，而不是一个操作系统。但是，术语“Linux”通常是指一个完整的操作系统，它包括一个<ruby>交互界面<rt>Shell</rt></ruby>（例如：bash）和命令行和/或 GUI工具来控制系统。这个完整的操作系统的正确叫法是“Linux 发行版”。流行的Linux 发行版有 Ubuntu、Red Hat 和 Debian。</p><p>早在 1991 年，Linus Torvalds 创建的只是一个内核。直到今天，他也在为Linux 内核工作。他不再编写代码，而是监督哪些代码进入内核。</p><h3 id="内核什么东西">内核？什么东西？</h3><p>内核是每个操作系统的中心。不仅仅是 Linux，Windows 和 macOS也有内核。</p><p>将内核想象成操作系统的心脏。没有心脏，你就无法生存。没有内核，操作系统就无法存在。</p><p>但是，就像心脏需要一个身体来生存一样，内核需要其他人们可以在计算机上使用的程序和工具来构成一个完整的操作系统。</p><p>这是一个操作系统的典型架构：</p><p><imgsrc="https://itsfoss.com/content/images/2023/02/image-6.png" /></p><p>在中心的内核与硬件交互。在它之上是与内核交互的<ruby>交互界面<rt>Shell</rt></ruby>。然后你有应用程序、命令行和图形界面，为你提供使用系统的各种方式。</p><h3 id="内核是引擎操作系统是汽车">内核是引擎，操作系统是汽车</h3><p>一个更好的类比是将内核想象成汽车的引擎，而操作系统则是汽车。</p><p>你不可能驾驶一个引擎，但是如果没有引擎，你也不能驾驶一辆汽车。你需要轮胎、转向机和其他组件才能将其变成一辆可以驾驶的汽车。</p><p>相似地，你不能直接使用内核。你需要<ruby>交互界面<rt>Shell</rt></ruby>，其他工具和组件才能使用操作系统。</p><p><imgsrc="https://itsfoss.com/content/images/2023/02/image-7.png" /></p><h3 id="linux-对比-gnulinux">Linux 对比 GNU/Linux</h3><p>在类似的地方，你也会看到例如“Linux 只是一个内核，<ahref="https://itsfoss.com/gnu-linux-copypasta/">你所说的 Linux 实际上是GNU/Linux</a>”的陈述。</p><p>在 Linus Torvalds 在 1991 年创建 Linux 之前，Richard Stallman就创建了<ruby>自由软件运动<rt>Free Software movement</rt></ruby>和 GNU项目。GNU 项目包括对流行的 UNIX 工具和命令的重新实现，例如<code>ls</code>、<code>grep</code>、<code>sed</code> 等。</p><p>通常，你的 Linux 发行版会在 Linux 内核之上包含所有这些 GNU 工具。</p><p>这就是为什么纯粹主义者坚持称之为 GNU/Linux，以便人们不要忘记 GNU 对Linux 成功的贡献和重要性。</p><h3 id="最后">最后……</h3><p><strong>所以，如果你在面试或者考试中被问到这个问题，回答“Linux是一个内核，而不是一个操作系统”。这是你的老师或面试官在大多数情况下想要的答案。</strong></p><p>但是更深入一点，理解内核和操作系统之间的区别。</p><p>如果有人说：“我使用 Linux”，你就会明白这个人是指 Linux发行版，而不仅仅是内核。诚然，没有必要用“Linux只是一个内核，而不是一个操作系统”来纠正别人。</p><hr /><p>via: https://itsfoss.com/linux-kernel-os/</p><p>作者：<a href="https://itsfoss.com/author/abhishek/">AbhishekPrakash</a> 选题：<a href="https://github.com/lkxed/">lkxed</a> 译者：<ahref="https://github.com/Cubik65536">Cubik65536</a> 校对：<ahref="https://github.com/wxy">wxy</a></p><p>本文由 <a href="https://github.com/LCTT/TranslateProject">LCTT</a>原创编译，<a href="https://linux.cn/">Linux 中国</a> 荣誉推出</p>]]></content>
      
      
      <categories>
          
          <category> LCTT </category>
          
          <category> 转载 </category>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Linux Kernel </tag>
            
            <tag> Linux 内核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LCTT 原创翻译转载] 新闻｜Linux 6.1 内核被批准为长期支持版本</title>
      <link href="/lctt/translation-linuxcn-article-15532-1/"/>
      <url>/lctt/translation-linuxcn-article-15532-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文：<ahref="https://news.itsfoss.com/linux-kernel-6-1-is-now-an-lts-version/">LinuxKernel 6.1 is Now Approved as an LTS Version</a> 首发：<ahref="https://linux.cn/article-15532-1.html">Linux 6.1内核被批准为长期支持版本</a> @<a href="https://linux.cn/">Linux 中国</a>作者：<ahref="https://news.itsfoss.com/linux-kernel-6-1-is-now-an-lts-version/">SouravRudra</a> 译者：<a href="https://linux.cn/lctt/">LCTT</a> <ahref="https://linux.cn/lctt/Cubik65536">Cubik</a></p></blockquote><span id="more"></span><h2 id="linux-6.1-内核被批准为长期支持版本">Linux 6.1内核被批准为长期支持版本</h2><blockquote><p>作为 2022 年的最后一个内核，经过一个多月的等待，现在 Linux 6.1被批准为长期支持版本。</p></blockquote><figure><imgsrc="https://news.itsfoss.com/content/images/size/w2000/2023/02/linux-6-1-to-be-lts.png"alt="Linux 6.1 内核被批准为长期支持版本" /><figcaption aria-hidden="true">Linux 6.1内核被批准为长期支持版本</figcaption></figure><p>Linux 6.1 内核是 2022年的最后一个内核版本，通常这些版本会被批准为长期支持版本。</p><p>但是这次，将其作为 LTS 版本的决定被推迟了。</p><p>在决定是否将其用于长期使用之前，还在等待一些来自内核相关人员的关键反馈的测试结果。</p><p>幸好，这些问题已经得到解决，现在 <strong>Linux 6.1是一个长期支持版本</strong>。</p><p>让我带你了解这一举措的要点。</p><h3 id="linux-6.1-现在正在成为长期支持版本">Linux 6.1现在正在成为长期支持版本</h3><p>自从 12 月份发布以来，Linux 稳定分支维护者 <strong>GregKroah-Hartman</strong> 就计划将 Linux 6.1作为一个长期支持版本，但是一些待定的反馈导致该决定被推迟了。</p><p>现在，他和共同维护者 Sasha Levin 终于收到了足够的反馈，表明将 Linux内核 6.1 作为一个长期支持版本维护是合理的。</p><p>按照目前的情况，Linux 6.1 内核预期将于 <strong>2026 年 12 月</strong>结束支持，如果有足够多的用户或公司对其感兴趣，那么它的生命周期可能会延长。</p><figure><imgsrc="https://news.itsfoss.com/content/images/2023/02/Linux_Kernel_LTS.jpg"alt="一张描述当前 Linux 长期支持版本的表格" /><figcaption aria-hidden="true">一张描述当前 Linux长期支持版本的表格</figcaption></figure><p>最初，它的生命周期被计划为 2 年，但是后来被更新为了 <strong>当前的 4年</strong>。</p><p>你还会注意到，同时许多 Linux 内核都被作为长期支持版本维护。</p><h3 id="linux-6.1-内核概述">Linux 6.1 内核：概述</h3><p>如果你错过了这个版本，下面是 Linux 内核 6.1 的一些亮点：</p><ul><li>对 Rust 的实验性支持</li><li>对 AMD PC 的优化</li><li>对英特尔 Meteor Lake 的初始支持</li><li>优化 ARM 架构 SoC 的支持</li></ul><p>这些并不是新版本的全部内容；你可以阅读我们的文章以了解更多信息。</p><blockquote><p><strong><ahref="https://news.itsfoss.com/linux-kernel-6-1-release/">Linux 内核 6.1发布，初步支持 Rust</a></strong></p></blockquote><p>参考自：<ahref="https://www.phoronix.com/news/Linux-6.1-LTS-Official">Phoronix</a></p><p>💬考虑到这是一个长期支持版本，你可以预见到很多未来的发行版升级将会包含Linux 6.1 内核。你认为你会更喜欢使用哪个版本？</p><hr /><p>via:https://news.itsfoss.com/linux-kernel-6-1-is-now-an-lts-version/</p><p>作者：<a href="https://news.itsfoss.com/author/sourav/">SouravRudra</a> 选题：<a href="https://github.com/lkxed/">lkxed</a> 译者：<ahref="https://github.com/Cubik65536">Cubik65536</a> 校对：<ahref="https://github.com/wxy">wxy</a></p><p>本文由 <a href="https://github.com/LCTT/TranslateProject">LCTT</a>原创编译，<a href="https://linux.cn/">Linux 中国</a> 荣誉推出</p>]]></content>
      
      
      <categories>
          
          <category> LCTT </category>
          
          <category> 转载 </category>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Linux Kernel </tag>
            
            <tag> Linux 内核 </tag>
            
            <tag> Linux LTS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更改 git commit 的日期</title>
      <link href="/2023-02-11-Change-Date-of-Git-Commit/"/>
      <url>/2023-02-11-Change-Date-of-Git-Commit/</url>
      
        <content type="html"><![CDATA[<p>本文将简单介绍一下如何更改一个 git 提交的时间戳。</p><div class="tag-plugin note" color="warning"><div class="body"><p>注意，本站不建议随意执行本文中提到的任何命令，请仅在必要的情况下使用。</p></div></div><h2 id="将最新的-commit-的时间设置为当前时间">将最新的 commit的时间设置为当前时间</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GIT_COMMITTER_DATE=<span class="string">&quot;<span class="subst">$(date)</span>&quot;</span> git commit --amend --no-edit --<span class="built_in">date</span> <span class="string">&quot;<span class="subst">$(date)</span>&quot;</span></span><br></pre></td></tr></table></figure><h2 id="将最新的-commit-的时间设置为指定时间">将最新的 commit的时间设置为指定时间</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GIT_COMMITTER_DATE=<span class="string">&quot;Thu Jan 1 00:00:00 1970 -0500&quot;</span> git commit --amend --no-edit --<span class="built_in">date</span> <span class="string">&quot;Thu Jan 1 00:00:00 1970 -0500&quot;</span></span><br></pre></td></tr></table></figure><h2 id="将任意-commit-的时间设置为当前或指定时间">将任意 commit的时间设置为当前或指定时间</h2><ol type="1"><li><p>使用 <code>git rebase &lt;commit-hash&gt;^ -i</code>命令进入交互式 rebase 模式，其中 <code>&lt;commit-hash&gt;</code>为你想要更改的 commit 的 hash 值</p></li><li><p>将第一个 commit 开头的 <code>pick</code> 改为 <code>e</code>(edit)</p></li><li><kbd>esc</kbd><p>并 <code>:wq</code> 保存退出</p></li><li><p>更改 commit 的时间戳</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GIT_COMMITTER_DATE=<span class="string">&quot;<span class="subst">$(date)</span>&quot;</span> git commit --amend --no-edit --<span class="built_in">date</span> <span class="string">&quot;<span class="subst">$(date)</span>&quot;</span></span><br></pre></td></tr></table></figure></p><p>或者</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GIT_COMMITTER_DATE=<span class="string">&quot;Thu Jan 1 00:00:00 1970 -0500&quot;</span> git commit --amend --no-edit --<span class="built_in">date</span> <span class="string">&quot;Thu Jan 1 00:00:00 1970 -0500&quot;</span></span><br></pre></td></tr></table></figure></p></li><li><p><code>git rebase --continue</code> 完成</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LCTT 原创翻译转载] 分享｜2023 年值得期待的 11 个新发行版</title>
      <link href="/lctt/translation-linuxcn-article-15463-1/"/>
      <url>/lctt/translation-linuxcn-article-15463-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文：<a href="https://news.itsfoss.com/new-distros-2023/">11 NewDistros to look forward to in 2023</a> 首发：<ahref="https://linux.cn/article-15463-1.html">2023 年值得期待的 11个新发行版</a> @<a href="https://linux.cn/">Linux 中国</a> 作者：<ahref="https://news.itsfoss.com/new-distros-2023/">Sourav Rudra</a>译者：<a href="https://linux.cn/lctt/">LCTT</a> <ahref="https://linux.cn/lctt/Cubik65536">Cubik</a></p></blockquote><span id="more"></span><h2 id="年值得期待的-11-个新发行版">2023 年值得期待的 11 个新发行版</h2><blockquote><p>你对 2023 年有什么期待？试试这些发行版吧！</p></blockquote><figure><imgsrc="https://news.itsfoss.com/content/images/size/w2000/2022/12/distros-to-look-forward-in-2023.png"alt="2023 年值得期待的 11 个新发行版" /><figcaption aria-hidden="true">2023 年值得期待的 11个新发行版</figcaption></figure><p>是时候向 2022 年说再见了！📆</p><p>2022 年有很多发行版发布，其中有一些非常出色。</p><p>随着人们越来越关注用户体验和性能，Linux发行版在过去的一年中有了显著的发展。</p><p>对于你我这样的最终用户，可以有几个选择。你可以尝试一些 <ahref="https://itsfoss.com/best-linux-beginners/">对初学者友好的选项</a>或者尝试一些 <ahref="https://itsfoss.com/advanced-linux-distros/">面向资深用户的发行版</a>。</p><p>在本文中，我将重点介绍一些你可以尝试一下看看的新发行版。这些发行版可能不一定能取代现有的流行发行版。但是，如果你想尝试一些新的东西，可以试试列表中的这些。</p><p>所以，你在 2023 年可以期待什么？🤔</p><p>好吧，为了回答这个问题，让我们踏上发行版之旅吧！</p><blockquote><p>💡新的发行版可能不适合生产环境。如果你不介意尝试新的东西，可以尝试这些选项。</p></blockquote><h3 id="vanilla-os">1, Vanilla OS</h3><figure><imgsrc="https://news.itsfoss.com/content/images/2022/12/Vanilla-OS-1.png"alt="Vanilla OS" /><figcaption aria-hidden="true">Vanilla OS</figcaption></figure><p>Vanilla OS 是一个基于 Ubuntu 的发行版，它是 <ahref="https://usebottles.com">Bottles</a> 的创建者 Mirko Brombin的心血结晶。</p><p>它旨在提供一个具有<strong>干净、原生的 GNOME体验，以及<ruby>按需不变性<rt>on-demandimmutability</rt></ruby></strong>和优秀的首次安装体验。</p><blockquote><p>LCTT 译注：<ruby>按需不变性<rt>on-demandimmutability</rt></ruby>，指一个可以按需让文件不可更改的功能，用于确保系统文件不会被随意更新。可参考<ahref="https://documentation.vanillaos.org/docs/almost/">此链接</a>。</p></blockquote><p>如果你想尝试一些新的东西并且想尝试一下按需不变性这个令 Vanilla OS如此独特的功能，可以尝试一下这个发行版。</p><p>它还没有稳定版本，在一段时间内也不会有，预计将在 2023年进行许多改进。</p><blockquote><p><strong><a href="https://vanillaos.org">Vanilla OS</a></strong></p></blockquote><h3 id="xerolinux">2、XeroLinux</h3><figure><img src="https://news.itsfoss.com/content/images/2022/12/XeroLinux.jpg"alt="XeroLinux" /><figcaption aria-hidden="true">XeroLinux</figcaption></figure><p>这个兴趣项目 <a href="https://itsfoss.com/xerolinux/">XeroLinux</a>是 Steve（即TechXero）启动的，这个项目并不打算成为一个主流发行版，也没有各种花里胡哨的东西。</p><p>这个“养眼”版的 Arch Linux衍生版提供了令人愉快的开箱即用体验和一些令人兴奋的功能。</p><p>如果你希望获得更加易用的 Arch Linux 体验，可以尝试这个。</p><p><strong>从 2023 年 1 月起</strong>，XeroLinux将切换到每月发布的计划。所以，你可以期待 2023 年有很多更新！</p><blockquote><p><strong><a href="https://xerolinux.xyz">XeroLinux</a></strong></p></blockquote><h3 id="crystal-linux">3, Crystal Linux</h3><figure><imgsrc="https://news.itsfoss.com/content/images/2022/12/Crystal-Linux.jpg"alt="Crystal Linux" /><figcaption aria-hidden="true">Crystal Linux</figcaption></figure><p>Crystal Linux 是一个即将发布的基于 Arch的发行版，它希望<strong>提供一个易于使用的桌面体验，以及现代 Linux技术</strong>。</p><p>在目前的状态下，它可能不适合新手，而具有 Linux使用经验的人更有可能喜欢它。</p><p>所以，就目前而言，我建议已经熟悉 Linux 的用户可以尝试一下 CrystalLinux。</p><p>我预计 Crystal Linux 将在 2023年有一个稳定版本，该版本将具有许多功能和改进，而这些功能和改进都是基于目前可用的<a href="https://getcryst.al">beta 版本</a>。</p><blockquote><p><strong><a href="https://getcryst.al">Crystal Linux</a></strong></p></blockquote><h3 id="tuxedo-os">4, TUXEDO OS</h3><figure><img src="https://news.itsfoss.com/content/images/2022/12/TuxedoOS.jpg"alt="TUXEDO OS" /><figcaption aria-hidden="true">TUXEDO OS</figcaption></figure><p><a href="https://news.itsfoss.com/tuxedo-os/">TUXEDO OS</a> 是一个由TUXEDO 计算机公司（一个专注 Linux 的硬件制造商）提供的基于 Ubuntu的发行版。</p><p>它提供了 KDE Plasma 桌面环境，还有一些额外的功能，例如用于微调硬件的<strong>TUXEDO控制中心</strong>，以及一个用于解决驱动程序与缺少软件包的问题的配置服务<strong>TUXEDO Tomte</strong>。</p><p>如果你想要一个<strong>不同的 KDE驱动的体验</strong>，我建议你尝试一下。</p><p>最开始，它只作为预装系统在 TUXEDO 的笔记本和台式电脑上提供。</p><p>但是后来，它在 2022 年 9 月获得了一个通用版本，称为“TUXEDO OS1”。它将在 2023 年获得大量更新。</p><blockquote><p><strong><ahref="https://www.tuxedocomputers.com/en/TUXEDO-OS_1.tuxedo">TUXEDOOS</a></strong></p></blockquote><h3 id="eurolinux">5、EuroLinux</h3><figure><img src="https://news.itsfoss.com/content/images/2022/12/EuroLinux.jpg"alt="EuroLinux" /><figcaption aria-hidden="true">EuroLinux</figcaption></figure><p><a href="https://news.itsfoss.com/eurolinux-desktop/">EuroLinux</a>是一个具有<strong>企业级特性</strong>的、基于 RHEL的发行版。它以可靠的软件包提供了稳定性和安全性。</p><p>它基于 <strong>RHEL 9</strong>，可以提供与其他 <ahref="https://itsfoss.com/rhel-based-server-distributions/">基于 RHEL的服务器发行版</a>（如 Rocky Linux，CentOS，AlmaLinux等）的无缝兼容性。</p><p>它旨在以熟悉的用户界面布局吸引 Windows 和 macOS用户，在屏幕底部提供了一个半透明的菜单栏。</p><p>你应该尝试一下，因为整个软件包相当充分，可以同时满足 Linux 和Windows/macOS 用户的需要。</p><p>它现在已经发布了稳定版本，也在 2023 年有更新计划。</p><blockquote><p><strong><ahref="https://en.euro-linux.com/eurolinux/desktop/">EuroLinux</a></strong></p></blockquote><h3 id="zinc">6、Zinc</h3><figure><img src="https://news.itsfoss.com/content/images/2022/12/Zinc.png"alt="Zinc" /><figcaption aria-hidden="true">Zinc</figcaption></figure><p><a href="https://teejeetech.com/tag/zinc/">Zinc</a> 是一个<strong>基于 Ubuntu的发行版</strong>，经过了调整后提供了一个独特的体验。现有的 Ubuntu用户可能会惊讶于它所提供的内容。</p><p>它基于 <strong>Xubuntu</strong> 的最新 LTS 版本，使用了 XFCE桌面环境，并对其进行了许多改进，例如集成的 Linux AppImage 支持、deb-get包安装程序、BTRFS 作为默认文件系统等。</p><p>如果你正确的配置了它，它可以成为你的日用操作系统的替代品。</p><p>它遵循稳定的发布模式，因此你可以期待 2023 年的重大更新！</p><blockquote><p><strong><ahref="https://teejeetech.com/tag/zinc/">Zinc</a></strong></p></blockquote><h3 id="cachyos">7、CachyOS</h3><figure><img src="https://news.itsfoss.com/content/images/2022/12/CachyOS.jpg"alt="CachyOS" /><figcaption aria-hidden="true">CachyOS</figcaption></figure><p><a href="https://cachyos.org">CachyOS</a> 尝试使 <strong>Arch Linux变得对初学者更加友好</strong>，让任何人都可以使用。它很受欢迎，因为它具有高度的可定制性，而且还拥有最新的软件。</p><p>它旨在为你提供一个快速、安全且易于使用的操作系统。</p><p>该操作系统适用于想要试验和尝试新事物的用户。</p><p>CachyOS 是一个滚动发布的发行版，因此你可以期待它在 2023年获得大量更新。</p><blockquote><p><strong><a href="https://cachyos.org">CachyOS</a></strong></p></blockquote><h3 id="risios">8、risiOS</h3><figure><img src="https://news.itsfoss.com/content/images/2022/12/risiOS.png"alt="risiOS" /><figcaption aria-hidden="true">risiOS</figcaption></figure><p>在基于 Arch 和 Ubuntu 的 Linux 发行版的海洋中，<ahref="https://risi.io">risiOS</a> 是一道难得的风景。</p><p>该项目基于 Fedora Linux，其起源于美国西雅图。</p><p>它使用 <strong>GNOME 桌面环境</strong>为用户提供了一个高度可定制的体验，同时还提供了 <strong>自定义的 ZSH版本</strong>。</p><p>如果你希望尝试一个基于 Fedora 的发行版，这可能是你的新选择！</p><p>risiOS 会在稳定版本间隔中推送一些小更新。在 2023年，它还有更多的东西可以提供给你。</p><blockquote><p><strong><a href="https://risi.io">risiOS</a></strong></p></blockquote><h3 id="exodia-os">9, Exodia OS</h3><figure><img src="https://news.itsfoss.com/content/images/2022/12/Exodia-OS.jpg"alt="Exodia OS" /><figcaption aria-hidden="true">Exodia OS</figcaption></figure><p>#$**！又是一个基于 Arch 的 Linux 发行版？</p><p>是的。🤭 好吧，看起来今年我们已经受够了基于 Arch的发行版了，这并不一定是坏事！</p><p>认识一下 <a href="https://exodia-os.github.io/exodia-website/">ExodiaOS</a>，一个基于 Arch 的 Linux发行版，旨在为安全领域的用户提供高度可定制的体验。</p><p>其功能包括<strong>为各种网络安全领域预装的工具、命令行界面应用、ElKowarswacky widgets（EWW）、Zsh 等</strong>。</p><p>如果你是一个网络安全专家或爱好者，你可以试试！</p><p>他们为三个不同的使用场景提供了三个版本。你可以期待他们在 2023年继续推送必要的更新和功能添加。</p><blockquote><p><strong><a href="https://exodia-os.github.io/exodia-website/">ExodiaOS</a></strong></p></blockquote><h3 id="kumandar-linux">10, Kumandar Linux</h3><figure><imgsrc="https://news.itsfoss.com/content/images/2022/12/Kumander-Linux.jpg"alt="Kumandar Linux" /><figcaption aria-hidden="true">Kumandar Linux</figcaption></figure><p>乍一看，你可能会认为这是 Windows 7，但如果仔细观察，你会发现这是 <ahref="https://www.kumander.org">Kumandar Linux</a>。</p><p>它基于<strong>Debian 11，并使用自定义的 XFce 版本</strong>。</p><p>该名称在中文中的含义为“指挥官”，以向开发者的第一台电脑 <ahref="https://en.wikipedia.org/wiki/VIC-20">Commodore VIC20</a>致敬。</p><p>如果你喜欢 Windows 7，但想在 Linux上体验同样的体验，那么你可以试试！</p><p>目前，该系统只发布了早期的候选版本。但是，你可以期待在 2023年发布稳定版本，希望如此！</p><blockquote><p><strong><a href="https://www.kumander.org">Kumander</a></strong></p></blockquote><h3 id="ubuntu-unity">11, Ubuntu Unity</h3><figure><imgsrc="https://news.itsfoss.com/content/images/2022/12/UbuntuUnity.jpg"alt="Ubuntu Unity" /><figcaption aria-hidden="true">Ubuntu Unity</figcaption></figure><p><ahref="https://news.itsfoss.com/unity-remix-official-flavor/">今年早些时候</a>，UbuntuUnity 被宣布为 Ubuntu 的官方版本，是 Ubuntu 的一个翻版。</p><p>它使用了 2010 - 2017 年间 Ubuntu 中使用的 Unity桌面界面，该界面后来被 Canonical 使用 GNOME 取代。</p><p>开发工作如火如荼，年轻的首席开发人员正在推动更新和增加新功能。</p><p>想要尝试不同风格的 Ubuntu 的用户可以试试这个系统。它提供了 LTS 和非LTS 版本。</p><blockquote><p><strong><a href="https://ubuntuunity.org/">UbuntuUnity</a></strong></p></blockquote><h3 id="总结">总结</h3><p>即使有了这份全面的清单，我也可能遗漏了一些。 🤔</p><p>但是。</p><p>或许 2023年会有惊喜的发布占据头版，或者一些现有的发行版会尝试一些不同的东西。</p><p>但在那之前，</p><p><em>💬 请告诉我你在 2023 年期待着哪些发行版？</em></p><hr /><p>via: https://news.itsfoss.com/new-distros-2023/</p><p>作者：<a href="https://news.itsfoss.com/author/sourav/">SouravRudra</a> 选题：<a href="https://github.com/lkxed">lkxed</a> 译者：<ahref="https://github.com/Cubik65536">Cubik65536</a> 校对：<ahref="https://github.com/wxy">wxy</a></p><p>本文由 <a href="https://github.com/LCTT/TranslateProject">LCTT</a>原创编译，<a href="https://linux.cn/">Linux 中国</a> 荣誉推出</p>]]></content>
      
      
      <categories>
          
          <category> LCTT </category>
          
          <category> 转载 </category>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Linux 发行版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022 年 12 月总结 (2022 年终总结？)</title>
      <link href="/2022-12-MonthJournal/"/>
      <url>/2022-12-MonthJournal/</url>
      
        <content type="html"><![CDATA[<p>2022 年 11 月的月总结咕了，12 月的来了，顺便总结一下 2022</p><span id="more"></span><h2 id="考试">考试</h2><p>从 10 月开始一直到 12月底的圣诞假期之前一直在考各种试，所以不仅没做什么项目，还把 11月的月总结咕了...</p><p>不过总体来看考试结果都还不错...</p><h2 id="圣诞假期">圣诞假期</h2><p>每年最后一周和新年第一周都是假期，所以可以往这两周里安排一点事情...</p><h2 id="remotemc">RemoteMC</h2><h3 id="http-api">HTTP API</h3><p>我有一天突然发现已经将近完成的 RemoteMC-Core 和 RemoteMC-QQ 中的 HTTP模块设计的非常不合理：API 返回的一直是 HTTP 200 加上一个带有<code>status_code</code> 的 JSON...梗图成真了（）于是我决定分别重构两个模块中的相关代码并在放假之前完成了相关工作。</p><h3 id="兼容性检查">兼容性检查</h3><p>另外，一个新功能正在开发中：兼容性检查。目前的想法是在 RemoteMC-Core中存储与各个客户端模块（MCDR 等）的兼容性列表并在 ping的过程中检查是否兼容。客户端模块在 ping方法的返回信息中会添加几个版本信息字段，由 RemoteMC-Core检查是否兼容并在 status 页面中显示兼容性状态。目前 RemoteMC-Core中的相关功能已经被添加，而 RemoteMC-MCDR模块中的相关功能会在一些相关的功能被添加后增加。</p><h3 id="更新检查器">更新检查器</h3><p>另外，在兼容性检查功能完全完成后会添加一个更新检查器，使用 GitHub API检查是否有新版本并在网页与控制台输出中提示。</p><h2 id="section">2023</h2><h3 id="项目">项目</h3><p>2023 年应该还会继续 RemoteMC 系列的开发，尤其是开始 QQ机器人模块的开发。</p><h3 id="升学">升学</h3><p>本学期将于 2023 年 2月初结束，然后就要提交成绩给下一个学校了，希望一切顺利...</p><div class="tag-plugin quot"><h2 class="content" id="那就这样，新年快乐，GL & HF!" type="text"><a href="#那就这样，新年快乐，GL & HF!" class="headerlink" title="那就这样，新年快乐，GL & HF!"></a>那就这样，新年快乐，GL & HF!</h2></div>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arc 浏览器上手</title>
      <link href="/2022-12-31-HandsOnArcBrowser/"/>
      <url>/2022-12-31-HandsOnArcBrowser/</url>
      
        <content type="html"><![CDATA[<p>前一段时间我通过朋友拿到了一个体验 Arc 浏览器的邀请码，于是我开始将Arc浏览器当作我的主力浏览器使用了一段时间。由于生活中需要忙各种其他事情，于是这个上手体验文被拖到了现在。这篇文章仍然主要着重于Arc 浏览器带给我的第一印象，那我们开始吧！</p><span id="more"></span><h2 id="安装-arc-浏览器">安装 Arc 浏览器</h2><p>目前 Arc 浏览器仅支持 macOS系统而且仍然需要邀请码才可以体验。如果你还没有邀请码，你可以前往 <ahref="https://www.arc.net">Arc 浏览器官网</a>填写表格申请邀请码。如果你有朋友已经在使用 Arc浏览器，你也可以找他们给你一个邀请链接。已有 Arc用户可以每周生成一个可供五人使用的邀请链接。打开 Arc浏览器，点击菜单栏中的 <code>Arc</code>，然后点击<code>Gift Arc to a friend</code>，你就可以将你的邀请码分享给你的朋友了。</p><p>在你收到你的朋友发送给你的邀请之后，打开链接即可看见以下页面，输入你的邮箱地址，然后点击<code>Get early access</code> 即可。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/ArcBrowser/SCR-20221130-rlj.jpeg" fancybox="true"/></div></div><p>在完成上述步骤（或 Arc浏览器开发组直接邀请你）之后，你会收到一个类似这个的邮件（我此处使用了好友邀请，开发组邀请邮件可能不太一样）：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/ArcBrowser/SCR-20221130-rp8.jpeg" fancybox="true"/></div></div><p>点击 <code>Download Arc</code> 开始下载，然后打开<code>Arc-latet.dmg</code>，像安装大部分其他 App 一样将<code>Arc.app</code> 拖动到 <code>Applications</code>文件夹中即可完成安装。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/ArcBrowser/SCR-20221130-rz5.png" fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/ArcBrowser/SCR-20221130-s0i.jpeg" fancybox="true"/></div></div><h2 id="初次使用-arc-浏览器">初次使用 Arc 浏览器</h2><p>初次打开 Arc 浏览器，你会看见以下界面：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/ArcBrowser/SCR-20221130-s4b.jpeg" fancybox="true"/></div></div><p>点击继续（➡️），你将会进入 Arc浏览器的初次配置流程，首先姓名邮箱（必须是收到邀请邮件的那个）以及 Arc账户密码：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/ArcBrowser/SCR-20221130-s4i.jpeg" fancybox="true"/></div></div><p>然后选择是否要从其他浏览器导入：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/ArcBrowser/SCR-20221130-s8d.jpeg" fancybox="true"/></div></div><p>到现在都还和其他浏览器没什么区别，但是接下来就不一样了。Arc浏览器会让你自行选择你想要的主题色：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/ArcBrowser/SCR-20221130-s9d.png" fancybox="true"/></div></div><p>然后是常用书签以及是否要开启广告拦截：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/ArcBrowser/SCR-20221130-s9m.jpeg" fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/ArcBrowser/SCR-20221130-s9p.jpeg" fancybox="true"/></div></div><p>最后是是否要设置 Arc 为默认浏览器：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/ArcBrowser/SCR-20221130-sa0.jpeg" fancybox="true"/></div></div><p>完事之后还会给你一个可以保存的图片已证明你是 Arc 浏览器的用户：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/ArcBrowser/SCR-20221130-sa7.jpeg" fancybox="true"/></div></div><p>然后你就可以开始体验 Arc 浏览器了！</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/ArcBrowser/SCR-20221130-sax.jpeg" fancybox="true"/></div></div><h2 id="优点">优点</h2><p>Arc浏览器相对于其他浏览器，都有各不相同的优势，这里我就列举一些我认为比较重要的优势：</p><ol type="1"><li><p>基于 Chromium 内核</p><p>这点其实是相当重要的。我之前使用的主力浏览器是Safari，所以会遇到各种兼容性的问题，但在使用基于 Chromium 的 Arc身上这些问题就不存在了。另外，Arc 浏览器也支持 Chrome 扩展，所以你可以在Chrome 商店中找到你想要的扩展并安装到 Arc浏览器中，为浏览器的功能以及可定制性带来的极大的提升。</p></li><li><p>好看的界面</p><p>看完上一点，你可能会问，那为什么不直接用 Chrome呢？看到上面几个截图，你应该会发现 Arc 浏览器的界面风格和Chrome/Chromium/Edge以及其他浏览器有很大不同。我个人认为这样的界面风格相对于上述浏览器都更适合macOS。</p></li><li><p>特殊功能</p><p>对我来说，Arc 浏览器独特的标签页组织方式非常吸引人。在 Arc浏览器中引入了 Space 的概念，你可以把你的标签页分组到不同的 Space中，这样你就可以在不同的 Space中切换，而不需要开启多个窗口来分组不同的工作内容。同时，Arc浏览器收藏标签页的功能也非常有意思。在左侧的标签页列表中，标签页分为<code>Favorites</code>，即为不同 Space共享的统一收藏夹，<code>Pinned Tabs</code> 即为当前 Space的固定标签页，以及更像是普通浏览器打开的各种标签页的<code>Today tabs</code>，你也可以设置自动关闭一段时间没有访问的<code>Today tabs</code>。Arc浏览器还支持关闭侧边栏已获得更多的浏览空间，或者在同一窗口下分开显示多个网页。这些新功能无疑改变了许多浏览器常用的操作逻辑。</p><p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/ArcBrowser/SCR-20221130-sfi.jpeg" alt="Arc 浏览器同窗口分屏显示" fancybox="true"/></div><div class="image-meta"><span class="image-caption center">Arc 浏览器同窗口分屏显示</span></div></div> <div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/ArcBrowser/SCR-20221130-sif.jpeg" alt="Arc 浏览器对网页元素单独截图" fancybox="true"/></div><div class="image-meta"><span class="image-caption center">Arc 浏览器对网页元素单独截图</span></div></div> <div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/ArcBrowser/SCR-20221201-d17.jpeg" alt="Arc 浏览器隐藏侧边栏显示" fancybox="true"/></div><div class="image-meta"><span class="image-caption center">Arc 浏览器隐藏侧边栏显示</span></div></div></p></li><li><p>隐私优化</p><p>Arc浏览器属于相当注重用户隐私的浏览器之一。在设置过程中它就会问你是否要开启广告拦截，而且Arc 会收集的数据也很少，但是这引出了极大的问题：</p></li></ol><h2 id="缺点">缺点</h2><ol type="1"><li><p>不完美的同步</p><p>作为需要在多个设备上工作的人，Arc<strong>不会</strong>同步保存的密码，历史记录，书签，插件等内容。这意味着更换一个工作设备都要注意重新设置大量内容，造成了极大的不便。这也不禁让我思考：为了隐私而放弃同步这一个极大提升多设备体验的功能，值得吗？</p></li><li><p>确实是基于 Chromium 的</p><p>没错，这是对于 Arc 浏览器完成度的吐槽，这是 Arc浏览器的设置界面：</p><p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/ArcBrowser/SCR-20221130-sbs.jpeg" fancybox="true"/></div></div></p><p>挺有苹果味的？那如果我们点击 <code>Password</code>选项看看保存的密码呢？</p><p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/ArcBrowser/SCR-20221130-scm.jpeg" fancybox="true"/></div></div></p><p>这包装完成度未免也太低了点？About Chromium？</p></li><li><p>复杂的操作逻辑</p><p>Arc浏览器引入了各种操作以及对应的快捷键。侧边栏等带有复杂的操作的模块因为可以隐藏所以对效率的影响可以被降低，但是快捷键？很多网站（尤其是Google Doc 这种网页应用）都会使用快捷键来提升操作效率，但是 Arc将很多常用快捷键都占用了，虽然可以设置要求网页优先使用快捷键或者设置快捷键，但是还是会造成一些不便。</p><p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/ArcBrowser/SCR-20221130-sir.jpeg" alt="Arc 浏览器快捷键配置窗口" fancybox="true"/></div><div class="image-meta"><span class="image-caption center">Arc 浏览器快捷键配置窗口</span></div></div></p></li></ol><h2 id="是否可以替代其他浏览器">是否可以替代其他浏览器？</h2><p>我个人认为 Arc可以在大多数情况下当做主要浏览器使用，但是我个人还是建议保留一个常用/系统自带的浏览器应付跨设备工作的情况。</p><p>那么就这样吧，GL &amp; HF！对了，新年快乐！</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 上手 </tag>
            
            <tag> macOS </tag>
            
            <tag> 浏览器 </tag>
            
            <tag> Arc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS 操作系统在启动时自动挂载 dmg 文件</title>
      <link href="/2022-12-16-macOS-automatically-mount-dmg-when-start/"/>
      <url>/2022-12-16-macOS-automatically-mount-dmg-when-start/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>在重装 macOS操作系统的过程中，为了一些软件的兼容性考虑，我将我的主硬盘（<code>Macintosh HD</code>）格式化为了APFS（加密）格式。但是我对存储代码的文件夹有使用大小写敏感功能的要求，于是我单独创建了一个APFS（区分大小写）的 dmg镜像用来存储我的代码。但是每次电脑重启之后，我们都需要手动挂载这个 dmg文件，那么有的时候是相对麻烦的，所以我就开始寻找一个可以在 macOS登陆之后自动挂载 dmg 文件的方法。</p><h2 id="解决方案">解决方案</h2><div class="tag-plugin note" color="warning"><div class="body"><p>我的操作系统语言为英语，本文中关于按钮/软件的内容也将会使用英语。请在必要时参考截图或者其他方法进行对照</p></div></div><ol type="1"><li>前往 System Settings</li></ol><p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/SCR-20221216-kxl.jpeg" fancybox="true"/></div></div></p><ol start="2" type="1"><li>搜索 <code>Login Items</code> 并点击 <code>Login Items</code>选项</li></ol><p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/SCR-20221216-kxv.jpeg" fancybox="true"/></div></div></p><ol start="3" type="1"><li>点击 <code>Open at Login</code> 区域下方的 <code>+</code> 按钮</li></ol><p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/SCR-20221216-t5u.jpeg" fancybox="true"/></div></div></p><ol start="4" type="1"><li>在弹出的对话框中找到你的 dmg 文件并点击 <code>Open</code> 按钮</li></ol><p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/SCR-20221216-t6c.jpeg" fancybox="true"/></div></div></p><ol start="5" type="1"><li>如果你的 dmg 文件出现在 <code>Login Items</code>的列表中了，设置就完成了</li></ol><p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/SCR-20221216-t7l.jpeg" fancybox="true"/></div></div></p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> dmg </tag>
            
            <tag> 速记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用 root 用户登录 Oracle Cloud</title>
      <link href="/2022-12-09-LoginToOracleCloudWithRoot/"/>
      <url>/2022-12-09-LoginToOracleCloudWithRoot/</url>
      
        <content type="html"><![CDATA[<p>众所周知，Oracle Cloud 默认只允许用户以 opc / ubuntu用户名登陆，但是有的时候直接使用 root账户会更加的方便，所以本文将会简单介绍一下如何启用 Oracle Cloud 服务器的root 用户登录。</p><div class="tag-plugin note" color="warning"><div class="title">注意</div><div class="body"><p>本文不会提及如何使用密码或者 <code>keyboardinteractive</code>登陆的方法。实际上，我们非常不建议允许使用密码或者<code>keyboardinteractive</code> 登陆 root这种高敏感高权限账户，因为这样会使得服务器的安全性大大降低。本文在结尾也会包含如何只允许使用ssh key 登陆的配置步骤。</p></div></div><h2 id="编辑-ssh-证书">编辑 ssh 证书</h2><p>首先，你需要使用你的默认用户名登陆，然后，编辑<code>.ssh/authorized_keys</code> 文件，将文件中 <code>ssh-rsa</code>前的所有内容全部删除，如果你本地有 ssh公钥的话也可以直接将文件清空并替换为你的公钥内容。</p><p>对于 CentOS / Oracle Linux 等默认用户名为 <code>opc</code>的操作系统来说，该文件在两处储存：<code>/home/opc/.ssh/authorized_keys</code>和<code>/root/.ssh/authorized_keys</code>，所以需要确保两个文件都只有公钥内容。</p><div class="tag-plugin note" color="green"><div class="body"><strong><em>(2023-03-25 更新)</em></strong><br/> 上方的<code>/home/opc</code> 中的 <code>opc</code>即为操作系统默认用户名，对于默认用户名不是 <code>opc</code>的系统来说，你需要将该路径名改为对应默认用户名（例如 Rocky Linux系统的默认 <code>rocky</code>。<hr/><p>增加本提醒的原因是发现 Oracle 直接提供了例如 Rocky的其他系统，由于我个人偏好 Rocky，所以重新开了一个机器使用Rocky。但是发现了不同系统的默认用户名是不一样的，所以增加了该内容。</p></div></div><p>对于 Ubuntu来说，该文件在三处储存：<code>/home/ubuntu/.ssh/authorized_keys</code>、<code>/home/opc/.ssh/authorized_keys</code>和<code>/root/.ssh/authorized_keys</code>，所以需要确保三个文件都只有公钥内容。（<code>opc</code>的可以不进行更改，因为改变之后也仅仅是允许用户使用 <code>opc</code>用户名登陆，对我们的需求影响不大。）</p><h2 id="编辑-sshd-配置">编辑 sshd 配置</h2><p>然后，我们需要修改 sshd 的配置文件，使得 sshd 允许 root用户登陆。使用以下命令编辑配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>随后，找到以下两项配置，如果前面有 <code>#</code>则去掉，并全部修改为以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PermitRootLogin prohibit-password</span><br><span class="line">PasswordAuthentication no</span><br></pre></td></tr></table></figure><p>这样可以保证只能使用 ssh key 才可以登陆 root用户，而且不允许使用密码登陆任何用户，保证了服务器的安全性。</p><h2 id="重启">重启</h2><p>最后你可以使用以下命令重启 sshd 服务，使得配置生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></table></figure><p>或者你也可以直接使用以下命令重启服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p>大功告成啦！你现在可以使用 root 用户登录你的 Oracle Cloud服务器了！GL &amp; HF！</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> Linux </tag>
            
            <tag> Oracle Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LCTT 原创翻译转载] 新闻｜macOS 替代品 helloSystem 0.7.0 正在增强稳定性</title>
      <link href="/lctt/translation-linuxcn-article-15300-1/"/>
      <url>/lctt/translation-linuxcn-article-15300-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文：<a href="https://www.debugpoint.com/hellosystem-0-7-0/">macOSAlternative helloSystem (0.7.0) is moving towards stability</a> 首发：<ahref="https://linux.cn/article-15300-1.html">macOS 替代品 helloSystem0.7.0 正在增强稳定性</a> @<a href="https://linux.cn/">Linux 中国</a>作者：<ahref="https://www.debugpoint.com/hellosystem-0-7-0/">Arindam</a>译者：<a href="https://linux.cn/lctt/">LCTT</a> <ahref="https://linux.cn/lctt/Cubik65536">Cubik</a></p></blockquote><span id="more"></span><h2 id="macos-替代品-hellosystem-0.7.0-正在增强稳定性">macOS 替代品helloSystem 0.7.0 正在增强稳定性</h2><blockquote><p>随着 helloSystem 0.7.0 的发布和更多内部工作，helloSystem正在增强稳定性，为 macOS 提供一个“开源”的替代方案。</p></blockquote><p>helloSystem 是一个基于 FreeBSD 的轻量级操作系统，旨在为 macOS提供一个“开源”的替代方案。helloSystem的主要目标是提供一个易于安装和使用的，真正“开源”的 FreeBSD替代方案。此外，该团队还专注于从 macOS转换过来的用户，他们可以舒适的使用类似的桌面，而不会受到系统锁定或 Linux发行版的复杂性的影响。</p><p>考虑到 BSD系统中的硬件支持，开发这样的操作系统需要时间。团队正在努力从零创建一个桌面- “hellodesktop”。用 C++ 编写的 hellodesktop 和其他改进正在进行中。</p><figure><imgsrc="https://www.debugpoint.com/wp-content/uploads/2022/11/helloSystem-0.7.0-Desktop.jpg"alt="helloSystem 0.7.0 桌面" /><figcaption aria-hidden="true">helloSystem 0.7.0 桌面</figcaption></figure><h3 id="hellosystem-0.7.0">helloSystem 0.7.0</h3><p>在 2021 年底，该团队发布了最新一个稳定版本，基于 FreeBSD 13.0 的 <ahref="https://github.com/helloSystem/ISO/releases/tag/r0.7.0">helloSystem0.7.0</a>，并且目前正在将系统移植到 FreeBSD 13.1 和 14 版本。</p><p>除此之外，一些新功能也可以在系统中工作了；这是一个总览：</p><ul><li>由 FreeBSD 13.0 驱动</li><li>通过更新的启动时间和压缩的 UFS 文件系统改进的<ruby>现场介质<rt>LiveMedia</rt></ruby></li><li>将 ISO 镜像大小减少到 800 MB，以适合 CD</li><li>与 Ventoy USB creator 兼容</li><li>支持英伟达 GPU，包括旧型号</li><li>在目标分区安装时添加了 exFAT 支持</li><li>增加了 KDE 开发的 Falkon 浏览器，附带了下载和安装 Chromium 和Firefox 的附加菜单项</li><li>系统提示音</li><li>支持通过笔记本电脑键盘的专用键控制亮度和音量</li></ul><figure><imgsrc="https://www.debugpoint.com/wp-content/uploads/2022/11/Menu-and-apps-in-helloSystem-0.7.0.jpg"alt="helloSystem 0.7.0 中的菜单与应用" /><figcaption aria-hidden="true">helloSystem 0.7.0中的菜单与应用</figcaption></figure><p>除了上述内容之外，helloSystem 0.7.0中还添加了一个新部分，以让你可以提前了解团队正在开发的功能。未来版本中将到来的一些最酷的功能包括：</p><ul><li>BSD 中的 Debian 运行时安装程序，以在 BSD 中运行 Linux应用程序！</li><li>一个独立的应用程序，用于下载应用程序。</li><li>新的更新实用程序</li></ul><p>此外，0.7.0 中还修复了一些错误并更新了翻译。</p><figure><imgsrc="https://www.debugpoint.com/wp-content/uploads/2022/11/Installing-Linux-Runtime-is-under-development.jpg"alt="安装 Linux 运行时正在开发中" /><figcaption aria-hidden="true">安装 Linux 运行时正在开发中</figcaption></figure><p>话虽如此，但它仍然需要大量的时间才能成为易于使用的 BSD 变体和 macOS的“开源”替代方案。自从我 <ahref="https://www.debugpoint.com/tag/hellosystem">首次报道</a>以来，已经在图形安装程序，桌面应用程序和错误修复方面进行了巨大的更新。我希望它在随着2023 年移植到 FreeBSD 14 之后，会变得更加主流。</p><h3 id="下载">下载</h3><p>如果你想在真实的硬件上尝试它，请先进行备份然后尝试。此外，helloSystem现在完全兼容 <ahref="https://www.debugpoint.com/tag/virtualbox">VirtualBox</a>之类的虚拟机。你可以试试。如果你在 VirtualBox 中尝试，请确保将 CPU更改为 64 位。</p><p>官方下载链接（包括 helloSystem 0.7.0 稳定版）可在 <ahref="https://github.com/helloSystem/ISO/releases">此页面</a>上找到，或者您可以使用下面的链接获取 ISO。</p><blockquote><p><strong><ahref="https://github.com/helloSystem/ISO/releases/download/r0.7.0/hello-0.7.0_0G160-FreeBSD-13.0-amd64.iso">下载helloSystem 0.7.0</a></strong></p></blockquote><p>如果你想为测试、开发或任何其他事情做出贡献，请 <ahref="https://github.com/helloSystem">访问 GitHub页面以获取详细信息</a>。</p><hr /><p>via: https://www.debugpoint.com/hellosystem-0-7-0/</p><p>作者：<a href="https://www.debugpoint.com/author/admin1/">Arindam</a>选题：<a href="https://github.com/lkxed">lkxed</a> 译者：<ahref="https://github.com/Cubik65536">Cubik65536</a> 校对：<ahref="https://github.com/wxy">wxy</a></p><p>本文由 <a href="https://github.com/LCTT/TranslateProject">LCTT</a>原创编译，<a href="https://linux.cn/">Linux 中国</a> 荣誉推出</p><hr /><h2 id="预告">预告</h2><p>另外，我最近开始尝试 <a href="https://thebrowser.company/">ArcBrowser</a>作为主要浏览器来使用，我会在接下来几天内发布一个文章讲讲第一印象，我也会尝试使用Arc 作为主要浏览器一段时间，并带来一个更完整的体验文章。</p>]]></content>
      
      
      <categories>
          
          <category> LCTT </category>
          
          <category> 转载 </category>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> helloSystem </tag>
            
            <tag> BSD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LCTT 原创翻译转载] 技术｜如何在 Ubuntu 和其他 Linux 发行版中安装 FFmpeg</title>
      <link href="/lctt/translation-linuxcn-article-15269-1/"/>
      <url>/lctt/translation-linuxcn-article-15269-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文：<a href="https://www.debugpoint.com/install-ffmpeg-ubuntu/">Howto Install FFmpeg in Ubuntu and Other Linux</a> 首发：<ahref="https://linux.cn/article-15269-1.html">如何在 Ubuntu 和其他 Linux发行版中安装 FFmpeg</a> @<a href="https://linux.cn/">Linux 中国</a>作者：<ahref="https://www.debugpoint.com/install-ffmpeg-ubuntu/">Arindam</a>译者：<a href="https://linux.cn/lctt/">LCTT</a> <ahref="https://linux.cn/lctt/Cubik65536">Cubik</a></p></blockquote><span id="more"></span><h2 id="如何在-ubuntu-和其他-linux-发行版中安装-ffmpeg">如何在 Ubuntu和其他 Linux 发行版中安装 FFmpeg</h2><p><imgsrc="https://img.linux.net.cn/data/attachment/album/202211/19/162251wxt2kaajvvayar8c.jpg" /></p><blockquote><p>本教程讲述了在 Ubuntu 和其他 Linux 系统中安装 FFmpeg 所需的步骤。</p></blockquote><p>FFmpeg 是一系列用于操作多媒体文件的库和软件程序。整个 FFmpeg是一组强大的库，允许你转换、推流和操作音频和视频文件。许多前端 Linux应用程序将其用作后端并依赖它。例如，屏幕录制应用程序可能需要 FFmpeg将录制的流转换为 Gif 图像。</p><p>主流的应用程序和服务，如 VLC媒体播放器、YouTube、Blender、Kodi、Shotcut 和 Handbrake 等，都使用FFmpeg。</p><blockquote><p>趣事：NASA 2020 年发射的毅力号火星探测器使用 FFmpeg完成和处理图像和视频，然后将其发送回地球！</p></blockquote><h3 id="关于-ffmpeg-包">关于 FFmpeg 包</h3><p><a href="https://ffmpeg.org/">FFmped</a>是一个强大的命令行工具。它支持 Linux、Windows 和macOS，并支持多种架构。它是用 C和汇编编写的，提供了强大的性能和跨平台实用性。</p><h4 id="核心">核心</h4><p>FFmpeg的核心是命令行实用程序。它们可以在命令行上使用，也可以从任何编程语言中调用。例如，你可以从Shell 程序、Python 脚本等程序中使用它们。</p><ul><li><code>ffmpeg</code>：用于转换音频和视频流，包括来自 TV卡等实时流的源</li><li><code>ffplay</code>：此软件包中捆绑的媒体播放器，用于播放媒体</li><li><code>ffprobe</code>：命令行工具，用于显示媒体信息 - 可以以txt、csv、xml、json 格式输出</li></ul><h3 id="ffmpeg-安装">FFmpeg 安装</h3><p>在 Ubuntu 和其他 Linux 发行版中安装 FFmpeg很容易。打开终端并运行以下命令以安装。</p><h4 id="ubuntu-以及相似的发行版">Ubuntu 以及相似的发行版</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ffmpeg</span><br></pre></td></tr></table></figure><h4 id="fedora">Fedora</h4><p>对于 Fedora Linux，你需要添加 <ahref="https://www.debugpoint.com/2020/07/enable-rpm-fusion-fedora-rhel-centos/">RPMFusion repo</a>。Fedora 官方仓库没有 FFmpeg 包。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install ffmpeg</span><br></pre></td></tr></table></figure><h4 id="arch-linux">Arch Linux</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S ffmpeg</span><br></pre></td></tr></table></figure><p>在安装完成后，你可以使用以下命令验证安装。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg --version</span><br></pre></td></tr></table></figure><figure><imgsrc="https://www.debugpoint.com/wp-content/uploads/2022/06/FFmpeg-installed-in-Ubuntu-Linux.jpg"alt="Ubuntu Linux 中安装的 FFmpeg" /><figcaption aria-hidden="true">Ubuntu Linux 中安装的 FFmpeg</figcaption></figure><h3 id="示例ffmpeg-的基础用法">示例：ffmpeg 的基础用法</h3><p>首先，让我给你一个简单的例子。考虑以下示例。它只是将 mp4 文件转换为mkv 文件。</p><p>1、转换一个基本的视频文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i big_buck_bunny.mp4 big_buck_bunny.mkv</span><br></pre></td></tr></table></figure><p>当然，这是最简单的方法，但它不完整，因为它没有转换所需的视频文件的比特率、分辨率和其他属性。</p><p>2、转换一个音频文件</p><p>其次，你可以使用类似的命令转换音频文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i sunny_day.ogg sunny_day.mp3</span><br></pre></td></tr></table></figure><p>3、使用音频和视频编解码器转换</p><p>最后，以下示例可以使用指定的编解码器转换视频文件。参数<code>-c</code> 带有的 <code>a</code> 或 <code>v</code>分别定义音频和视频。下面的命令使用 <code>libvpx</code> 视频和<code>libvorbis</code> 音频编解码器进行转换。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i big_buck_bunny.mp4 -c:v libvpx -c:a libvorbis big_buck_bunny.webm</span><br></pre></td></tr></table></figure><h3id="如何找出系统中可用的编解码器编码器和解码器">如何找出系统中可用的编解码器，编码器和解码器？</h3><h4 id="列出所有编解码器">列出所有编解码器</h4><p>要列出所有可用的编解码器，请运行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -codecs</span><br></pre></td></tr></table></figure><p>该命令列出了所有可用的编解码器及其功能，是否支持解码或编码等。此外，它们根据下表的位置进行标识。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">D..... = Decoding supported</span><br><span class="line">.E.... = Encoding supported</span><br><span class="line">..V... = Video codec</span><br><span class="line">..A... = Audio codec</span><br><span class="line">..S... = Subtitle codec</span><br><span class="line">...I.. = Intra frame-only codec</span><br><span class="line">....L. = Lossy compression</span><br><span class="line">.....S = Lossless compression</span><br></pre></td></tr></table></figure><figure><imgsrc="https://www.debugpoint.com/wp-content/uploads/2022/06/FFmpeg-Codec-list.jpg"alt="FFmpeg 编解码器列表" /><figcaption aria-hidden="true">FFmpeg 编解码器列表</figcaption></figure><h4 id="列出所有编码器">列出所有编码器</h4><p>通过以下命令列出所有编码器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -encoders</span><br></pre></td></tr></table></figure><h4 id="列出所有解码器">列出所有解码器</h4><p>同样的，你可以通过以下命令获取解码器列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -decoders</span><br></pre></td></tr></table></figure><h4 id="详细信息">详细信息</h4><p>你还可以使用参数 <code>-h</code>获取编码器或解码器的更多详细信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -h decoder=mp3</span><br></pre></td></tr></table></figure><h3 id="总结">总结</h3><p>我希望你学会了 FFmpeg 和它的命令的基础知识。你可以通过 <ahref="https://ffmpeg.org/documentation.html">官方文档</a>了解更多有关该程序的信息。</p><hr /><p>via: https://www.debugpoint.com/install-ffmpeg-ubuntu/</p><p>作者：<a href="https://www.debugpoint.com/author/admin1/">Arindam</a>选题：<a href="https://github.com/lkxed">lkxed</a> 译者：<ahref="https://github.com/Cubik65536">Cubik65536</a> 校对：<ahref="https://github.com/wxy">wxy</a></p><p>本文由 <a href="https://github.com/LCTT/TranslateProject">LCTT</a>原创编译，<a href="https://linux.cn/">Linux中国</a> 荣誉推出</p>]]></content>
      
      
      <categories>
          
          <category> LCTT </category>
          
          <category> 转载 </category>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> FFmpeg </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LCTT 原创翻译转载] 分享｜学习 Python：我最喜欢的 7 个资源</title>
      <link href="/lctt/translation-linuxcn-article-15267-1/"/>
      <url>/lctt/translation-linuxcn-article-15267-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文：<ahref="https://opensource.com/article/22/11/learn-python">Learn Python: 7of my favorite resources</a> 首发：<ahref="https://linux.cn/article-15267-1.html">学习 Python：我最喜欢的 7个资源</a> @<a href="https://linux.cn/">Linux 中国</a> 作者：<ahref="https://opensource.com/article/22/11/learn-python">Don Watkins</a>译者：<a href="https://linux.cn/lctt/">LCTT</a> <ahref="https://linux.cn/lctt/Cubik65536">Cubik</a></p></blockquote><span id="more"></span><h2 id="学习-python我最喜欢的-7-个资源">学习 Python：我最喜欢的 7个资源</h2><div class="tag-plugin image"><div class="image-bg"><img src="https://img.linux.net.cn/data/attachment/album/202211/19/105720mfgygbzyg3ccttce.jpg" fancybox="true"/></div></div><blockquote><p>这些年来，我通过这些开源资源提高了我的 Python 技能。</p></blockquote><p>我最近决定进一步学习Python，以便提高我的教学技能，拓宽我的学生的视野。在这个过程中，我发现了这些优秀的资源，让我学习新的代码，并提高了对Python 的整体理解。</p><h3 id="教孩子学编程-python-语言版">1、《教孩子学编程 Python语言版》</h3><p>我的 Python 之旅大约是 7 年前开始的，当时我发现了 Apple LOGO 和Python 中的 <ahref="https://opensource.com/article/21/9/logo-python-turtle">Turtle模块</a> 之间的联系。当时使用的 Linux 计算机的默认 Python 版本为 Python2.7，我很快发现我想使用 Python 3。我成功地安装了它，并开始使用 Turtle模块编写一些简单的程序。在阅读 Dr. Bryson Payne 的 《<ahref="https://opensource.com/education/15/9/review-bryson-payne-teach-your-kids-code">教孩子学编程Python 语言版</a>》 之后，我意识到 Python 不仅仅是 Turtle。那时我安装了<a href="https://docs.python.org/3/library/idle.html">IDLE</a>。</p><h3 id="idle">2、IDLE</h3><p>在使用 IDLE工作的过程中，交互式界面优化了我的体验，并让我有足够的信心来考虑向学生教授Python。我志愿帮助我社区中的一群在家学习的孩子，很快我发现自己在教授一个有十六个孩子的班级！我很高兴他们的父母同意帮助我，否则我想我会被压垮。这个经历激发了我学习更多的欲望，以便我可以教授更多。</p><h3 id="mu-编辑器">3.、Mu 编辑器</h3><p>2018 年春天，我参加了 PyConUS。我听了一场由中学老师 <ahref="https://us.pycon.org/2018/speaker/profile/194/">NicholasTollervey</a> 主讲的演讲，他为学龄前儿童编写了一个 Python 开发环境。<ahref="https://opensource.com/article/20/9/teach-python-mu">Mu 编辑器</a>内置了一个可以帮助我找到代码中的错误的<ruby>质检工具<rt>Linter</rt></ruby>。Mu帮助我提高了我的编码技能，我也能够与学生分享这些技能，他们也从中受益。</p><p>我的自信和经验增长后，我希望与更多的学生分享 Python之旅。我与其他人合作撰写了一个申请书，以教授一个使用树莓派 4 和 Python的课程。疫情打断了这个计划。在此期间，树莓派基金会发布了树莓派 400。2021年春天，我使用了前一年开发的材料和一个来自当地图书馆的慷慨的资助，来 <ahref="https://opensource.com/article/21/6/teach-python-raspberry-pi">教授两组</a>学生如何编程。这个活动非常成功并在今年再次举办。</p><h3 id="codium">4、Codium</h3><p>几年前，我了解到微软的 VS Code 是一个可以在 Linux上使用的开源代码编辑器。我最近才了解到，如何在 VS Code 中配置和使用Python 虚拟环境。我的问题在一篇 <ahref="https://opensource.com/article/20/10/venv-python">关于虚拟环境的文章</a>中得到了解答，这让我可以知道如何在 Linux 计算机上设置和配置 Python虚拟环境。大约在同一时间，我发现了 <ahref="https://opensource.com/article/22/11/python-vs-code-codium">Codium</a>，一个围绕VS Code 构建的社区项目。</p><p>现在我希望与我的学生分享 VS Codium 的体验，并让他们对 Python的理解不再局限于 Turtle模块。这种学习的热情让我寻找开源且可以在互联网上随意获得的教学资源。</p><h3 id="python-编程练习简单解释">5、《Python 编程练习，简单解释》</h3><p>《<a href="https://automatetheboringstuff.com/#toc">Python编程快速上手 让繁琐工作自动化</a>》这本书是我最喜欢的一本书。现在，作者已经发布了 《<ahref="https://inventwithpython.com/pythongently/">Python编程练习，简单解释</a>》。这两本书都可以免费在线阅读，并且都采用了知识共享许可证。</p><h3 id="每个人都可以使用-python">6、《每个人都可以使用 Python》</h3><p>Dr. Charles Severance 在 2017 年发布了 《<ahref="https://www.py4e.com/lessons">每个人都可以使用Python</a>》，我非常推荐这本书。他为像我这样的有抱负的程序员提供了简短的课程。课程的代码可以在<a href="https://github.com/csev/py4e">GitHub</a>上找到，所以你可以下载它并在自己的计算机或学校网络上安装它。</p><h3 id="python-视频">7. Python 视频</h3><p>最近，我了解到 <a href="https://opensource.com/users/jlacroix">JayLaCroix</a> 在 YouTube 上有一系列精彩的视频，其中包括 28 个免费视频，从Python 基础开始，涵盖了 <ahref="https://youtube.com/playlist?list=PLT98CRl2KxKGIazPd2nQEPbG7sQpT8LEj">Python编程</a> 的全面介绍。最重要的是，他使用的是 Linux计算机，因此他的课程特别适合 Linux编程环境。这些视频的其中一个收获是学习如何使用 <ahref="https://opensource.com/article/20/12/gnu-nano">nano</a>作为编程环境，它默认情况下包含在大多数 Linux 发行版中。</p><h3 id="你的学习之路">你的学习之路</h3><p>此处提到的这七个资源帮助我成长为一名程序员，它们都是开源的并可以与其他人分享。你是如何提高编程技能的？你有什么要分享的吗？在评论中告诉我们。</p><hr /><p>via: https://opensource.com/article/22/11/learn-python</p><p>作者：<a href="https://opensource.com/users/don-watkins">DonWatkins</a> 选题：<a href="https://github.com/lkxed">lkxed</a> 译者：<ahref="https://github.com/Cubik65536">Cubik65536</a> 校对：<ahref="https://github.com/wxy">wxy</a></p><p>本文由 <a href="https://github.com/LCTT/TranslateProject">LCTT</a>原创编译，<a href="https://linux.cn/">Linux中国</a> 荣誉推出</p>]]></content>
      
      
      <categories>
          
          <category> LCTT </category>
          
          <category> 转载 </category>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 学习 </tag>
            
            <tag> 资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LCTT 原创翻译转载] 技术｜在 VS Code 和 Codium 中编写 Python 程序</title>
      <link href="/lctt/translation-linuxcn-article-15261-1/"/>
      <url>/lctt/translation-linuxcn-article-15261-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文：<ahref="https://opensource.com/article/22/11/python-vs-code-codium">UsingPython in VS Code and Codium</a> 首发：<ahref="https://linux.cn/article-15261-1.html">在 VS Code 和 Codium 中编写Python 程序</a> @<a href="https://linux.cn/">Linux 中国</a> 作者：<ahref="https://opensource.com/article/22/11/python-vs-code-codium">DonWatkins</a> 译者：<a href="https://linux.cn/lctt/">LCTT</a> <ahref="https://linux.cn/lctt/Cubik65536">Cubik</a></p></blockquote><span id="more"></span><h2 id="在-vs-code-和-codium-中编写-python-程序">在 VS Code 和 Codium中编写 Python 程序</h2><p><imgsrc="https://img.linux.net.cn/data/attachment/album/202211/17/100909py38rj0tqxlyrq0t.jpg" /></p><blockquote><p>如果你正在寻找一个优秀的、通用的、开源的、带有 Python集成的代码编辑器，那么你可以尝试一下 Codium。</p></blockquote><p>在过去几年内，我有幸和中学生们一起，并带他们入门 <ahref="https://opensource.com/article/22/8/math-python-raspberry-pi">Python开发</a> 和树莓派400。这一切都很有趣，树莓派对于学生和我来说都是一个很好的平台。我们使用了<a href="https://codewith.mu/">Code withMu</a>，并且一切都很成功。我们的 Python技能随着经验的增长而增长，因此最近我开始寻找给这些学生提供更多东西的方法。</p><p>我参与了一个 Python 课程并在课程中接触了微软的 Visual StudioCode。我在课程中学到了很多关于如何为 Python 设置虚拟环境，以及如何为Python 编程配置 VS Code 的知识。在学习过程中，我也认识了 <ahref="https://opensource.com/article/20/6/open-source-alternatives-vs-code">Codium</a>，它基本上是没有微软品牌和遥测的VS Code。</p><p>如果你正在寻找一个优秀的、通用的、开源的、带有 Python集成的代码编辑器，那么你可以尝试一下 Codium。下面是我在 Linux 系统上为Python 设置 Codium 的方法。</p><h3 id="在-linux-上安装或更新-python">在 Linux 上安装或更新 Python</h3><p>首先，确保你正在运行最新版本的Python。你可以使用你的软件包管理器来完成这项工作。在 Debian 和基于Debian 的系统上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install python3-pip</span><br></pre></td></tr></table></figure><p>在 Fedora、CentOS、Mageia、OpenMandriva 和类似的系统上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dnf update python3</span><br></pre></td></tr></table></figure><p>在某些系统上，你可能还需要安装创建 Python 虚拟环境的软件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install python3.10-venv</span><br></pre></td></tr></table></figure><h3 id="安装-codium">安装 Codium</h3><p>接下来，在你的电脑上 <ahref="https://github.com/VSCodium/vscodium/releases">安装 Codium</a>。在Linux 上，你可以下载一个包并使用你的包管理器安装它，或者 <ahref="https://flathub.org/apps/details/com.vscodium.codium">使用Flatpak</a>。</p><p>在安装好 Codium 之后，打开你的应用程序或活动菜单，输入<code>code</code> 以启动它。</p><h3 id="安装-vs-code-python-扩展">安装 VS Code Python 扩展</h3><p>代码其实不是什么特别的东西。它只是一些其他应用程序（编译器或运行时）解释的纯文本。你可以在Codium 中编写 Python 代码而不需要特殊的扩展。但是，有一个 Python扩展可以为你带来一些方便的功能。</p><p>点击“<ruby>文件<rt>File</rt></ruby>”菜单，选择“<ruby>首选项<rt>Preferences</rt></ruby>”，然后选择“<ruby>扩展<rt>Extensions</rt></ruby>”。在“<ruby>扩展<rt>Extensions</rt></ruby>”面板中，搜索Python IntelliSense 扩展。</p><figure><imgsrc="https://opensource.com/sites/default/files/2022-10/codium-extension-python.webp"alt="VS Code 和 Codium 都有一个扩展管理器，它会在页面左侧打开，允许你安装附加模块" /><figcaption aria-hidden="true">VS Code 和 Codium都有一个扩展管理器，它会在页面左侧打开，允许你安装附加模块</figcaption></figure><p>你已经在 Codium 中设置了 Python。剩下的就是把它用起来。</p><h3 id="为-vs-code-或-codium-设置虚拟环境">为 VS Code 或 Codium设置虚拟环境</h3><p>我们可以创建一个项目目录，并将其添加到 Codium中，这样在工作时，你创建和保存的文件都将默认保存到活动项目目录。这是一种快速的管理方式，可以让你不必经常点击文件保存和打开对话框。</p><p>在你创建一个虚拟 Python 环境作为工作目录时，Codium会检测到它（因为你已经安装了 Python扩展）。当你激活一个虚拟环境文件夹作为活动项目目录时，Codium会自动运行使用虚拟环境所需的激活代码。</p><p>要为 Python 创建一个虚拟环境，请打开终端并输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 -m venv ~/PythonCoding</span><br></pre></td></tr></table></figure><h3 id="添加项目目录">添加项目目录</h3><p>在 Codium中，点击“<ruby>文件<rt>File</rt></ruby>”菜单，选择“<ruby>将文件夹添加到工作区<rt>AddFolder to Workspace</rt></ruby>”。打开你刚刚设置的虚拟环境（对我来说，是<code>/home/don/PythonCoding</code>）。</p><p>现在你已经准备好写一些 Python 代码了！在你的工作区中创建一个新的Python 文件并插入一些基本代码。当你输入时，你可能会注意到，Codium会为环境包含的 Python 模块提供自动补齐建议。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">print(&quot;Codium running Python &quot; + sys.version)</span><br></pre></td></tr></table></figure><p>现在点击 Codium窗口右上角的“运行”按钮。这会在窗口底部打开一个控制台面板显示你的代码的输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(PythonCode) sh-5.1$ /home/bogus/PythonCode/bin/python</span><br><span class="line">/home/bogus/PythonCode/app.py</span><br><span class="line">Codium running Python 3.10.6 (main…)[GCC 12.1.0]</span><br><span class="line">(PythonCode) sh-5.1$</span><br></pre></td></tr></table></figure><p>就像你从输出中看到的，Codium 在 <code>PythonCode</code>环境中运行，并成功运行了你的 Python 代码。</p><h3 id="codium-和-python">Codium 和 Python</h3><p>使用 Codium 编写 Python 代码比以往任何时候都更容易，但 Python 并不是Codium 支持的唯一语言。你可以轻松地从 <ahref="https://open-vsx.org/">Open VSX Registry</a>中找到并安装其他扩展，这是一个中立的开源 VS Code 扩展 “市场”。</p><p>Codium的界面比一些基本的编辑器更复杂，但它有我在学习过程中所需要的东西。如果你需要一个更专业的编辑器，或者你想从当前的编辑器切换到新的编辑器，那么试试Codium 吧。</p><hr /><p>via: https://opensource.com/article/22/11/python-vs-code-codium</p><p>作者：<a href="https://opensource.com/users/don-watkins">DonWatkins</a> 选题：<a href="https://github.com/lkxed">lkxed</a> 译者：<ahref="https://github.com/Cubik65536">Cubik65536</a> 校对：<ahref="https://github.com/wxy">wxy</a></p><p>本文由 <a href="https://github.com/LCTT/TranslateProject">LCTT</a>原创编译，<a href="https://linux.cn/">Linux中国</a> 荣誉推出</p>]]></content>
      
      
      <categories>
          
          <category> LCTT </category>
          
          <category> 转载 </category>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> VS Code </tag>
            
            <tag> VSCodium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LCTT 原创翻译转载] 新闻｜Kate 文本编辑器增加了四个非常棒的新功能</title>
      <link href="/lctt/translation-linuxcn-article-15239-1/"/>
      <url>/lctt/translation-linuxcn-article-15239-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文：<ahref="https://news.itsfoss.com/kate-editor-22-12-features/">Kate Editoris Getting Four New Awesome Features</a> 首发：<ahref="https://linux.cn/article-15124-1.html">Kate文本编辑器增加了四个非常棒的新功能</a> @<ahref="https://linux.cn/">Linux 中国</a> 作者：<ahref="https://news.itsfoss.com/kate-editor-22-12-features/">SouravRudra</a> 译者：<a href="https://linux.cn/lctt/">LCTT</a> <ahref="https://linux.cn/lctt/Cubik65536">Cubik</a></p></blockquote><span id="more"></span><h2 id="kate-文本编辑器增加了四个非常棒的新功能">Kate文本编辑器增加了四个非常棒的新功能</h2><blockquote><p>这个由 KDE 开发的功能丰富的文本编辑器正在变得更好和更有用！</p></blockquote><figure><imgsrc="https://news.itsfoss.com/content/images/size/w1200/2022/11/kate-4-new-features.jpg"alt="Kate 文本编辑器获得了四个非常棒的新功能" /><figcaption aria-hidden="true">Kate文本编辑器获得了四个非常棒的新功能</figcaption></figure><p><a href="https://kate-editor.org/">Kate 文本编辑器</a>是一个不断发展和强大的开源文本编辑器，它可以作为微软的 Visual StudioCode 应用程序的替代品。</p><p>它可以在 Linux、Windows 和 macOS 上使用。</p><p>这个代码编辑器在 2021 年进行了重大升级，这可能使它成为了 KDE对微软产品的回应。</p><p>在即将到来的 Kate 和 KWrite 22.12版本上，他们的目标是添加许多非常有用的功能。</p><p>来简单看看我们可以从 Kate 中期待什么。</p><h3 id="kate-editor-的新增功能">🆕 Kate Editor 的新增功能</h3><p>如果你读了 <a href="https://pointieststick.com">Nate 的博客</a> 了解KDE 的改进，你可能已经知道了 KDE Plasma 和应用程序即将获得的升级。</p><p>但是，我想强调一些 Kate 22.12 将会带来的令人激动的新功能：</p><ul><li>对 Qt 部件的支持</li><li>更新的欢迎页面</li><li>Git 差异查看器</li><li>配置标签页</li><li>剪切板历史</li></ul><h4 id="欢迎页面">欢迎页面</h4><figure><imgsrc="https://news.itsfoss.com/content/images/2022/11/Kate_22.12_Welcome.png"alt="kate 22.12 欢迎页面" /><figcaption aria-hidden="true">kate 22.12 欢迎页面</figcaption></figure><p>和许多其他 <ahref="https://news.itsfoss.com/content/images/2022/11/Kate_22.12_GitDiff-1.png">KDE应用程序</a> 一样，Kate现在将显示一个欢迎页面，该页面将欢迎用户并显示创建或打开文件、启动新会话、查看最近的文档等选项。</p><p>对于不喜欢这个页面的用户，欢迎页面上将提供一个选项，以在新窗口上禁用欢迎页面。</p><h4 id="git-差异查看器">Git 差异查看器</h4><figure><imgsrc="https://news.itsfoss.com/content/images/2022/11/Kate_22.12_GitDiff-1.png"alt="kate 22.12 git 差异支持" /><figcaption aria-hidden="true">kate 22.12 git 差异支持</figcaption></figure><p>Kate 终于增加了对显示 git-diff的支持；用户将能够比较他们的代码以检查差异，并找到那些令人讨厌的、会导致他们的应用程序无法正常运行错误。</p><p>用户也可以从多种视图中进行选择，例如统一视图、并排视图和原始视图。</p><h4 id="新的剪贴板历史粘贴对话框">新的剪贴板历史粘贴对话框</h4><figure><imgsrc="https://news.itsfoss.com/content/images/2022/11/Kate_22.12_Clipboard_Hist-1.png"alt="kate 22.12 剪贴板历史" /><figcaption aria-hidden="true">kate 22.12 剪贴板历史</figcaption></figure><p>Kate现在添加了一个新的对话框，在粘贴的时候显示用户剪贴板内容的列表。</p><p>当你在多行代码之间切换，而又不想丢失重要的内容时，这可能会很有用。</p><h4 id="配置标签页">配置标签页</h4><figure><imgsrc="https://news.itsfoss.com/content/images/2022/11/Kate_22.12_Config-1.png"alt="kate 22.12 配置标签页" /><figcaption aria-hidden="true">kate 22.12 配置标签页</figcaption></figure><p>Kate也将添加一个配置标签页，让用户可以更改重要的设置，并添加了一个搜索栏，使用户可以快速查找特定的设置。</p><h4 id="其他变更和改进">🛠️ 其他变更和改进</h4><p>Kate 22.12 将带来的其他值得注意的改进包括：</p><ul><li>优化的状态栏</li><li>对构建插件的改进</li><li>可移动的侧边栏按钮</li><li>对窗口处理的改进</li></ul><p>Kate 正在成为微软的 <a href="https://code.visualstudio.com/">VisualStudio Code</a> 的合适替代品，并且自 2021年大规模重构以来已经取得了很大的进步。</p><p>在 Kate 的 <ahref="https://kate-editor.org/post/2022/2022-10-31-treats-for-kate/">官方博客文章</a>中，你可以了解更多关于这些变化的信息，并看看它们实际是怎么工作的。</p><p>💬 你期待 Kate 22.12 的发布吗？还是更喜欢 VS Code？</p><hr /><p>via: https://news.itsfoss.com/kate-editor-22-12-features/</p><p>作者：<a href="https://news.itsfoss.com/author/sourav/">SouravRudra</a> 选题：<a href="https://github.com/lkxed">lkxed</a> 译者：<ahref="https://github.com/Cubik65536">Cubik65536</a> 校对：<ahref="https://github.com/wxy">wxy</a></p><p>本文由 <a href="https://github.com/LCTT/TranslateProject">LCTT</a>原创编译，<a href="https://linux.cn/">Linux中国</a> 荣誉推出</p>]]></content>
      
      
      <categories>
          
          <category> LCTT </category>
          
          <category> 转载 </category>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> LinuxCN </tag>
            
            <tag> KDE </tag>
            
            <tag> Kate 编辑器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022 年 10 月总结</title>
      <link href="/2022-10-MonthJournal/"/>
      <url>/2022-10-MonthJournal/</url>
      
        <content type="html"><![CDATA[<p>2022 年 10 月的月总结来了，让我们开始吧～</p><span id="more"></span><h2 id="lctt">LCTT</h2><p>在十月初，我偶然发现了 <ahref="https://github.com/LCTT/TranslateProject">LCTT</a>这个项目，于是翻译了几篇文章。但是由于我同时还有很多东西在做，所有并没有稳定进行翻译，而是仅仅翻译了3 篇。我在之后也会继续进行翻译，也尽量慢慢提升我的翻译质量。</p><h2 id="remotemc">RemoteMC</h2><p>咕了～</p><p>对，十月我基本没有做对 RemoteMC系列项目，而且目前没有什么对内容的想法。我计划在接下来一段时间（可能是几个月）内完成API 文档的撰写并慢慢进行 RemoteMC-QQ 的开发。</p><h2 id="期末考试">期末考试</h2><p>我的第一学期结尾是十月底，所以考了不少的试。</p><h2 id="十一月安排">十一月安排</h2><p>十一月应该是各个项目慢慢恢复开发的时候，尤其是上一个周报里提到的解释器与编译器。那么我们下个月总结再见！</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LCTT 原创翻译转载] 新闻｜一个全新的用于英伟达显卡的开源 Vulkan 驱动已经准备好测试了！</title>
      <link href="/lctt/translation-linuxcn-article-15124-1/"/>
      <url>/lctt/translation-linuxcn-article-15124-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文：<a href="https://news.itsfoss.com/nvidia-nvk/">A New OpenSource Vulkan Driver for NVIDIA Graphics is Ready to Test!</a> 首发：<ahref="https://linux.cn/article-15124-1.html">一个全新的用于英伟达显卡的开源Vulkan 驱动已经准备好测试了！</a> @<a href="https://linux.cn/">Linux中国</a> 作者：<a href="https://news.itsfoss.com/nvidia-nvk/">SouravRudra</a> 译者：<a href="https://linux.cn/lctt/">LCTT</a> <ahref="https://linux.cn/lctt/Cubik65536">Cubik</a></p></blockquote><span id="more"></span><h2id="一个全新的用于英伟达显卡的开源-vulkan-驱动已经准备好测试了">一个全新的用于英伟达显卡的开源Vulkan 驱动已经准备好测试了！</h2><blockquote><p>为英伟达显卡开发的一个全新的开源驱动正在开发中！这里有一些好的进展......</p></blockquote><figure><imgsrc="https://news.itsfoss.com/content/images/size/w1200/2022/10/opensource-native-vulkan-gpu-driver-for-nvidia.png"alt="一个全新的用于英伟达显卡的开源 Vulkan 驱动已经准备好测试了！" /><figcaption aria-hidden="true">一个全新的用于英伟达显卡的开源 Vulkan驱动已经准备好测试了！</figcaption></figure><p><strong>NVK</strong> 是一个全新的用于英伟达显卡的开源 Vulkan驱动，它的目标是成为新的主流显卡驱动。</p><p>这成为可能的部分原因是因为英伟达开源了数据中心 GPU 和消费级GPU（GTX/RTX）的 GPU 内核模块。</p><blockquote><p><strong><ahref="https://news.itsfoss.com/nvidia-open-source-linux/">英伟达在改善其GPU 在 Linux 上的体验方面迈出了重要的一步</a></strong></p></blockquote><p>它使开发人员能够改进开源驱动程序并启用比以前更多的功能。</p><p>让我们来看看 NVK 可以提供什么。</p><h3 id="新的适用于英伟达-gpu-的-nvk-开源驱动程序">新的适用于英伟达 GPU的 NVK 开源驱动程序</h3><p><strong>Jason Ekstrand</strong>（Collabora 的工程师）和 Red Hat的其他人已经在过去几个月里编写了 NVK 的代码。</p><p>他们可以利用 Turing 系列显卡提供的统一固件 BLOB，然后在其上构建Vulkan 支持。</p><p><strong>但是，不是已经有了 nouveau 开源驱动程序了吗？</strong></p><p>NVK 与其他的 nouveau 驱动非常不同，因为它是从头开始编写的。</p><p>nouveau是一个主要的英伟达显卡的开源驱动程序，已经年久失修了，试图在它的基础上构建是一个很多人都无法承担的任务。</p><p>当然，它是由有很多才华的工程师开发的，但是缺乏公司的支持和贡献者的影响了它的发展。</p><p><strong>NVK 旨在克服这些问题，同时专注于对 Turing 系列及更高版本 GPU的支持。</strong></p><p>由于内核的开发方式，对于 Kepler、Maxwell 和 Pascal 等较旧的 GPU的支持可能不会很容易地加入NVK。它也许极大地依赖于新内核，从而只支持较新的 GPU。</p><p>同时，nouveau 内核接口与 Vulkan 不兼容，阻碍了对较旧 GPU 的支持。</p><p>但是，仍然有进一步测试的空间，这可能会让 NVK 可以支持较旧的 GPU。</p><p>当然，随着更多的社区贡献，NVK 可以通过增加额外的功能和 GPU支持来改进。</p><h3 id="如何尝试它">如何尝试它？</h3><p>NVK 目前处于非常初级的状态，有很多功能缺失，并且正在持续开发中。</p><p><strong>所以，它还不适合让所有类型的用户尝试。</strong></p><p>你还是可以通过拉取 freedesktop.org 上的 <ahref="https://gitlab.freedesktop.org/nouveau/mesa">nouveau/mesa 项目</a>的 nvk/main 分支并构建它来尝试它。</p><p>如果你想的话，你也可以通过贡献到该项目下的 <ahref="https://gitlab.freedesktop.org/nouveau/mesa/-/tree/nvk/main/">nvk/main分支</a> 来帮助 NVK 的开发。</p><p>对于更多的技术信息，你可以参考 <ahref="https://www.collabora.com/news-and-blog/news-and-events/introducing-nvk.html">官方公告</a>。</p><h3 id="未来潜力">未来潜力</h3><p>NVK 有很多潜力，尤其是与老化的 <ahref="https://nouveau.freedesktop.org/">nouveau</a>图形驱动套件相比。</p><p>这可以为 nouveau 带来一个合适的继承者，同时为 Linux提供一个带有很多功能的、主流的开源英伟达图形驱动套件。</p><p>💬 <em>你对此有什么看法？你认为这最终能够实现 nouveau驱动程序所未能实现的吗？</em></p><hr /><p>via: https://news.itsfoss.com/nvidia-nvk/</p><p>作者：<a href="https://news.itsfoss.com/author/sourav/">SouravRudra</a> 选题：<a href="https://github.com/lkxed">lkxed</a> 译者：<ahref="https://github.com/Cubik65536">Cubik65536</a> 校对：<ahref="https://github.com/wxy">wxy</a></p><p>本文由 <a href="https://github.com/LCTT/TranslateProject">LCTT</a>原创编译，<a href="https://linux.cn/">Linux中国</a> 荣誉推出</p>]]></content>
      
      
      <categories>
          
          <category> LCTT </category>
          
          <category> 转载 </category>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> LinuxCN </tag>
            
            <tag> Pop!_OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LCTT 原创翻译转载] 新闻｜System 76 将不会发布 Pop!_OS 22.10 Linux 发行版</title>
      <link href="/lctt/translation-linuxcn-article-15116-1/"/>
      <url>/lctt/translation-linuxcn-article-15116-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文：<a href="https://news.itsfoss.com/no-pop-os-21-10/">System76Won't Release Pop!_OS 22.10 Linux Distro: Here's Why!</a> 首发：<ahref="https://linux.cn/article-15116-1.html">System 76 将不会发布Pop!_OS 22.10 Linux 发行版</a> @<a href="https://linux.cn/">Linux中国</a> 作者：<ahref="https://news.itsfoss.com/no-pop-os-21-10/">Sourav Rudra</a>译者：<a href="https://linux.cn/lctt/">LCTT</a> <ahref="https://linux.cn/lctt/Cubik65536">Cubik</a></p></blockquote><span id="more"></span><h2 id="system-76-将不会发布-pop_os-22.10-linux-发行版">System 76将不会发布 Pop!_OS 22.10 Linux 发行版</h2><blockquote><p>Pop!_OS 22.10 将不会发布。所以，你将无法使用 GNOME 43……这里是原因。</p></blockquote><figure><imgsrc="https://news.itsfoss.com/content/images/size/w1200/2022/09/no-pop-os-22-10-release.png"alt="System 76 将不会发布 Pop!_OS 22.10 Linux 发行版：这就是为什么！" /><figcaption aria-hidden="true">System 76 将不会发布 Pop!_OS 22.10 Linux发行版：这就是为什么！</figcaption></figure><p>Pop!_OS 是一个基于 Ubuntu 的 Linux发行版，它提供了一个精心设计的用户体验以及强大的软件套件。</p><p>考虑到它带来的最新技术和桌面环境带来的有用的调整，Pop!_OS发行版通常值得等待。</p><p>但是，你将无法获得 Pop!_OS 22.10 发行版。</p><p><a href="https://system76.com/">System76</a>希望专注于开发其自己的基于 Rust 的 COSMIC 桌面环境，并在未来的版本中放弃GNOME。😲</p><p><strong>如果你不知道的话</strong>，这是我们对 Pop!_OS 的 COSMIC桌面环境的旧报道，以供说明：</p><p><imgsrc="https://news.itsfoss.com/content/images/wordpress/2021/11/pop-os-cosmic-rust.png" /></p><blockquote><p><strong><ahref="https://news.itsfoss.com/pop-os-cosmic-rust/">哦，哇哦！Pop!_OSLinux 开发人员正在创建一个基于 Rust 的新桌面环境</a></strong></p></blockquote><h3 id="pop_os-22.10-发行版将不会发布">Pop!_OS 22.10发行版将不会发布</h3><p>一般在 Ubuntu 发布新的 LTS 和非 LTS 版本之后，Pop!_OS发行版就会发布。</p><p>没有 Pop!_OS 22.10，一些用户可能会失望，因为他们无法在 Pop!_OS 上体验GNOME 43。</p><p>感谢 <ahref="https://www.omgubuntu.co.uk/2022/09/excited-for-pop_os-22-10-dont-be">OMG!Ubuntu!</a>发现了 Pop!_OS 开发人员 <strong>Michael Murphy</strong> 的这个 <ahref="https://www.reddit.com/r/pop_os/comments/xifwt6/comment/ip3l425/">Reddit评论</a>。</p><p>Michael 提到：</p><blockquote><p>我们将会把开发时间集中到 COSMIC 的 Rust 实现上，而不是22.10。支持多个 Ubuntu 版本需要很大的努力，而 6个月的发布周期真的会吃掉开发时间和产品的稳定性。</p></blockquote><p>👏 我相信这是一个很好的决定。去年，当他们宣布了基于 Rust从头开始构建桌面环境的计划时，我总是想知道他们如何做到的。</p><p>从头开始做一件事并达到用户的期望是一项艰巨的任务，这些用户已经在基于GNOME 的 Pop!_OS 上拥有了很好的体验。</p><h3 id="cosmic-桌面环境">COSMIC 桌面环境</h3><figure><imgsrc="https://news.itsfoss.com/content/images/2022/09/pop_os_cosmic_early_build.png"alt="pop os cosmic 桌面环境早期构建" /><figcaption aria-hidden="true">pop os cosmic桌面环境早期构建</figcaption></figure><p>看到 COSMIC桌面环境的更多发展会很有趣。上次我们尝试它（或看到演示）时，用户会对它感到兴奋，即使它们只是刚刚开始。</p><p>从技术上讲，它自 2021 年以来就一直在开发中，2023 年的 Pop!_OS发行版将会带来它。</p><p>它使用 <a href="https://www.rust-lang.org/">Rust</a>编程语言编写，遵循 freedesktop <ahref="https://www.freedesktop.org/wiki/Specifications/">互操作性规范</a>，并完全移除了对GNOME 和其 shell 扩展的依赖。</p><p>我们曾经介绍过 COSMIC 桌面环境的早期预览构建，你可以在这里查看：</p><p><imgsrc="https://news.itsfoss.com/content/images/wordpress/2022/01/system76-rust-based-distro-ft.png" /></p><blockquote><p><strong><ahref="https://news.itsfoss.com/system76-rust-cosmic-desktop/">我尝试了System76 新的基于 Rust 的 COSMIC 桌面！</a></strong></p></blockquote><h3 id="为什么这是件好事">为什么这是件好事？</h3><p>Pop!_OS 的 LTS 版本已经收到了比 Ubuntu更多的包更新和内核升级，所以你不必担心没有发布 22.10 版本。</p><p>相反，我们应该期待 Pop!_OS 的下一个主要升级，那时他们会正式介绍Rust-COSMIC 桌面环境。</p><p>*💬 你对这个决定怎么看？你对未来的 Pop!_OS 发行版有什么期待吗？*</p><hr /><p>via: https://news.itsfoss.com/no-pop-os-21-10/</p><p>作者：<a href="https://news.itsfoss.com/author/sourav/">SouravRudra</a> 选题：<a href="https://github.com/lkxed">lkxed</a> 译者：<ahref="https://github.com/Cubik65536">Cubik65536</a> 校对：<ahref="https://github.com/wxy">wxy</a></p><p>本文由 <a href="https://github.com/LCTT/TranslateProject">LCTT</a>原创编译，<a href="https://linux.cn/">Linux中国</a> 荣誉推出</p>]]></content>
      
      
      <categories>
          
          <category> LCTT </category>
          
          <category> 转载 </category>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> LinuxCN </tag>
            
            <tag> Pop!_OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LCTT 原创翻译转载] 新闻｜Tuxedo 已对所有用户开放基于 Ubuntu 的 TUXEDO OS</title>
      <link href="/lctt/translation-linuxcn-article-15110-1/"/>
      <url>/lctt/translation-linuxcn-article-15110-1/</url>
      
        <content type="html"><![CDATA[<p>从现在开始，我将会在 <a href="https://linux.cn"class="uri">https://linux.cn</a>站上（可能以后也会有其他站点）翻译一些文章。在这些文章被这些站点发布之后，我也会对应的转载到本站点。注意，这些文章可能不会使用本站常用的<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh">CCBY-NC-SA 4.0</a>协议，而是使用原站点的协议。如果你想要转载这些文章，你需要遵守原站点的协议。这些文章具体的协议信息可以在文章的底部找到。你也可以在文章底部找到英文原文以及选题、校对人员等信息。让我们开始吧！</p><blockquote><p>原文：<a href="https://news.itsfoss.com/tuxedo-os/">[Exclusive]Tuxedo Makes Ubuntu-based 'TUXEDO OS' Available For All</a> 首发：<ahref="https://linux.cn/article-15110-1.html">Tuxedo 已对所有用户开放基于Ubuntu 的 TUXEDO OS</a> @<a href="https://linux.cn/">Linux 中国</a>作者：<a href="https://news.itsfoss.com/tuxedo-os/">Ankush Das</a>译者：<a href="https://linux.cn/lctt/">LCTT</a> <ahref="https://linux.cn/lctt/Cubik65536">Cubik</a></p></blockquote><span id="more"></span><h2 id="tuxedo-已对所有用户开放基于-ubuntu-的-tuxedo-os">Tuxedo已对所有用户开放基于 Ubuntu 的 TUXEDO OS</h2><blockquote><p>TUXEDO OS 是一个基于 Ubuntu 的 Linux 发行版，旨在将 TUXEDO 在 Linux方面的专业知识也带给非 TUXEDO 用户。</p></blockquote><figure><imgsrc="https://news.itsfoss.com/content/images/size/w1200/2022/09/tuxedo-os-1.png"alt="[独家] Tuxedo 已对所有用户开放基于 Ubuntu 的 &#39;TUXEDO OS&#39;" /><figcaption aria-hidden="true">[独家] Tuxedo 已对所有用户开放基于 Ubuntu的 'TUXEDO OS'</figcaption></figure><p>又一个基于 Ubuntu 的 Linux 发行版？😕</p><p>不完全是！<strong>TUXEDO 计算机公司</strong>是一家硬件制造商，以其专注于 Linux 的笔记本电脑和计算机而闻名。</p><p><strong>TUXEDO OS 与 Ubuntu 之间存在着一些有趣的差异</strong>。</p><p>虽然他们已经在笔记本电脑/计算机上提供预装 TUXEDO OS的选项，但是它并未对所有人开放。</p><p>终于，他们决定将其发行版的第一个版本作为 <strong>TUXEDO OS 1</strong>开放，该版本现已可供下载。</p><p>这也意味着你可以在自己的非 TUXEDO 系统上试用它。</p><p>所以这个思路很像 System76 的 Pop!_OS，所以这并不算一件坏事 👌</p><h3 id="搭配-kde-的-tuxedo-os-1">搭配 KDE 的 TUXEDO OS 1</h3><figure><imgsrc="https://news.itsfoss.com/content/images/2022/09/tuxedo-home.jpg"alt="tuxedo 桌面" /><figcaption aria-hidden="true">tuxedo 桌面</figcaption></figure><p>TUXEDO OS 1 是基于 <ahref="https://news.itsfoss.com/ubuntu-22-04-release/">Ubuntu 22.04LTS</a> 的; 所以它应该可以直接在大多数设备上运行。</p><p>与 System76 的 Pop!_OS 不同，TUXEDO OS 搭载了 <ahref="https://news.itsfoss.com/kde-plasma-5-24-lts-release/">KDE Plasma5.24.6</a>。因此，它应当提供了一个 Windows用户也较为熟悉的用户界面。</p><p>但是，TUXEDO OS 还包括一些额外的功能，例如 TUXEDO控制中心，用于微调你的硬件（CPU/风扇等），以及 TUXEDOTomte，一个用于解决驱动程序/缺少包问题的配置服务，但是它或许能，或许不能在其他硬件配置上工作。</p><p>说到这里，让我们看看 TUXEDO OS 及其提供的功能。</p><h3 id="tuxedo-os基于-kde-的定制化-ubuntu-体验">TUXEDO OS，基于 KDE的定制化 Ubuntu 体验</h3><p>用户体验正如预期一样，与任何基于 KDE 的 Ubuntu 发行版相同。</p><blockquote><p>📣 我将 TUXEDO OS（预览版）用做我的主要系统来体验它。</p></blockquote><p>你会在应用和菜单上发现带有红色调的 TUXEDO徽标。它还具有令人耳目一新的壁纸。</p><figure><imgsrc="https://news.itsfoss.com/content/images/2022/09/tuxedo-menu.png"alt="tuxedo 菜单" /><figcaption aria-hidden="true">tuxedo 菜单</figcaption></figure><p>除了定制化的 KDE Plasma 主题，还有一些其他的变化，例如：</p><ul><li>它使用了 PipeWire 作为声音服务器，而不是 PulseAudio。</li><li>GRUB 中启用了 os-prober功能，让用户可以方便地检测已安装的其他操作系统。</li><li>.deb 作为首选的软件包格式，而 Snap 默认情况下被禁用。</li><li>从 NetworkManagerConnectivity 检查中移除了 Canonical 的链接。</li></ul><h4 id="软件可用性">软件可用性？</h4><p>你可以通过 “<ruby>发现<rt>Discover</rt></ruby>”应用来找到所有流行的软件工具，其中包括 Ubuntu 的仓库和 TUXEDO的仓库。</p><p>它包含了 <strong>Firefox、Thunderbird、LibreOffice、VLC、Lutris 和Heroic Games Launcher</strong>等必备应用程序。所以我认为你不会觉得它们很臃肿。</p><figure><imgsrc="https://news.itsfoss.com/content/images/2022/09/tuxedo-os-repositories.png"alt="tuxedo discover 应用" /><figcaption aria-hidden="true">tuxedo discover 应用</figcaption></figure><p>我还注意到它默认启用了 Flatpak 集成。</p><p>你可以在他们的 <ahref="https://www.tuxedocomputers.com/en/Featured-KDEs-outstanding-applications-and-tools.tuxedo">官方网页</a>上了解有关可用软件的更多信息。</p><h4id="这也给我们带来了一个重要的亮点">这也给我们带来了一个重要的亮点</h4><p>❌ TUXEDO OS 不会默认安装 Snap。对于 Firefox，它会像 Linux Mint一样附带 deb 包安装。</p><p>✅ 值得注意的是，TUXEDO OS 22.04 LTS 附带了 Nvidia 驱动程序。</p><p>因此，我可以毫不费力地将它安装在带有 RTX 3060 Ti 显卡的系统上。</p><h3 id="tuxedo-附加功能">TUXEDO 附加功能</h3><p>如上所述，TUXEDO OS 附带了一些专为增强 Tuxedo硬件的体验而量身定制的附加功能。</p><p>控制中心是监控你的系统、选择电源配置文件、控制外部水冷（<ahref="https://www.tuxedocomputers.com/en/TUXEDO-Aquaris.tuxedo">TUXEDOAquaris</a>）等的绝佳工具。</p><figure><imgsrc="https://news.itsfoss.com/content/images/2022/09/tuxedo-os-control-center.png"alt="tuxedo 控制中心" /><figcaption aria-hidden="true">tuxedo 控制中心</figcaption></figure><p>虽然控制中心不是为非 TUXEDO设备量身定制的，但它在大多数情况下仍然能够正常工作。</p><p>还有一个 TUXEDO WebFAI Creator 程序（定制的BalenaEtcher）来烧录用于操作系统安装的 U 盘。</p><figure><imgsrc="https://news.itsfoss.com/content/images/2022/09/tuxedo-webfai.jpg"alt="tuxedo webfai" /><figcaption aria-hidden="true">tuxedo webfai</figcaption></figure><p>还有，不要忘记 TUXEDO Tomte，它无法在我的系统上运行，但可以很完美的在TUXEDO 设备上作为配置服务运行：</p><p><imgsrc="https://news.itsfoss.com/content/images/2022/09/tuxedo-tomte.jpg" /></p><h3 id="下载-tuxedo-os-1">下载 TUXEDO OS 1</h3><p>TUXEDO OS 带来了非常精致的体验。TUXEDO 背后的团队在让 Linux运行在他们的一些最新笔记本电脑上拥有丰富的经验。因此，使用他们的 Linux发行版，你可以对自己的体验充满信心。</p><p>如果你有兴趣，还可以找到关于 <ahref="https://www.tuxedocomputers.com/en/First-Steps-with-TUXEDO-OS.tuxedo">TUXEDOOS 入门</a> 的官方文章。</p><p><strong>如果你希望获得一个基于 KDE 的定制化 Ubuntu 体验，TUXEDO OS 1是一个不错的选择。</strong></p><p>你可以通过使用它来支持他们的计划，这可能会让你决定购买一台 TUXEDO设备；你永远不知道以后会发生什么，对吧？</p><p>你可以从其官方网站下载它，并在下方的评论区中分享你的想法。</p><blockquote><p><strong><a href="https://www.tuxedocomputers.com/os">下载 TUXEDO OS1</a></strong></p></blockquote><hr /><p>via: https://news.itsfoss.com/tuxedo-os/</p><p>作者：<a href="https://news.itsfoss.com/author/ankush/">AnkushDas</a> 选题：<a href="https://github.com/lkxed">lkxed</a> 译者：<ahref="https://github.com/Cubik65536">Cubik65536</a> 校对：<ahref="https://github.com/wxy">wxy</a></p><p>本文由 <a href="https://github.com/LCTT/TranslateProject">LCTT</a>原创编译，<a href="https://linux.cn/">Linux中国</a> 荣誉推出</p>]]></content>
      
      
      <categories>
          
          <category> LCTT </category>
          
          <category> 转载 </category>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Tuxedo OS </tag>
            
            <tag> LinuxCN </tag>
            
            <tag> LCTT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022 年 9 月总结</title>
      <link href="/2022-09-MonthJournal/"/>
      <url>/2022-09-MonthJournal/</url>
      
        <content type="html"><![CDATA[<p>由于开学，所以日常总结还是迟到了一点，但是 9月总结还是来了，让我们开始吧～</p><span id="more"></span><h2 id="开学">开学</h2><p>正如 8 月总结中所说，我在 8月底开学了，所以近期项目的进度都没有推的太多，博客的更新频率也因此降低了。虽然月中总结被取消了，但是我仍然会尽量保持每月一篇文章+ 一篇总结的频率。</p><h2 id="remotemc">RemoteMC</h2><p>尽管开学了，但是我仍然发布了一个 RemoteMC-Core 的 Beta 版本，并开始了RemoteMC-QQ 的开发。让我们来看看都更新了什么吧！</p><h3 id="remotemc-core">RemoteMC-Core</h3><p>在 9 月 22 日，我更新了 RemoteMC-Core 的 <ahref="https://github.com/iXORTech/RemoteMC-Core/releases/tag/v0.3.0-beta">0.3.0Beta (908F084)版本</a>。在这个版本中，我增加了对于在服务器/机器人上/下线时向网络进行广播的功能，并增加了丰富了日志记录的内容，方便调试以及以后进行查错。</p><h3 id="remotemc-qq">RemoteMC-QQ</h3><p>在同一天，我开始了 RemoteMC-QQ 的开发。这个模块是 RemoteMC 的 QQ机器人模块，用于在 QQ 群中进行远程控制 Minecraft服务器并同步聊天。该模块将会基于 <ahref="https://simbot.forte.love">Simpler Robot</a>作为机器人框架。目前开发完成的部分只有一个 <code>Hello World!</code>监听器以及内置 HTTP 服务器的配置，正式的开发将会在 10 月中旬开始。</p><h2 id="试用新的编辑器">试用新的编辑器</h2><p>在 9 月下旬，我开始尝试使用了新的编辑器，目前我正在试用 <ahref="https://www.jetbrains.com/fleet/">JetBrains 的 Fleet</a> 以及搭配<a href="https://develop.spacemacs.org/">Spacemacs</a> 的 <ahref="https://www.gnu.org/software/emacs/">Emacs</a> 。目前我拥有 <ahref="https://www.jetbrains.com/products.html">JetBrains IDE</a>作为大型项目的 IDE，以及 Visual Studio Code、Fleet 以及 Emacs作为较小型项目以及小型文件的编辑器。而我也应该会根据具体需求的不同长期使用所有这些编辑器。</p><h2 id="新项目">新项目</h2><p>作为学校（中学五年级）计算机课程的一个长期项目，我将会尝试自己打造一个语言及其配套编译器。我将会参考<a href="http://www.craftinginterpreters.com/contents.html">CraftingInterpreters</a> 一书作为开发编译器的指南，以及 <ahref="https://kotlinlang.org/">Kotlin</a>作为开发语言。该项目的代码将会与书中的 jLox 解析器以及 cLox编译器代码一起被托管在 <a href="https://github.com/QomegaLang">QωProgramming Language</a> 这个 GitHub 组织中。</p><h2 id="十月安排">十月安排</h2><p>由于我在十月初有多场考试，所以十月初我应该都不会进行什么软件开发或者博客更新。我会在十月中重新开始各个项目的开发，以及继续更新博客。那么我们下个月总结再见！</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用终端命令别名快速编译运行代码</title>
      <link href="/2022-09-27-CodeRunnerAlias/"/>
      <url>/2022-09-27-CodeRunnerAlias/</url>
      
        <content type="html"><![CDATA[<p>由于最近在尝试一些新的编辑器来进行单个代码文件的开发（例如竞赛开发），而这些编辑器需要使用命令行才可以编译运行代码。但是，每次运行代码都需要重复输入一长串的命令，这样就会很繁琐，因此我就想到了使用终端命令别名来简化这个过程。</p><span id="more"></span><div class="tag-plugin note" color="yellow"><div class="title">注意！</div><div class="body"><p>此处的一些功能可能仅适用于 macOS 操作系统。Linux上的操作应该是类似的，而 Windows 用户可能需要使用 WSL 实现此功能。</p></div></div><h2 id="代码运行">代码运行</h2><p>我们先来看看常见情况下编译并运行代码的命令</p><h3 id="c">C++</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -std=c++17 -O2 -o Main.out Main.cpp -Wall &amp;&amp; ./main</span><br></pre></td></tr></table></figure><p>注意，此处的命令使用了以下参数：</p><ul><li><code>-O2</code>：让 <code>g++</code>编译器通过增加编译时间换取更快的运行速度。（参考<ahref="https://www.rapidtables.com/code/linux/gcc/gcc-o.html">本文</a>）</li><li><code>-std=c++17</code>：指定 <code>g++</code> 编译器使用 C++17标准编译代码。假如你希望使用其他标准，可以参考<ahref="https://www.cubik65536.top/2022-06-22-ChangeCheckAndExplainCppStandards/#切换-C-编译器标准">此处</a>的标准列表。</li><li><code>-Wall</code>：检查一些常见错误</li></ul><h3 id="java">Java</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac Main.java &amp;&amp; java Main</span><br></pre></td></tr></table></figure><h2 id="设置终端命令别名">设置终端命令别名</h2><p>我们可以通过设置别名来简化上述两个命令为 <code>runc</code>（运行 C++代码）和 <code>runj</code>（运行 Java 代码），具体操作如下：</p><ol type="1"><li>打开终端，输入 <code>vim ~/.bashrc</code>，进入编辑模式</li><li>增加以下内容</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Compile &amp; Run C++</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">coc</span></span>() &#123; g++ -std=c++17 -O2 -o <span class="string">&quot;<span class="variable">$&#123;1%.*&#125;</span>.out&quot;</span> <span class="variable">$1</span> -Wall; &#125;</span><br><span class="line"><span class="function"><span class="title">runc</span></span>() &#123; coc <span class="variable">$1</span> &amp;&amp; ./<span class="variable">$&#123;1%.*&#125;</span>.out &amp; <span class="built_in">fg</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compile &amp; Run Java</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">runj</span></span>() &#123; javac <span class="variable">$1</span> &amp;&amp; java <span class="variable">$&#123;1%.*&#125;</span>; &#125;</span><br></pre></td></tr></table></figure><ol start="3" type="1"><li>保存退出，输入 <code>source ~/.bashrc</code> 使设置生效</li></ol><div class="tag-plugin note" color="orange"><div class="title">`& fg` 是做什么用的？</div><div class="body"><p><code>&amp; fg</code>会将正在运行的任务的控制信息显示到前台<br/>一些错误信息（例如 C++ 的<code>segmentation fault</code>）需要用此方法才可以显示出来。</p></div></div><h2 id="使用">使用</h2><p>现在我们就可以使用 <code>runc</code> 和 <code>runj</code>来编译运行代码了。假如我们有一个名为 <code>main.cpp</code> 的 C++代码文件，我们可以使用 <code>runc main.cpp</code>来编译然后运行它，而不需要输入那么长的命令。对于 Java 代码，我们可以使用<code>runj main.java</code> 来编译然后运行它。</p><h2 id="参考">参考</h2><ul><li><a href="https://usaco.guide/general/cpp-command?lang=cpp">C++ Withthe Command Line - USACO Guide</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 终端 </tag>
            
            <tag> macOS </tag>
            
            <tag> C++ </tag>
            
            <tag> 代码运行 </tag>
            
            <tag> Java </tag>
            
            <tag> OI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022 年 8 月总结</title>
      <link href="/2022-08-MonthJournal/"/>
      <url>/2022-08-MonthJournal/</url>
      
        <content type="html"><![CDATA[<p>虽然晚了几天，但是 8 月总结还是来了，让我们开始吧～</p><span id="more"></span><h2 id="macbook-pro-维修">MacBook Pro 维修</h2><p>正如<ahref="https://www.cubik65536.top/2022-08-HalfMonthJournal/">上半月总结</a>中所说，我将我的日常用机MacBook Pro 送修了。运气很好，我的 Touch Bar已经恢复正常工作了，同时，我也重新开始使用<ahref="https://folivora.ai">BetterTouchTool</a>作为一个增强 Touch Bar功能的工具。</p><h2 id="开学-remotemc-等开发项目">开学 &amp; RemoteMC 等开发项目</h2><p>我也在 8 月底开学了，因此，RemoteMC等已有开发项目的进度可能会被放缓。不过，我仍然会慢慢推进开发进度，而且我会将成品质量放在首位。另外，我应该暂时不会开始新的大型（开发周期长的）项目了。</p><h2 id="apple-全家桶">Apple 全家桶！</h2><p>我收到了一支 Apple Watch 作为今年的生日礼物，那么我也集齐了 iPhone,iPad, Apple Watch 和 Mac四个全家桶成员，那么我也可能会写一个关于使用全苹果生态产品的体验文章。</p><h2 id="总结">总结</h2><p>那么今年 8 月的大事就先这些了！9 月见！</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Arch 系列 Linux 操作系统与 macOS 操作系统上上使用 Oh My Zsh 终端并配置 Powerlevel10k 主题等插件</title>
      <link href="/2022-08-18-Terminal-OhMyZsh-Powerlevel10k-on-ArchSystems/"/>
      <url>/2022-08-18-Terminal-OhMyZsh-Powerlevel10k-on-ArchSystems/</url>
      
        <content type="html"><![CDATA[<p>本文将会简单介绍如何在 Arch 系列的 Linux 操作系统以及 macOS操作系统上配置并使用 Oh My Zsh 终端以及 Powerlevel10k主题等插件。本文中作为演示的终端软件在 Linux 系统上为 <ahref="https://github.com/vercel/hyper">Hyper</a>，在 macOS 操作系统上为<a href="https://iterm2.com/">iTerm2</a>。</p><span id="more"></span><div class="tag-plugin note" color="orange"><div class="title">提示</div><div class="body"><p>在本文中，如果没有提到具体操作系统，则认为两个操作系统使用同一操作</p></div></div><div class="tag-plugin note" color="orange"><div class="title">提示</div><div class="body"><p>本文使用的操作、功能、设置等可能具有时效性，仅供参考</p></div></div><div class="tag-plugin note" color="orange"><div class="title">提示</div><div class="body"><p>本文中的 <code>Linux</code> 操作系统指代 Arch Linux系操作系统（Arch、Artix、Manjaro 等），部分命令可能不适用于其他 Linux发行。</p></div></div><h2 id="安装字体">安装字体</h2><p>Oh My Zsh会在终端中显示一些徽标，而我们需要安装一个支持这些标志的字体。你可以前往<a href="https://www.nerdfonts.com/font-downloads"class="uri">https://www.nerdfonts.com/font-downloads</a>寻找一个你想要的字体下载并安装。同时，你需要把你的终端软件字体设置为你安装的字体。</p><h2 id="安裝-oh-my-zsh">安裝 Oh My Zsh</h2><p>首先，我们需要安装 <a href="https://ohmyz.sh/">Oh MyZsh</a>，执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)</span>&quot;</span></span><br></pre></td></tr></table></figure><h2 id="设置预设终端可选">设置预设终端（可选）</h2><p>如果再次启动你的终端软件后没有自动使用 zsh，执行以下命令设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s $(<span class="built_in">which</span> zsh)</span><br></pre></td></tr></table></figure><p>并启动 zsh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zsh</span><br></pre></td></tr></table></figure><p>如果默认终端仍然没有改变，可以尝试重启计算机。</p><h2 id="安装-powerlevel10k-主题">安装 Powerlevel10k 主题</h2><p>然后我们需要安装 Powerlevel10k 主题，执行以下命令：</p><h3 id="linux">Linux</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yay -S --noconfirm zsh-theme-powerlevel10k-git</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;source /usr/share/zsh-theme-powerlevel10k/powerlevel10k.zsh-theme&#x27;</span> &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><h3 id="macos">macOS</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install romkatv/powerlevel10k/powerlevel10k</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source <span class="subst">$(brew --prefix)</span>/opt/powerlevel10k/powerlevel10k.zsh-theme&quot;</span> &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><h2 id="配置主题">配置主题</h2><p>如果你不在 zsh 中，使用 <code>zsh</code> 命令启动新的zsh，否则重启一次终端，Powerlevel10k主题配置将会显示，你可以通过提示配置你想要的主题。</p><p>如果配置页面没有自动弹出，执行 <code>p10k configure</code>即可，如果想更改配置也可以通过此命令完成。</p><h2 id="安装-zsh-autosuggestions-插件">安装 <ahref="https://github.com/zsh-users/zsh-autosuggestions">zsh-autosuggestions</a>插件</h2><p>这个插件会在你输入指令时显示曾经使用过的命令，你可以通过按下<kbd>➔</kbd> 来自动补全命令。</p><p>执行以下命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions</span><br><span class="line"><span class="built_in">source</span> ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh</span><br></pre></td></tr></table></figure><h2 id="安装-zsh-syntax-highlighting-插件">安装 <ahref="https://github.com/zsh-users/zsh-syntax-highlighting">zsh-syntax-highlighting</a>插件</h2><p>这个插件会为你输入的命令增加语法高亮。</p><p>执行以下命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source <span class="variable">$&#123;(q-)PWD&#125;</span>/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&quot;</span> &gt;&gt; <span class="variable">$&#123;ZDOTDIR:-<span class="variable">$HOME</span>&#125;</span>/.zshrc</span><br><span class="line"><span class="built_in">source</span> ./zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br></pre></td></tr></table></figure><h2 id="完成">完成</h2><p>Oh My Zsh 以及相关插件的配置就已经完成了！GL&amp;HF!</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 终端 </tag>
            
            <tag> macOS </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022 年 8 月上半月总结</title>
      <link href="/2022-08-HalfMonthJournal/"/>
      <url>/2022-08-HalfMonthJournal/</url>
      
        <content type="html"><![CDATA[<p><strong>本文撰写于一台 Linux 计算机</strong></p><p>我一直都特别想尝试写一些生活类的文章，但是我一直没有找到我比较喜欢的主题。这次终于找到了这么一个机会，所以这是我的第一次尝试，希望能够越来越好，开始吧！</p><span id="more"></span><p>这个月月初填了一下 UTM 体验的坑，然后花时间比较多的地方就是学习 USACO以及开发 <ahref="https://github.com/iXORTech/RemoteMC-Core">RemoteMC</a>系列软件的模块。同时，我终于完成 iXOR Technology 组织的 GitHub看板的配置以及一些工作流程自动化的配置。为此我还开发了一个 GitHub机器人来完成另外一些功能，下文会提到。</p><h2 id="remotemc-系列">RemoteMC 系列</h2><p>原本我打算在月初发布 RemoteMC 系列的 MCDR 模块，但是发现了 Core模块的信息转发设计不能实现我想要的功能，于是我在月初重新设计了 Core模块的信息接收与发送的工作方式实现了我想要的一些功能。同时 MCDR模块的功能也都齐全了，用于自动插件打包与发布的 GitHub Action也完成了。下一步就要在连接着多个 MCDR模块的情况下进行测试并发布一些测试视频，敬请期待。</p><h2 id="cubiktechself-approval"><ahref="https://github.com/CubikTech/self-approval">CubikTech/self-approval</a></h2><p>同时，由于新的开发流程，我也需要向我自己的仓库提交 PullRequests。但是由于 GitHub 并不允许 Pull Request 作者批准自己的 PullRequest,，所以我开发了这个 GitHub App，允许白名单中的用户通过发送comment 让机器人批准自己的 Pull Request.</p><h2 id="macbook-pro-维修">MacBook Pro 维修</h2><p>前一段时间我的 MacBook Pro 的 Touch Bar不亮了，去找苹果要更换下半台电脑，太贵了。于是我找了一家修理店希望可以便宜一点修好Touch Bar。撰写本文的今天我刚刚将电脑送去检测。这也是为什么本文是在我的Linux 机器上撰写的。希望 MacBook Pro可以早日回归，我也能够恢复我平常极度依赖于 macOS的工作流。同时，因为要修电脑的原因，RemoteMC的测试以及一些视频的制作要被延后了...</p><h2 id="配置-linux-备用机器">配置 Linux 备用机器</h2><p>由于这段时间我必须依赖于我以前基本不用的 Linux机器完成几乎所有要做的东西，所以我这几天配置了新系统、终端（Oh my zsh以及主题和插件）、编译器、git、签名、VSCode等日用软件。虽然还有一些小问题没有解决，不过应该可以让我能够撑过这段时间了。同时，我也将我的系统换回了Arch 系操作系统（Artix Linux），或许以后会讲讲使用体验吧。</p><h2 id="总结">总结</h2><p>那么就先这样了！这两天可能会有一些其他博客发布，敬请期待！然后我们月底再见！</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS 版 UTM 虚拟机上手（二）</title>
      <link href="/2022-08-04-Hands-On-UTM-On-macOS(2)/"/>
      <url>/2022-08-04-Hands-On-UTM-On-macOS(2)/</url>
      
        <content type="html"><![CDATA[<p>本文是一篇填坑将近三个月前（而且也写了差不多这么长时间了）的 <ahref="https://www.cubik65536.top/2022-05-18-Hands-On-UTM-On-macOS(1)">macOS版 UTM 虚拟机上手（一）</a>的博客文章。如果各位还没有阅读过这篇文章，请先看完再回来，本文将主要讲述macOS 版 UTM 的优缺点和一些使用建议。</p><span id="more"></span><h2 id="优点">优点</h2><p>我不太想把一篇体验性质的文章写的像评测一样事无巨细<del>（当然，也和我懒有关系）</del>，所以我只会讲述那些特别明显而且能直接决定是否你是否应该使用该软件的优缺点。</p><p>首先，UTM最大的一个优点之一是免费且开源。所以，对于大部分只用虚拟机作为备用环境的用户来说UTM 其实是个非常好的选择。同时，UTM 使用了 Objective-C 与Swift（两个苹果开发的编程语言）来进行开发，而且在前端使用了较新的API，所以相对于其他虚拟机，UTM 的页面风格也和苹果其他 App比较相像。最后，UTM 使用了 QEMU作为虚拟机核心，所以它不仅可以虚拟化当前系统架构，也可以模拟其他架构的处理器。所以对于一些开发者来说，这可能是一个非常吸引人的选择。</p><h2 id="缺点">缺点</h2><p>同样，UTM 也有缺点。作为一个用户，你感知最明显的就是 UTM 相对于VMware Fusion 和 Parallel Desktop这种比较商业化的软件缺少很多功能。一些例如在外置硬盘存储虚拟机镜像、在macOS 中直接打开虚拟机软件（或者用虚拟机内软件打开文件）、甚至是 GPU加速等功能都是缺失的，如果虚拟机是你工作的必要软件而且你会使用到各种更加高级的功能，则UTM 可能达不到你的预期。</p><h2 id="总结">总结</h2><p>如果你对你的虚拟机软件的要求是免费、轻量且美观，而且虚拟机对你来说只是个偶尔使用的，在不想重启的时候临时使用第二操作系统的替代品，那么UTM就是一个不错的选择。但是，假如你需要在日常使用中用到虚拟机软件的各种高级功能，那么你或许应该考虑VMware 之类的虚拟机软件。</p><h2 id="预告">预告</h2><p>另外，预告一下，我打算从 8月开始每月中更新上半月总结并在月底更新下半月以及整月总结。也算是把一直想写但是感觉写不出来的内容尝试做出来，敬请期待。</p><p>还有，月底将有一篇苹果全家桶体验文章哦！</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 上手 </tag>
            
            <tag> macOS </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> UTM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 macOS 中将外置键盘的 Option 和 Command 键左右调转</title>
      <link href="/2022-08-01-Remap-LeftRight-CommandOption-Keys-for-external-keyboard-on-macOS/"/>
      <url>/2022-08-01-Remap-LeftRight-CommandOption-Keys-for-external-keyboard-on-macOS/</url>
      
        <content type="html"><![CDATA[<p>长期以来，我一直为我的 Mac 着一个 Windows键位格式的外接机械键盘。众所周知，在使用 Windows 键位的时候，Option 和Command 键是相互对调的。幸好苹果在系统设置中为我们提供了将例如 Option 和Command 等修饰键重新映射的功能（见下图）。但是，在近期的一些 macOS版本中，使用当前方法会导致修饰键左右翻转（例如左侧 Command 输出为右侧Command，右侧 Command 输出为左侧 Command），而这个问题需要进行解决。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/macOS-Modifier-Keys.png" fancybox="true" style="width:75%;"/></div></div><span id="more"></span><div class="tag-plugin note" color="orange"><div class="title">提示</div><div class="body"><p>在本文中，如果没有提到<strong>左/右</strong>侧按键，则默认为两个均可。</p></div></div><div class="tag-plugin note" color="orange"><div class="title">提示</div><div class="body"><p>本文内容使用英语操作系统的界面</p></div></div><h2 id="提前准备">提前准备</h2><p>你需要准备以下东西/软件/网站来帮助你进行接下来的操作</p><ol type="1"><li>基础的知识与认知</li><li>一个可以查看并编辑 macOS plist 文件的工具，比如 <ahref="https://developer.apple.com/xcode/">Xcode</a>，目前极少有其他免费的可视化编辑工具，当然，如果你愿意的话，你也可以尝试<ahref="https://marketplace.visualstudio.com/items?itemName=dnicolson.binary-plist">VScode的 Binary Plist</a> 插件，或者 <a href="https://macromates.com">TextMatefor macOS</a>等软件。但是后两者虽然同样是免费的，但不提供可视化编辑工具，它们分别会以一个类似于XML 和 Json 的格式显示 plist 的内容，所以你需要相关知识。</li><li>一个测试按键功能的网站，例如 <ahref="https://en.key-test.ru">"Key-Test" - keyboard testonline</a>。</li><li>一个十六进制转十进制的工具。或者你也可以使用命令行完成这个任务（见下章）。</li></ol><p>那让我们开始吧！</p><h2 id="使用-bash-命令行将十六进制数转换为十进制">使用 bash命令行将十六进制数转换为十进制</h2><p>打开你的命令行（比如 Terminal），输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> $((<span class="number">16#046</span>D))</span><br></pre></td></tr></table></figure><p>随后输出的结果即为 <code>0x046D</code> 的十进制表示。</p><h2 id="找到你键盘的-vendorid厂商id与-productid硬件产品id">找到你键盘的VendorID（厂商ID）与 ProductID（硬件/产品ID）</h2><div class="tag-plugin note" color="orange"><div class="title">提示</div><div class="body"><p>我使用的是一个 USB 无线 +有线均可使用的键盘，蓝牙键盘可能需要其他方法找到 ID</p></div></div><div class="tag-plugin note" color="orange"><div class="title">提示</div><div class="body"><p>从这一步开始，你需要接入你的外接键盘</p></div></div><p>这一步我们的目的是找到键盘在系统中的标识符，以便我们找到键盘映射设置。</p><p>按住 <kbd>⌥</kbd>，点击屏幕左上角的 Apple 图标，点击<code>System Information</code>（第一个选项）。</p><p>在左侧菜单中找到 <code>Hardware</code> 下方的<code>USB</code>，点击它，在右侧就会显示已连接到电脑的 USB设备，找到你的键盘（作为参考，在我这里有线模式显示为<code>G915 WIRELESS RGB MECHANICAL GAMING KEYBOARD</code>，无线模式显示为<code>USB Reciver</code>），点击它。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/KeyboardSystemInformation.png" fancybox="true"/></div></div><p>你在这里会找到你的键盘的十六进制 VendorID 和ProductID。将其转换成十进制并记录下来。</p><div class="tag-plugin note" color="orange"><div class="title">提示</div><div class="body"><p>假如你的键盘同时支持有线和无线模式，那么 USB 线和 USB无线接收器会显示为两个不同的 ID，需要单独设置，所以两者均需要记录</p></div></div><h2 id="编辑-plist-文件">编辑 plist 文件</h2><p>前往 <code>~/Library/Preferences/ByHost/</code> 路径，找到<code>.GlobalPreferences.XXXXXXXX-YYYY-ZZZZ-WWWW-VVVVVVVVVVVV.plist</code>格式的 plist 文件，打开它。</p><div class="tag-plugin note" color="orange"><div class="title">提示</div><div class="body"><p>从此处开始，我们会提到<code>Array</code>/<code>Dictionary</code>/<code>Number</code>等数据类型，如果你使用 XCode，则可以通过查看 <code>Type</code>一栏来获得数据类型，如果你使用 VSCode，则类型为 XML标签的命名，如果你使用 TextMate，则需要按照 Json的方法辨认这些类型。</p></div></div><h3 id="已经进行过键位设置">已经进行过键位设置</h3><p>接下来，我们会提到多次“找到”，但是这是建立在你已经在系统偏好设置中设置了键位的猜测下的，假如你确定你没有这一项，则跳到第二部分。</p><p>你需要在文件中找到一个到多个<code>com.apple.keyboard.modifiermapping.XXXX-YYYYY-0</code> 格式命名的<code>Array</code>。其中 <code>XXXX</code> 是你的键盘的十进制VendorID，<code>YYYY</code> 是你的键盘的十进制ProductID。其中，会有命名为 <code>Item Z</code>（<code>Z</code>是一个数）的数个（至少四个） <code>Dictionary</code>。其中，你会找到<code>HIDKeyboardModifierMappingSrc</code> 和<code>HIDKeyboardModifierMappingDst</code> 两个<code>Number</code>。其中，<code>HIDKeyboardModifierMappingSrc</code>是你的原键位，<code>HIDKeyboardModifierMappingDst</code>是你想要的新键位。</p><p>接下来，按照下方对应的表格将对应原键位的新键位设置到你的键盘上。注意不要看错原键位哦！</p><table><thead><tr class="header"><th>原键位</th><th>新键位</th></tr></thead><tbody><tr class="odd"><td>30,064,771,302</td><td>30,064,771,303</td></tr><tr class="even"><td>30,064,771,303</td><td>30,064,771,302</td></tr><tr class="odd"><td>30,064,771,298</td><td>30,064,771,299</td></tr><tr class="even"><td>30,064,771,299</td><td>30,064,771,298</td></tr></tbody></table><p>最后保存即可。</p><h3 id="没有进行过键位设置">没有进行过键位设置</h3><p>其实这个步骤与上一步差不多，但是，你需要自行按照相应命名创建<code>Array</code>，<code>Dictionary</code>，<code>Number</code>并按照上方表格自行填写 <code>HIDKeyboardModifierMappingSrc</code> 和<code>HIDKeyboardModifierMappingDst</code>的值。创建完成后保存即可。</p><h2 id="最后">最后</h2><p>在上述步骤都完成后，重启电脑，并打开按键测试网站进行测试，然后就大功告成啦！GL&amp;HF！</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> 折腾 </tag>
            
            <tag> 外置键盘 </tag>
            
            <tag> 键位映射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上手三个月后对 Warp 终端的印象</title>
      <link href="/2022-07-27-Warp-Terminal-After-Three-Months/"/>
      <url>/2022-07-27-Warp-Terminal-After-Three-Months/</url>
      
        <content type="html"><![CDATA[<p>距离我初次上手 Warp终端已经过去三个月了，我想我也要讲一讲关于体验的内容了。当然，如果各位还没看过的话，可以点击<ahref="https://www.cubik65536.top/2022-04-17-Hands-On-Warp-Terminal/">此处</a>看看我的《Warp终端上手第一印象》。那篇文章简单的介绍了一些关于 Warp这个终端的功能和特性，并可能会帮助你理解本文的部分内容，同时本文也将不再赘述上文中的内容。</p><span id="more"></span><h2 id="登录">登录</h2><p>先讲最重要的，也是一直以来反响最大的问题。截至目前（2022 年 07 月 22日），Warp 仍然需要登录 GitHub 才可以使用。</p><div class="tag-plugin quot"><p class="content" type="text">When Warp comes out of beta, login via Github will not be required.</p></div><div class="tag-plugin quot"><p class="content" type="text">（Warp 在离开 beta 阶段后将不再要求使用 GitHub 登录）</p></div><p>这个是曾经 Warp 在隐私页面作出的承诺（可以在<ahref="https://web.archive.org/web/20220530081754/https://www.warp.dev/privacy">此处</a>通过时光机访问查证，最新还包含此内容的备份是4 月 30 日的）也变成了：</p><div class="tag-plugin quot"><p class="content" type="text">Right now, in our beta phase, we require a user login by email, GitHub or Google to access Warp. Logging in via GitHub or Google just gives us access to the email associated with your Github or Google account, nothing more.</p></div><div class="tag-plugin quot"><p class="content" type="text">（在目前的 beta 阶段中，我们要求用户使用邮箱、GitHub 或 Google 登录才可以访问 Warp。通过 GitHub 或者 Google 登录只会向我们提供关联邮箱。）</p></div><p>没错，「不再要求使用 GitHub 登录」的承诺消失了。我曾经是相信 Warp能给出一个好的方案的。目前 Warp 用了一个协作以及 AI功能需要来当作需要登录的理由（<ahref="https://www.warp.dev/faq#why-is-login-required-for-a-terminal-app">FAQ-Warp</a>），不过在不使用协作（其实还是一个付费功能）的前提下，有多大登录的必要还是要打个大大的问号。</p><h2 id="warp-成为我的主力终端-app-了吗">Warp 成为我的主力终端 App了吗？</h2><p>太长不看：<strong>没有</strong>。</p><p>我一直都在使用 <a href="https://iterm2.com">iTerm2</a> 作为我在 macOS环境下的主力终端 App。这点在我使用 Warp 一段时间过后仍未改变。首先，Warp值得期待的一些例如输出块、智能提示等主打功能都没有（没错，对我来说和 IDE的智能提示正相反）显著提升我的效率。而且由于 Warp和我用来提升效率的一些额外软件的兼容性并不好，而且 iTerm仍然有着更为完善的一些功能，所以，没错，Warp 对我来说还是那个用来体验的App。虽然这个答案可能会根据时间，Warp的开发和与周边软件的适配情况而变化，但目前它不能成为我的主力终端App。</p><h2 id="总结">总结</h2><p>其实我想讲的都讲完了，在上一篇中我所期待的一些功能仍未达到我的预期，Warp对我以及一些已经完全习惯了其他终端 App的人来说仍然不能作为主力，或许它只是还需要完善。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 上手 </tag>
            
            <tag> 终端 </tag>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更改或检查 C++ 编译器的标准并解释如何分辨 C++ 编译器的标准</title>
      <link href="/2022-06-22-ChangeCheckAndExplainCppStandards/"/>
      <url>/2022-06-22-ChangeCheckAndExplainCppStandards/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>我今天在为了测试不同标准下的 C++最大公约数与最小公倍数函数。（更多相关知识可以到 <ahref="https://oi-wiki.org/math/number-theory/gcd/">OI-wiki</a>上查看），因此我需要在 C++14 与 C++17标准之间切换。我也因此找到了一些可以更便捷的方法来切换 C++标准并检查当前标准，现在分享给各位。</p><span id="more"></span><div class="tag-plugin note" color="yellow"><div class="title">提示</div><div class="body"><p>本文中所有的 <code>g++-11</code>均为我所使用的编译器的命令，你应当更换成你所使用的才可以让这些命令正常工作。</p></div></div><h2 id="查询当前-c-编译器的标准">查询当前 C++ 编译器的标准</h2><p>你可以使用以下命令来查询当前 C++ 编译器的标准：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++-11 -dM -E -x c++  /dev/null | grep -F __cplusplus</span><br></pre></td></tr></table></figure><p>使用这个命令会输出一个例如 <code>#define __cplusplus 201703L</code>的东西，这个就是你的当前 C++ 编译器的标准。其中的 <code>201703L</code>代表 2017 年 03 月 —— 也就是 C++ 标准委员会通过 C++17标准的时间。你可以使用以下表格来查询对应的 C++编译器标准：<sup id="fnref:1" class="location-target"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--error hint--medium hint--rounded hint--bounce"aria-label="">1</span></a></sup></p><ul><li><code>199711L</code> -C++97（C++98）标准，其实这两个在编译器设置中都应被设置为<code>-std=c++98</code>，因为其实 C++97 标准的一部分实际上是在 1998年通过的。</li><li><code>199811L</code> - C++03标准，由于标准的变更很少，所以标准委员会（很显然）决定不更改这个标准号。</li><li><code>201103L</code> - C++11 标准</li><li><code>201402L</code> - C++14 标准</li><li><code>201703L</code> - C++17 标准</li><li><code>202002L</code> - C++20 标准</li><li><code>202100L</code> - C++23 标准</li></ul><p>另外，在标准被批准之前，一部分编译器会将 <code>__cplusplus</code>定义为 <code>0</code>（或直接用 <code>#define __cplusplus</code>定义为空）来表示”不符合标准“。<sup id="fnref:1" class="location-target"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--error hint--medium hint--rounded hint--bounce"aria-label="">1</span></a></sup></p><p>另外，一些早起的 cfront（和其分支）会定义 <code>c_plusplus</code>而非<code>__cplusplus</code>，而且可能不包含实际意义的值。<sup id="fnref:1" class="location-target"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--error hint--medium hint--rounded hint--bounce"aria-label="">1</span></a></sup></p><p><sup id="fnref:1" class="location-target"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--error hint--medium hint--rounded hint--bounce"aria-label="">1</span></a></sup>：参考：https://stackoverflow.com/a/11054055/10100764</p><h2 id="切换-c-编译器标准">切换 C++ 编译器标准</h2><p>你可以在编译时通过 <code>-std=</code> 来指定 C++编译器标准，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++-11 -std=c++17 main.cpp -o main.out</span><br></pre></td></tr></table></figure><p>C++ 标准对应的选项为：</p><ul><li><code>-std=c++98</code> - C++98=7（C++98）标准</li><li><code>-std=c++03</code> - C++03 标准</li><li><code>-std=c++11</code> - C++11 标准</li><li><code>-std=c++14</code> - C++14 标准</li><li><code>-std=c++17</code> - C++17 标准</li><li><code>-std=c++20</code> - C++20 标准</li><li><code>-std=c++23</code> - C++23 标准</li></ul><p>假如你觉得每次这么弄很麻烦，你也可以通过指定命令行 <code>alias</code>来完成这项工作，下方是我使用的 <code>alias</code>：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">alias g++97=&#x27;g++-11 -std=c++98&#x27;;</span><br><span class="line">alias g++98=&#x27;g++-11 -std=c++98&#x27;;</span><br><span class="line">alias g++03=&#x27;g++-11 -std=c++03&#x27;;</span><br><span class="line">alias g++11=&#x27;g++-11 -std=c++11&#x27;;</span><br><span class="line">alias g++14=&#x27;g++-11 -std=c++14&#x27;;</span><br><span class="line">alias g++17=&#x27;g++-11 -std=c++17&#x27;;</span><br><span class="line">alias g++20=&#x27;g++-11 -std=c++20&#x27;;</span><br><span class="line">alias g++23=&#x27;g++-11 -std=c++23&#x27;;</span><br></pre></td></tr></table></figure><p>然后你就可以使用<code>g++14</code>/<code>g++17</code>/<code>g++20</code>等命令来编译你的代码了。</p><p><strong>那就这样，GL&amp;HF！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 终端 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS 版 UTM 虚拟机上手（一）</title>
      <link href="/2022-05-18-Hands-On-UTM-On-macOS(1)/"/>
      <url>/2022-05-18-Hands-On-UTM-On-macOS(1)/</url>
      
        <content type="html"><![CDATA[<p>最近我有了在我的 macOS 设备上运行 Linux 的需求，而我认为 ParallelDesktop 和 VMware Fusion 都体积较大。但我突然想到了 UTM 软件。它以可以在iOS 上运行虚拟机而闻名，但是这个软件也有 macOS版本，而且相对其他虚拟机软件来说，它更轻量化，所以我打算尝试一下该软件。</p><span id="more"></span><h2 id="安装-utm">安装 UTM</h2><p>前往 UTM app 的 <ahref="https://github.com/utmapp/UTM/releases">GitHub Release</a>页面即可下载最新版本的 dmg 文件。然后就和我们都很熟悉的 macOS软件安装方法一样了：打开 dmg，将 app 拖入Application（软件）目录下即可。</p><h2 id="启动-utm">启动 UTM</h2><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/UTM-First-Time-Start.png" fancybox="true"/></div></div><p>初次启动 UTM之后，你将可以看到这个页面，你分别可以创建新虚拟机，浏览虚拟机预设，查看用户手册或者获得支持。</p><h2 id="创建新虚拟机">创建新虚拟机</h2><p>在点击 <code>Create a New Virtual Machine</code>之后，你将能看见这个页面：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/UTM-New-VM.png" fancybox="true"/></div></div><p>你可以选择虚拟化（Virtualize），这个模式下虚拟机效率会更高，但是只能模拟同CPU 架构的虚拟机（例如在我的 Intel Mac 上，它就只能虚拟 x86架构的虚拟机）。</p><p>或者你也可以选择模拟化（Emulate），虽然速度会更慢，但是你可以建立跨架构的模拟机（例如在Intel Mac 上模拟 arm 架构芯片的虚拟机）。</p><p>根据我的需求，我这次会选择虚拟化，不过我可能会在以后为各位带来模拟化模式的体验。</p><hr /><p>然后在选择 Virtualize之后，你会需要选择操作系统。正如下图所示，你可以选择预配置好的 Windows或者 Linux，你也可以选择其他，这里我会选择 Linux。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/UTM-New-VM-OS.png" fancybox="true"/></div></div><p>然后你会看到这个页面：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/UTM-New-VM-OS-Linux.png" fancybox="true"/></div></div><p>在这里，你可以选择是否使用 Apple的虚拟化（这个模式仍然比较的不完善，所以仍然推荐不选择，使用自带的QEMU，这也是 UTM 推荐的模式）。你还可以选择是否要从 Linux内核启动（我这里会保持默认，则不从内核启动），然后你需要导入启动 ISO文件，我这里使用了 Fedora 36 + KDE Desktop 的 ISO。没错，我又从 Manjaro换回了 Fedora，我会在近期更新的另一篇博客中更加详细的解释。</p><hr /><p>然后进入硬件页面（如下图）：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/UTM-New-VM-Hardware.png" fancybox="true"/></div></div><p>我选择了让 CPU 核心保持默认，将内存分配从默认的 4096 MB 增加到了 8192MB，仍然在试验阶段的 OpenGL 加速保持默认的关闭状态。</p><p>然后选择硬盘大小（如下图）：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/UTM-New-VM-Storage.png" fancybox="true"/></div></div><p>我目前不需要太大的存储空间，而且我们可以回收虚拟机所不占用的空间，所以我将其维持默认的64 GB 设置。</p><p>然后选择共享的路径：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/UTM-New-VM-SharedDirectory.png" fancybox="true"/></div></div><p>然后来到 Summary 页面：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/UTM-New-VM-Summary.png" fancybox="true"/></div></div><p>这里你可以再检查一遍虚拟机配置并改变你虚拟机的名称，然后点击<code>Save</code> 创建虚拟机。</p><h2 id="主页面">主页面</h2><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/UTM-Home.png" fancybox="true"/></div></div><p>然后你会来到这个页面，点击左上角的三角运行即可</p><h2 id="安装操作系统">安装操作系统</h2><p>然后 UTM 理论上会引导到你的 ISO中，正常安装操作系统到虚拟磁盘中即可。</p><h2 id="在外置磁盘上存储-utm-的虚拟机">在外置磁盘上存储 UTM的虚拟机</h2><p>目前 UTM 只会从<code>~/Library/Containers/com.utmapp.UTM/Data/Documents</code>读取虚拟机文件，目前的一个解决方案是使用终端将移动硬盘手动挂载到该目录下。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo diskutil mount -mountPoint ~/Library/Containers/com.utmapp.UTM/Data/Documents /dev/disk4s3</span><br></pre></td></tr></table></figure><div class="tag-plugin note" color="orange"><div class="title">注意</div><div class="body"><p>此处的 <code>/dev/disk4s3</code>应当被替换为你的外置硬盘的标识符，标识符可以通过<code>diskutil list</code> 查看。</p></div></div><hr /><p>未完待续... 我将会在不久之后发布体验博客，请敬请期待。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 上手 </tag>
            
            <tag> macOS </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> UTM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修复 GitHub Action 使用 action-x/commit 时引发的 fatal: unsafe repository (&#39;/github/workspace&#39; is owned by someone else) 错误</title>
      <link href="/2022-05-08-Fix-GHAction-Error-unsafe-repository/"/>
      <url>/2022-05-08-Fix-GHAction-Error-unsafe-repository/</url>
      
        <content type="html"><![CDATA[<p>本站友链 API 依赖于 GitHub Action 的 <code>action-x/commit</code>Action 来将生成的友链列表 commit 并 push 到 GitHub 仓库。但是在一次新的issue 被通过过后，该 Action 却出现了 以下错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: unsafe repository (&#x27;/github/workspace&#x27; is owned by someone else)</span><br></pre></td></tr></table></figure><p>该错误通常会在 Fork 仓库中执行 Action 时出现，而将<code>action-x/commit</code> 升级至<code>github-actions-x/commit@v2.9</code> 即可解决问题。</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> GitHub Action </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我为什么选择 Flarum 作为我的论坛框架，以及一个免费的 Flarum 托管：FreeFlarum</title>
      <link href="/2022-05-07-Why-Flarum-and-FreeFlarum/"/>
      <url>/2022-05-07-Why-Flarum-and-FreeFlarum/</url>
      
        <content type="html"><![CDATA[<p>最近我投入了大量的时间精力到我的新 Minecraft 服务器 <ahref="https://mc.hmu.ac.cn">MC@HMU</a>上（网站仍未完成），而我也需要为这个服务器建立一个论坛以提供审核申请等服务。在警告一些考虑之后，我选择了<a href="https://flarum.org">Flarum</a>（<ahref="https://github.com/flarum">GitHub</a>）作为我的论坛框架，接下来我来讲讲为什么我做出这个选择，以及介绍一个简单快速的Flarum 托管平台，<ahref="https://github.com/flarum">FreeFlarum</a>。</p><span id="more"></span><h2 id="flarum-的优点">Flarum 的优点</h2><p>首先，我想来讲讲 Flarum 的优点，我稍后还会讲讲 Flarum的缺点，你可以依照我的情况综合考虑。</p><ol type="1"><li><p>美观：</p><p>以 <a href="https://discuss.flarum.org.cn/">Flarum 中文社区论坛</a>为例：</p><p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/flarum-cn-discuss.png" fancybox="true"/></div></div></p><p>相对于大部分其他论坛框架来说，Flarum是相对简洁美观的，而这是我选择论坛框架的时候考虑的首要因素，因为我认为网站的美观性会很影响使用和浏览体验。</p></li><li><p>超强的自定义能力：</p><p>Flarum 支持使用 HTML 自定义页眉页脚，支持自定义CSS，也支持在各种需要图标的地方使用 <ahref="https://fontawesome.com">FontAwsome</a>，所以这是很吸引人的。</p></li><li><p>强大的插件能力：</p><p>Flarum支持各种插件，你可以加入各种语言，以及可以加入文章标签，FancyBox，头衔，查看编辑记录甚至是封禁IP 等功能的支持，这是一个非常优秀的特性。而 Flarum还拥有完善的插件开发群体，让这个体验进一步优化。</p></li><li><p>轻量化：</p><p>Flarum在设计之初就考虑到了轻量化，而这点还会与下一点相结合。</p></li><li><p>速度：</p><p>由于 Flarum 是很轻量化的，其加载速度本就拥有优势，如果使用合适的CDN，其响应速度是非常优秀的。</p></li><li><p>部署：</p><p>Flarum 和其插件可以使用 docker pull 或者 composer安装，所以整体部署是相对简单的。</p></li></ol><h2 id="flarum-的缺点">Flarum 的缺点</h2><p>以上就是 Flarum 的优点，但对应的，Flarum也有不少缺点，你还是需要综合考虑你的需求来决定。</p><ol type="1"><li><p>过于依赖插件</p><p>是的，拥有插件是个好事，但是 Flarum本体其实缺少很多功能，虽然这些功能可以通过插件实现，但是过于依赖插件可能会在开发者停止维护或者出现兼容性问题时造成严重的问题。</p></li><li><p>缺少一些设计</p><p>继续上一点，如果没有插件，Flarum甚至缺少让用户将图片上传到你服务器的功能，而这种严重的功能缺失还有很多，就不列举了。</p></li><li><p>兼容性问题</p><p>Flarum插件在我自行部署的时候出现过不少兼容性问题，而解决这些问题相当令人头大。</p></li></ol><h2 id="为什么选择-flarum">为什么选择 Flarum？</h2><p>为什么选择 Flarum？原因就是，我很喜欢 Flarum的这些优点，而我也相对可以忍受这些缺点，所以 Flarum被我选择成为我的主要论坛框架了。</p><h2 id="freeflarum">FreeFlarum</h2><p><a href="https://github.com/flarum">FreeFlarum</a> 是一个免费的Flarum 托管服务。你只要拥有一个邮箱就可以注册并拥有你自己的 Flarum论坛而不需要经历繁琐的服务器配置。<ahref="https://mc.hmu.ac.cn">MC@HMU</a> 的论坛 <ahref="https://bbs.mc.hmu.ac.cn">MC@HMU BBS</a> 就托管在此。</p><p>FreeFlarum在初始化时为你建成的论坛也包含了大部分你会需要的插件，而不需要你自己去找到并安装。返回到前两点缺点，FreeFlarum直接提供了插件的服务相对的缓解了这些缺点的带来的麻烦。同时，Flarum本体和插件的更新由 FreeFlarum负责，所以也相对的缓解了第三点缺点带来的问题。同时，FreeFlarum支持自定义域名，还提供了免费 SSL，爬虫优化，CloudflareCDN（实测速度还可以接受）等功能，所以 FreeFlarum对于懒得折腾的人是个不错的选择。</p><p>但 FreeFlarum 也有缺点，例如你需要赞助才可以移除<code>A free forum powered by FreeFlarum</code>的页脚或者添加非内置的插件。而你的论坛也可能会因为长期无访问而被存档（可以恢复）。但是考虑到FreeFlarum是公益项目，而且服务器等资源确实需要资金，所以我认为可以接受这些缺点。</p><hr /><p>希望本文给你提供了一些参考，GL&amp;HF！</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论坛 </tag>
            
            <tag> Flarum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Warp 终端上手第一印象</title>
      <link href="/2022-04-17-Hands-On-Warp-Terminal/"/>
      <url>/2022-04-17-Hands-On-Warp-Terminal/</url>
      
        <content type="html"><![CDATA[<p>前段时间在逛 GitHub 的时候偶然发现了 <ahref="https://github.com/warpdotdev/Warp">Warp</a>这款终端，而它带来的一些例如输出块，辅助等功能也立即吸引了我，所有我立即将其下载并上手了一下。</p><span id="more"></span><h2 id="登录">登录</h2><p>截至目前（2022 年 04 月 17 日），初次使用 Warp 仍然需要登录 GitHub才可以使用，根据其隐私页面的解释：</p><div class="tag-plugin quot"><p class="content" type="text">When Warp comes out of beta, login via Github will not be required. <br/><br/> Right now, in our beta phase, we require a user login in order to access Warp. This just gives us access to the email associated with your Github account.</p></div><p>目前需要登录才可以使用是因为 Warp 目前在 Beta阶段，而且开发者需要收集测试人员的联系方式。基于大部分软件测试都需要收集测试者的联系方式的情况，Warp软件本身就开源的情况，以及 GitHub在登录时仅提供邮箱的提示，我认为目前可以信任这款软件，我也相信在 Beta结束后这款软件就不再需要登录。如果你真的非常在乎登录，那么建议等待正式版发布。</p><h2 id="第一眼">第一眼</h2><p>在启动之后，你会看到这个页面（这并非我第一次启动的页面，而且我更改了主题）：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/warp-terminal-main.png" fancybox="true"/></div></div><p>它包含一个我们都很熟悉的命令输入行（底部），以及两个快捷键提示。如果你只需要一个普通的终端，那么你已经可以直接使用了。</p><h2 id="命令面板">命令面板</h2><p>在使用 <kbd>⌘</kbd> + <kbd>P</kbd> 之后，你将能够看到这个框</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/warp-terminal-command-palette.png" fancybox="true"/></div></div><p>这就是你的 CommandPalette（命令面板）。在这个提示框里你能看到目前所有的功能和与其绑定的快捷键。</p><h2 id="命令提示">命令提示：</h2><p>在使用 <kbd>^</kbd> + <kbd>⇧</kbd> + <kbd>R</kbd>之后，你将能够看到如下提示：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/warp-termianl-workflow.png" fancybox="true"/></div></div><p>这就是 ”工作流”页面，本质上，这就是将各种工具的常用命令集合在一起，你可以通过选中它们来选择你需要进行的操作。Warp将会负责自动帮你补全命令的大部分内容和提示你需要填写的参数，而你只需要填写一部分参数。例如增加一个git 远程分支：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/warp-termianl-workflow-git.png" fancybox="true"/></div></div><p>而且用户可以自行增加其他的 “工作流”，来让 Warp自动帮你生成所需的命令，而你每次只需要填写部分内容。</p><p>同时，使用 <kbd>^</kbd> + <kbd>R</kbd>将会看到一个可以浏览的命令历史界面（直接点击上方向键也会显示一个略微简易一点的命令历史界面）。</p><h2 id="命令块">命令块</h2><p>我们使用的许多指令都会有很多输出，在 Warp中，点击一段输出将会高亮整个命令和其输出，按上/下方向键可以前往前/后一个命令的开头。</p><h2 id="辅助的使用">辅助的使用</h2><p>其实某些人是不喜欢辅助的，他们认为这会降低在无辅助工具的情况下使用各种工具的能力。其实这无不道理，目前各种IDE 层出不穷，每个 IDE 都有自己的辅助和补全功能，而例如 GitHub Copilot的 AI 代码生成更是发展快速。我相信不少人一下子从装满插件的 IDE换成记事本写代码都会极其不适应。但同时，这些辅助又确实提升了我们的工作效率，见仁见智吧。</p><h2 id="总结">总结</h2><p>Warp 的一些想法确实很不错，我目前仍为大量的使用Warp，所以无法给出完整的点评，但是看得出来 Warp的开发者是有独特的想法的。而且 Warp以后还会主打团队协作功能，例如多人分享命令行或者直接在命令行里运行文档里的指令，这是值得期待的。</p><hr /><p>如果你也对这个命令行有兴趣的话，可以前往他们的<ahref="https://www.warp.dev">官网</a>下载（目前仅支持 macOS，但官方表示Linux, Windows, 和 Web (WASM) 都在开发中）。GL&amp;HF!</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 上手 </tag>
            
            <tag> 终端 </tag>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[大事记] 加入十年之约</title>
      <link href="/memorabilia-2022-04-13-join-foreverblog/"/>
      <url>/memorabilia-2022-04-13-join-foreverblog/</url>
      
        <content type="html"><![CDATA[<p>在于 UTC 时间 2022 年 04 月 13 日提交申请之后，我已于 UTC 时间 2022年 04 月 13 日下午 1:19收到来自十年之约项目组的审核通过通知，本站已成为十年之约正式成员！</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/foreverblog-email.png" fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/foreverblog-1.png" fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/foreverblog-2.png" fancybox="true"/></div></div><h2 id="关于大事记">关于大事记</h2><p>本站将从现在开始更新大事记，记录博客的各种里程碑和大改动，详细时间线可以去<ahref="https://www.cubik65536.top/memorabilia/">此处</a>查看。</p><hr /><p>下一篇文章在路上了！本周末见！</p>]]></content>
      
      
      <categories>
          
          <category> 大事记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>[置顶] 大事记</title>
      <link href="/memorabilia/"/>
      <url>/memorabilia/</url>
      
        <content type="html"><![CDATA[<p>此处记录了本站的一些重要的事件（里程碑、新的内容与成就等）。</p><span id="more"></span><div class="tag-plugin timeline"><div class="timenode" index="0"><div class="header"><p>2021-01-10</p></div><div class="body fs14"><p><strong><em>本博客创立，使用了 <ahref="https://vuepress.vuejs.org">VuePress</a> 作为框架以及 <ahref="https://doc.xugaoyi.com">vuepress-theme-vdoing</a>作为博客主题</em></strong></p></div></div><div class="timenode" index="1"><div class="header"><p>2021-01-10</p></div><div class="body fs14"><p><strong><em>本博客发布了第一篇文章</em></strong></p></div></div><div class="timenode" index="2"><div class="header"><p>2021-05-16</p></div><div class="body fs14"><p><strong><em>本博客改用 <a href="https://hexo.io">Hexo</a>作为框架以及一个自行改动的 <ahref="https://xaoxuu.com/wiki/stellar/">hexo-theme-stellar</a>分支作为博客主题，同时对默认主页等功能进行了一些调整</em></strong></p></div></div><div class="timenode" index="3"><div class="header"><p>2021-06-26</p></div><div class="body fs14"><p><strong><em>对博客主题分支的第一个大改动，实现了 macOS风格的代码块</em></strong></p></div></div><div class="timenode" index="4"><div class="header"><p>2021-11-12 ~ 2022-01-03</p></div><div class="body fs14"><p><strong><em>对博客主题的页面底部信息作出了一些改变</em></strong></p></div></div><div class="timenode" index="5"><div class="header"><p>2022-04-13</p></div><div class="body fs14"><p><strong><em><ahref="https://www.cubik65536.top/memorabilia-2022-04-13-join-foreverblog/">加入十年之约</a></em></strong></p><p>本站已经正式的成为了<ahref="https://www.foreverblog.cn">十年之约</a>的成员，让我们一起坚持下去！</p><p>本站十年之约大事记页面：<ahref="https://www.foreverblog.cn/blog/2992.html"class="uri">https://www.foreverblog.cn/blog/2992.html</a></p></div></div><div class="timenode" index="6"><div class="header"><p>2022-05-06</p></div><div class="body fs14"><p><strong><em>实现页面侧栏底部 Font Awesome标志在不同颜色设置下的可见性适配</em></strong></p></div></div><div class="timenode" index="7"><div class="header"><p>2022-08-04</p></div><div class="body fs14"><ul><li><p><strong><em>在侧边栏中加入了<ahref="https://foreverblog.cn/go.html">十年之约 -虫洞</a>链接，访问者们可以通过此链接访问其他十年之约成员的博客！</em></strong></p></li><li><p><strong><em>在侧边栏中加入了<ahref="https://travellings.link/">开往</a>链接，访问者们可以通过此链接访问其他开往成员的博客！</em></strong></p></li></ul></div></div><div class="timenode" index="8"><div class="header"><p>2022-08-17</p></div><div class="body fs14"><ul><li><strong><em>将博客的评论系统更换为 <ahref="https://waline.js.org">Waline</a></em></strong></li></ul></div></div><div class="timenode" index="9"><div class="header"><p>2022-11-22</p></div><div class="body fs14"><ul><li><strong><em>增加时间线动态与朋友圈动态功能</em></strong></li></ul></div></div><div class="timenode" index="10"><div class="header"><p>2022-11-26</p></div><div class="body fs14"><ul><li><strong><em>重构本主题使用的下游 hexo-theme-stellar仓库，重新整理了一下曾经进行的自定义更改</em></strong></li></ul></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 大事记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>macOS iTerm2 热键悬浮窗口</title>
      <link href="/2022-04-12-iTerm2-Floating-Window/"/>
      <url>/2022-04-12-iTerm2-Floating-Window/</url>
      
        <content type="html"><![CDATA[<p>本文我将会简单地讲述一下 <strong>macOS iTerm2热键悬浮窗口</strong>的配置，以通过直接使用快捷键来达到下图效果：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/iterm2-floating-window-demo.png" fancybox="true"/></div></div><span id="more"></span><h2 id="配置步骤">配置步骤：</h2><div class="tag-plugin note" color="orange"><div class="title">注意！本文基于</div><div class="body"><p>iTerm2 <strong>Build 3.4.15</strong>操作，本文提到的方法可能不适用于更新/旧的版本</p></div></div><ol type="1"><li>打开 iTerm2</li><li>使用快捷键 <kbd>⌘</kbd> + <kbd>,</kbd> 打开设置页面</li><li>点击上方的 <code>Keys</code> 选项卡</li><li>点击 <code>Hotkeys</code> 选项卡</li><li>选择 <code>Create a Dedicated Hotkey Window...</code></li><li>点击 <code>Hotkey</code> 右侧的 <code>Click to Set</code></li><li>在 <code>Click to Set</code> 变为 <code>Recording</code>之后在键盘上敲下你想要的快捷键</li><li>勾选下方的 <code>Floating window</code></li><li>点击右下角的 <code>OK</code></li><li>大功告成！在另一个页面试试吧！</li></ol>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 终端 </tag>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏开发物语+ (Game Dev Story+) 体验</title>
      <link href="/2022-04-07-DevGameStory/"/>
      <url>/2022-04-07-DevGameStory/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>今天在逛 App Store 的时候偶然在 Arcade 区域看到了《Game DevStory+》，即为 <ahref="https://zh.wikipedia.org/wiki/开罗游戏">日本开罗游戏</a> 于 1997年 4 月在 Windows平台上发布的《游戏开发物语》（日语：ゲーム発展途上国）的 iOS 手游的Arcade 版本。鉴于看到的评价普遍不错，我就把它下载下来试了试。</p><h2 id="简介">简介</h2><p>这个游戏简单来说就是让玩家管理一个游戏开发公司，并不断冲击最高发售量和营业额。在游戏里，你可以选择开发不同类型的游戏，安排不同能力的员工进行开发，并将游戏登陆在不同平台上。而每游戏内的20年一个游戏就会迎来结局，虽然还能继续玩下去，但是达成的新销售额不会再被计算，而你需要重新开一个新的游戏来冲击纪录。</p><h2 id="开头">开头</h2><p>在最开始玩家只能在最简单的两平台上开发游戏，而且员工能力并不是非常优秀，但是你仍然能够简单的获得一些资金并和平台签订授权，继续发展。</p><h2 id="中期">中期</h2><p>到中期，大量生产商会发布各种机器，而授权费用也会水涨船高，在我游玩的过程中，我一度陷入资金链断裂的情况，需要注意。</p><h2 id="后期">后期</h2><p>在你拥有一些资金病拥有几个优秀的员工之后，难熬的中期就结束了。此时你会发现游戏难度降得很快，你不再会需要担心游戏发售量很低。但是，别忘了，每个游戏里的20 年过后你的更高销售额就不再被计算了，而我刚到后期没多久游戏里的 20年就到了。</p><h2 id="总结">总结</h2><p>总的来说，这个游戏并不差，如果你恰好拥有 Apple Arcade或者一点额外的钱，不妨试试这个游戏。</p><hr /><p>GL&amp;HF!</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
            <tag> 体验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Ubuntu 20.04 上安装 KDE desktop 并使用 Xrdp 远程连接</title>
      <link href="/2022-03-11-Install-KDE-and-Xrdp-on-Ubuntu/"/>
      <url>/2022-03-11-Install-KDE-and-Xrdp-on-Ubuntu/</url>
      
        <content type="html"><![CDATA[<p>在本文中，我将简单的带大家了解如何在 Ubuntu 20.04.3 LTS 上安装 KDEdesktop 桌面环境并使用 Xrdp 进行远程桌面连接</p><span id="more"></span><h2 id="安装-kde-desktop-桌面环境">1. 安装 KDE desktop 桌面环境</h2><p>在命令行中执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt upgrade</span><br><span class="line">sudo apt update</span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/X11/default-display-manager</span></span><br><span class="line"><span class="string">    /usr/bin/sddm</span></span><br><span class="line"><span class="string">    EOF</span></span><br><span class="line">sudo DEBIAN_FRONTEND=noninteractive apt install -y kubuntu-desktop</span><br></pre></td></tr></table></figure><p>KDE desktop 就安装完成啦！接下来重启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><h2 id="安装-xrdp">2, 安装 Xrdp</h2><p>在命令行中执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y xrdp</span><br><span class="line">sudo sed -e <span class="string">&#x27;s/^new_cursors=true/new_cursors=false/g&#x27;</span> \</span><br><span class="line">     -i /etc/xrdp/xrdp.ini</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> xrdp</span><br><span class="line">sudo systemctl restart xrdp</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;startplasma-x11&quot;</span> &gt; ~/.xsession</span><br><span class="line">D=/usr/share/plasma:/usr/local/share:/usr/share:/var/lib/snapd/desktop</span><br><span class="line">C=/etc/xdg/xdg-plasma:/etc/xdg</span><br><span class="line">C=<span class="variable">$&#123;C&#125;</span>:/usr/share/kubuntu-default-settings/kf5-settings</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF &gt; ~/.xsessionrc</span></span><br><span class="line"><span class="string">    export XDG_SESSION_DESKTOP=KDE</span></span><br><span class="line"><span class="string">    export XDG_DATA_DIRS=$&#123;D&#125;</span></span><br><span class="line"><span class="string">    export XDG_CONFIG_DIRS=$&#123;C&#125;</span></span><br><span class="line"><span class="string">    EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | \</span></span><br><span class="line"><span class="string">  sudo tee /etc/polkit-1/localauthority/50-local.d/xrdp-NetworkManager.pkla</span></span><br><span class="line"><span class="string">    [xrdp-Netowrkmanager]</span></span><br><span class="line"><span class="string">    Identity=unix-group:sudo</span></span><br><span class="line"><span class="string">    Action=org.freedesktop.NetworkManager.network-control</span></span><br><span class="line"><span class="string">    ResultAny=no</span></span><br><span class="line"><span class="string">    ResultInactive=yes</span></span><br><span class="line"><span class="string">    ResultActive=yes</span></span><br><span class="line"><span class="string">    EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | \</span></span><br><span class="line"><span class="string">  sudo tee /etc/polkit-1/localauthority/50-local.d/xrdp-packagekit.pkla</span></span><br><span class="line"><span class="string">    [xrdp-packagekit]</span></span><br><span class="line"><span class="string">    Identity=unix-group:sudo</span></span><br><span class="line"><span class="string">    Action=org.freedesktop.packagekit.system-sources-refresh</span></span><br><span class="line"><span class="string">    ResultAny=no</span></span><br><span class="line"><span class="string">    ResultInactive=yes</span></span><br><span class="line"><span class="string">    ResultActive=yes</span></span><br><span class="line"><span class="string">    EOF</span></span><br><span class="line"></span><br><span class="line">sudo systemctl restart polkit</span><br></pre></td></tr></table></figure><p>然后前往你的另外一台电脑，输入你要远程连接的电脑的 ip就可以连接啦！</p><div class="tag-plugin note" color="yellow"><div class="title">注意！</div><div class="body"><p>请确保你在防火墙中放行了 RDP 服务所需的端口<strong>3389</strong>！</p></div></div><div class="tag-plugin note" color="orange"><div class="title">Tips:</div><div class="body"><p>如果你希望从外网远程到一个内网的机器上，你可以选择进行穿透，在连接远程桌面时使用外网机器ip+ 穿透端口即可。</p></div></div><hr /><p>GL&amp;HF!</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apple Music 体验</title>
      <link href="/2022-01-17-AppleMusicExperience/"/>
      <url>/2022-01-17-AppleMusicExperience/</url>
      
        <content type="html"><![CDATA[<p>我本人重度依赖于音乐，在一个人的时候，写文章/代码的时候，通勤的时候一般都会拿出手机/平板/电脑，打开一个音乐软件停些喜欢的音乐。所以对我来说，找到一个好的音乐流媒体服务挺重要的。我现在已经高强度（指每天至少使用5、6个小时）半年了，所以我将在本文中详细讲一下我选择Apple Music 的原因以及它的优缺点。</p><span id="more"></span><p><strong>本文是我听着 Apple Music 写的</strong></p><h2 id="选择-apple-music-的原因">选择 Apple Music 的原因</h2><p>我之前一度在使用 SpotifyPremium，但是，在我放弃了一个手游坑并且卖掉账号之后，我中国区的 Apple账号中出现了一大笔闲置的余额，同时我也因为临时获得了一部 iPhone而集齐了苹果全家桶于，是我决定先退订 Spotify 去试试 Apple Music。</p><h2 id="优点">优点</h2><p>首先，苹果永远的优势：生态。iOS，iPadOS 以及 macOS全部内置了“音乐”软件。同时，在我体验 Apple Music的这小半年中，它的同步几乎从来没有出现过问题（包括我在安卓手机上安装的版本）。所以这可以说是苹果系列产品最大的一个优势。</p><p>其次，无损音乐以及Dolby Atmos空间音频。在浏览乐曲的时候，你或许会看到Lossless/Hi-Res Lossless、Apple Digital Master 和 Dolbe Atoms的标记。先放开一定需要最贵的设备才能享受的 Dolby Atmos，前几代的 AirPods和 Beats 全部能够使用无损音乐提高部分音质。对于拥有一个送的 Beats Studio的我确实不错。</p><p>最后，根据我的一些朋友的测试，Apple Music在全球都能直接访问，在国内不需要什么额外的连接手段，算是比较好的吧。</p><h2 id="缺点">缺点</h2><p>当然，Apple Music 也有缺点。最明显的就是曲库问题。首先，我发现 AppleMusic 海外区域（我测试的是加拿大区域）的曲库已经相对于 Spotify偏少了，而我之前使用过的国区这个问题更是严重，你可能需要注意。不过对我一个一直只听几个音乐艺术家的几首曲子，再加上Apple Music 仍然支持下载的 mp3/wav 导入并且无线同账号同步，足够了。</p><p>另一个缺点其实并不会特别影响使用，但是体验会有小问题。苹果至今未在任何一个平台的App上支持直接下载所有曲库里的歌曲，只能选择下载一个播放列表。我一般是通过把所有Apple Music的曲子放在我自己的播放列表里，然后再创建一个所有曲子都多放一边的列表，然后下载这个大列表来下载所有音乐。什么？为什么只放Apple Music？</p><p>因为，通过实测，虽然本地导入的歌曲可以正常同步，但是如果你把它放进带有Apple Music 曲目的播放列表里，App会提示这个播放列表不会同步，甚至往同步过的导入歌曲的播放列表也会如此（但实际上没影响），这又是一个严重影响体验的问题。</p><h2 id="总结">总结</h2><p>对苹果全家桶用户来说，Apple Music不失一个很好的选择，尤其是苹果近期推出了 Apple One让用户以更低的价格购买到大部分订阅服务。但是，鉴于不少影响体验的问题，或许对于非苹果全系列用户来说，Spotify以及其他软件或许仍然是个更好的选择。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Apple Music </tag>
            
            <tag> 音乐软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将Linux作为第二主力系统（二）</title>
      <link href="/2021-12-22-DailyDrivingLinux(2)/"/>
      <url>/2021-12-22-DailyDrivingLinux(2)/</url>
      
        <content type="html"><![CDATA[<p><del>Cubik！两周了！你的 Linux主力系统系列呢！</del>你看，这不就来了吗</p><span id="more"></span><h2 id="前言">前言</h2><p>如果你不知道我为什么决定开始使用 Linux作为我的第二个主力系统，你可以去看看上一篇文章：<ahref="../2021-12-05-DailyDrivingLinux(1)">《将Linux作为第二主力系统（一）》</a>。总而言之，由于我获得了额外的一台计算机，而我正好想找点事情折腾一波，于是有了这么一个计划。而在上一篇文章中，我提到了我使用的系统将会在Fedora 与 Manjaro 之间决定，接下来我会告诉你我的决定。</p><h2 id="体验过程">体验过程</h2><p>说实话，我本来是打算把从安装到使用都截图记录下来的。但是在我写稿的时候我发现我根本就没截到什么有意思的图，而且想说的也很少，就算了。</p><h3 id="桌面环境">桌面环境</h3><p>两者由于我都使用了 KDE Plasma作为桌面环境，所以桌面使用体验并没有什么太大差别。虽然据我的朋友 <ahref="https://blog.restent.win/2021/08/25/I-change-my-system-to-Arch-Linux/"><spanclass="citation" data-cites="Restent">@Restent</span></a> 说，他的Manjaro + KDE曾经遇到不少问题，但是考虑到从他遇见问题到现在两者应该都已经更新了不少个新版本，而且我两周的使用下来并为遇到什么问题，所以其实并没影响。但是在系统中文化上，Fedora做的比 Manjaro好不少，尤其是在安装阶段，不过对我一个系统基本用英语的也没差。</p><h3 id="桌面美化">桌面美化</h3><p>两者由于我都使用了 KDE Plasma作为桌面环境（又来），所以在主题设置上并没有什么区别。</p><h3 id="浏览器">浏览器</h3><p>Linux 自带的浏览器向来是Firefox，但是我因为重度依赖各种同步所以选择了 Microsoft Edge。虽然Microsoft 为提供了 rpm 安装包，但并未向 Arch/Manjaro等系统推送单独的安装包。但是 AUR（Arch UserRepository）仍然提供了各个版本的 MicrosoftEdge，所以对我来说没太大差别。</p><h3 id="软件安装">软件安装</h3><p>继上一条我们继续说。Fedora 支持 rpm安装包，习惯了下一步下一步的人一定会更习惯这个方法。虽然 Manjaro没有（或很少有）这种安装包，但是由于基于 Arch，通过 AUR（Arch UserRepository）和命令行来安装需要的软件仍然是非常方便的。而我在 macOS上就已经习惯使用命令行，所以没差。</p><h3 id="开发">开发</h3><p>上 Linux 的一大原因仍然是要去做开发。目前我仍没有在 Linux机器做重度开发的需求，而我平常使用的轻量代码编辑器 Visual Studio Code在两个系统上都工作正常。</p><h3 id="输入法">输入法</h3><p>Linux上的输入法真的是菊中之痛。在两个系统上安装并舒服的使用中文输入法真的都不太容易。</p><h2 id="fedora-or-manjaro">Fedora or Manjaro？</h2><p>最后，到底用哪个？似乎在各种方面上两个系统都打成了平手。那我最后的选择是...<strong>Manjaro Linux</strong>。我现在来告诉你原因，对我来说，Fedora并没有明显的优势，而我使用 Linux 的目标之一是折腾，Manjaro 作为一个基于Arch Linux 的系统在这方面仍然相对有优势。</p><h2 id="结语">结语</h2><p>那么，接下来我会不定期更新我 Linux机器的折腾过程以及相关教程，下次再见～</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将Linux作为第二主力系统（一）</title>
      <link href="/2021-12-05-DailyDrivingLinux(1)/"/>
      <url>/2021-12-05-DailyDrivingLinux(1)/</url>
      
        <content type="html"><![CDATA[<p>这段时间刚好搬家，于是获得了一个额外可以放置第二台主力机和一个额外显示器的机会。趁着这个机会，再加上喜欢折腾，于是我决定为这第二台机器装上Linux。在本篇中，我将会讲到为什么要选择Linux、谁更适合Linux以及我会选择的Linux发行。</p><span id="more"></span><h2 id="为什么选择-liunx">为什么选择 Liunx？</h2><p>其实选择 Linux 的理由很简单。Linux是一个开源、开放、可定制性强的操作系统。而且相对偏向开发者群体。所以这对我一个喜欢折腾的业余开发来说，在合适不过了。当然Linux 相对于Windows还有两个优点，就是系统占用的资源小，而且不强制使用某些硬件（例如TPM2.0）。对我来说，这两个优点是个非常重要的，具体的我会在以后安装系统时再提。</p><h2 id="谁会适合使用-linux">谁会适合使用 Linux？</h2><p>Linux 并非适合所有人，其实大部分人都不太适合。先不说部分 Linux的配置繁琐，大部分的 Linux 桌面环境（Desktop Environment）的体验都不如Winodws 和 macOS。而且部分，甚至是大部分常用软件都与Linux（至少是一部分发行版）有兼容问题。所以，到底谁不适合使用 Linux呢？如果你希望所有的都交给操作系统，基本上不需要考虑驱动的问题，设置全靠自动，安装软件只想下一步，换句话说只想开箱即用完全不折腾的话，Linux并不适合你。如果你一看需要命令行就头疼，Linux不适合你。如果你遇到问题完全不想查资料，Linux还是不适合你。如果你经常使用的一些软件完全不支持 Linux并且没有很好的解决/替代方案时，Linux 也不适合你。那到底谁适合使用Linux？如果你喜欢定制你的系统，愿意折腾的话，Linux是个不错的选择。如果你喜欢折腾，在遇到问题时有时间<strong>而且愿意</strong>查询各种解决方案和各种文档，Linux也适合你。同时，鉴于 Linux 在开发环境中的优势，使用 Linux写代码总体来说会是个挺不错的选择。</p><h2 id="我会考虑使用的-linux-发行">我会考虑使用的 Linux 发行</h2><div class="tag-plugin note" color="red"><div class="body"><p>本列表中列出的是我在确定要更换系统是立即想到的几个我可能会经常使用的操作系统，并非操作系统排名，也并不会列出所有操作系统，仅为根据个人习惯进行的选择。</p></div></div><h3 id="centosrocky-linux其他rhel下游">CentOS/RockyLinux/其他RHEL下游</h3><p>由于都是RHEL的下游，所以我把它们放在了一起。RHEL以及下游是个非常优秀的操作系统。稳定而且安全。但是由于是服务器操作系统，并不谁非常适合日常使用，故暂不考虑。（如果仅做开发的话，其实这几个系统也非常优秀。）我基本上所有的服务器都在使用这些操作系统。</p><p>提醒：CentOSStream并不包含在其中，而CentOS也将只会继续更新维护Stream。</p><h3 id="ubuntu">Ubuntu</h3><p>Ubuntu 可能是新手们认识到的第一个 Linux了，开箱即用且易于上手，但是由于长期使用RHEL操作系统，我早已习惯RHEL系列的包管理器等工具，因此暂不考虑。</p><h3 id="fedora">Fedora</h3><p>RHEL上游操作系统。与RHEL以及下游操作系统本质上并无太多差别。包管理器等工具也都是相同的。最大的不同是，Fedora的操作系统是滚动更新的，这意味着Fedora会比其他RHEL体系中的系统更早收到新功能，但这也意味着安全性和稳定性相对的降低。不过对于日常使用来说，这些缺失带来的问题并不会像在服务器环境下那么严重。因此，Fedora还是目前最常用的 Linux 工作站操作系统之一。而且 Fedora也有一个第三方组织 <a href="https://spins.fedoraproject.org">FedoraSpins</a> 提供着预装着个大桌面环境的 FedoraISO。同时，由于我对RHEL系列较为熟悉，所以Fedora将会是我优先选择的操作系统之一。</p><div class="tag-plugin note" color="yellow"><div class="title">在此提一句，RHEL体系的更新顺序（从上游排名到下游）为：</div><div class="body"><p>Fedora -&gt; CentOS Stream -&gt; RHEL -&gt; CentOS、Rocky等下游</p></div></div><h3 id="arch-linux">Arch Linux</h3><p>Arch Linux一直以极高的定制度闻名。但是，我目前更偏向适用一个相对可以开箱即用的操作系统，所以暂不考虑。</p><h3 id="artix-liunx">Artix Liunx</h3><p>Artix Linux 是个基于 Arch Linux 的操作系统，相对原本的 Arch，Artix已经为用户进行了一些配置，但是仍然保留着很大的定制度。而且不使用systemd。但是由于并不算很火，网络上缺乏各种教程等材料，所以暂时也不考虑。</p><h3 id="manjaro">Manjaro</h3><p>基于 Arch 的 Linux 中最新手友好的操作系统。Manjaro官方为其提供了不少的软件，而且官方也提供了大部分常用桌面环境的ISO。在对新手如此友好的同时，ArchLinux 高定制度等原本的优势也被 Manjaro 保留了。同时，由于 Manjraro在社区的知名度，网络上也存在不少 Manjaro 相关的教程等内容。所以 Manjaro也会是我备选系统之一。</p><h2 id="下一步">下一步</h2><p>在真正的向实体机安装操作系统之前，我将会在虚拟机内先安装我目前唯二真正的备选操作系统：Fedora和 Manjaro。我将会使用我最常用的 KDE Plasma桌面，虚拟机统一分配2核心CPU，4GB内存。我会在接下来一段时间内定期更新这两个操作系统的使用体验，并最终决定使用哪个系统。</p><h2 id="对了">对了</h2><p>我也准备将 Arch安装在虚拟机中，这样想折腾系统的时候可以玩玩。相对于实体机，虚拟机对完炸了的情况下的备份和回滚更加方便。所以，喜欢折腾的各位不妨试试。</p><h2 id="结语">结语</h2><p>对于喜欢折腾的人来说，在一个相对性能已经不够 Windows 使用的电脑上安装Linux 并偶尔使用不失为一个好方法。当然，鉴于目前的情况，Linux仍然不适合普通用户 100%日常使用。但是，如果你想找点事做，折腾一把，不妨试试Linux，GL&amp;HF!</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我对 Notability 转向订阅制的看法、事件后续以及 Notability 软件的替代品</title>
      <link href="/2021-11-09-NotabilityUpdateAndAlternatives/"/>
      <url>/2021-11-09-NotabilityUpdateAndAlternatives/</url>
      
        <content type="html"><![CDATA[<p>（本文撰写于2021年11月1日）</p><p>就在今天（2021年11月1日），Notability官方宣布他们转变为一个免费订阅制软件。而这一决定的公开立刻引起了轩然大波。我将详细讲一下事情的经过，我的看法以及一些解决方案。</p><h2 id="事件起因">事件起因</h2><p>北美洲东部时间2021年11月1日上午11点55分，Notability 官方在 Twitter上发推：《We're officially a FREE app and have some big updates toshare!（我们正式成为了一个免费应用并且有一些大更新要分享！）》。在此推文中包含的文章里，Notability宣布软件将提供免费下载，同时对编辑（没错，编辑，而且实测增删内容都算编辑）、手写识别、备份等功能做出了限制。而以前以买断制购买的用户仅能获得一年的订阅补偿（部分用户似乎并没有收到此补偿），在此之后这些用户也将转变为免费用户。在此信息宣布之后，大量已有用户都表示了不满。</p><p>随后，大量的用户根据苹果审核条款「3.1.2(a) -在转变经营模式为订阅制的时候，开发者不得移除已有用户可以享受的功能」为理由向苹果投诉应用。</p><p>在北美洲东部时间2021年11月2日下午7点50分，Notability宣布将会为以买断制购买的用户一直提供他们已经购买的服务和一些维护成本较低的服务，至此这件事情才算结束。</p><p>2021年11月9日，我收到了来自 Notability 的更新，我的订阅模式变成了Classic，这代表我可以以买断制用户的身份继续使用我购买过的功能。</p><h2 id="我的看法">我的看法</h2><p>其实我并不反对订阅制软件。作为一个开发者，我也部分的认为订阅制软件将会是以后应用开发的大局势。但是作为一个用户，我也很讨厌软件开发商在转变商业模式的时候将我已经购买过的应用拿掉，然后要求我再次付费来获得此功能。所以我对目前Notability提出的解决方案是相对满意的。而且我作为一个用了4年Notability的用户，我个人认为其实大量的新功能我是用不到的，所以新功能需要订阅也不对我产生什么太大的影响。不过，此次事件仍然拉低了我对Ginger Lab，也就是 Notability开发公司的印象，也直接导致我决定开始寻找其他替代方案。</p><h2 id="notability-的替代方案">Notability 的替代方案</h2><h3 id="goodnotes">GoodNotes</h3><p>在 iPad 上一直占据榜首的笔记软件，除了 Notability 自然就是GoodNotes。GoodNotes采用买断，但是大版本更新需要重新付费的商业模式。但也同时给予用户不更新的权利。GoodNotes相对于 Notability缺少了录音和数学公式功能，但是带来了更好的文件分类系统、更多的免费笔记本模版、更多笔的类型和可自定义参数等功能。同时GoodNotes 也提供 macOS 版本，一旦购买 iOS 版本，macOS版本会随之被添加到你的账户中。如果你有充足的预算，GoodNotes仍然是最好的替代方案。</p><h3 id="microsoft-onenote">Microsoft OneNote</h3><p>作为微软 Office 系列的一员，OneNote 没有什么可以挑剔的。OneNote默认向 Onedrive备份并且同步的体验也非常不错。而且数学识别功能一直在线。但是缺点就是...一贯的 Office 系列设计，有的时候看着真的有点难受。如果你已经有了Office，而且需要跨平台写作，OneNote 将会是个不错的选择。</p><h3 id="备忘录">备忘录</h3><p>没错，说的就是 iOS/iPadOS/macOS 自带的备忘录。鉴于最新的 iOS/iPadOS15 和 macOS Monterey 都有了快速备忘录的功能，搭配 iCloud的同步，苹果自家对 Apple Pencil的适配，如果你对笔记软件的额外功能没有太多要求，备忘录其实是个不错的选择。</p><hr /><p>就这样吧！GL &amp; HF!</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Notability </tag>
            
            <tag> Goodnotes </tag>
            
            <tag> 备忘录 </tag>
            
            <tag> 笔记应用 </tag>
            
            <tag> iPad应用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Cloudflare Pages 上部署 Hexo 站点</title>
      <link href="/2021-09-02-DeployHexoWithCloudflarePages/"/>
      <url>/2021-09-02-DeployHexoWithCloudflarePages/</url>
      
        <content type="html"><![CDATA[<p>我一直以来都是使用 Vercel 部署我的 Hexo 博客，但是前几天我需要为我的GitHub 组织创建一个 Hexo 的站点，而 Vercel部署组织仓库是需要付费的。想当然，像我这种<del>白嫖怪</del>资深用户是不可能付费的，所以我选择了自带CDN，主要是免费额度还不少的 CloudflarePages。接下来我们来看看如何在不使用 GitHub Action 的情况下在 CloudflarePages 上部署 Hexo 站点：</p><h2 id="为什么不使用-github-action">为什么不使用 GitHub Action</h2><p>其实 marketplace 有很多很不错的 Hexo 部署Action，但是我需要将我主要的 GitHub Action 运行时间分配给其他仓库，而Cloudflare Pages 免费部署额度是按照调用次数计算的，还算较为划算。</p><h2 id="配置-package.json">配置 package.json</h2><p>由于 Cloudflare 的部署命令不支持<code>&amp;&amp;</code>，所以我们没有办法直接输入<code>npm install &amp;&amp; hexo generate</code>，为了解决这个问题，我们需要在<code>package.json</code> 中添加以下命令：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo clean &amp;&amp; hexo generate&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="配置-cloudflare-pages">配置 Cloudflare Pages</h2><p>在将上述更改 commit 并 push 之后，我们就可以照常部署 Cloudflare Pages了，注意选取正确的仓库和分支，然后在“构建命令”处填写<code>npm run build</code> 即可。</p><p>这样我们就可以把 Hexo 部署到 Cloudflare Pages 中啦！GL&amp;HF!</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Cloudflare Pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 更新日期问题</title>
      <link href="/2021-08-29-HexoUpdateTime/"/>
      <url>/2021-08-29-HexoUpdateTime/</url>
      
        <content type="html"><![CDATA[<p>在刚刚写完并上传上一篇<ahref="https://blog.cubik65536.top/2021-08-29-TransferMinecraftToMicrosoft/">《迁移Minecraft到微软账户》</a>之后，令我困扰许久的另外一个问题又出现了。我博客左侧的《最近更新》的时间排名是错误的。实际显现出来的问题是：无论是我何时撰写的文章，最后显示出来的时间都是最终部署的时间。</p><h2 id="寻找解决方案">寻找解决方案</h2><p>在一阵搜寻之后，我找到了这个 <ahref="https://github.com/xaoxuu/hexo-theme-stellar/issues/44">GitHubIssue:https://github.com/xaoxuu/hexo-theme-stellar/issues/44</a>。而它，解决了所有问题。</p><h2 id="如何解决该问题">如何解决该问题</h2><h3 id="一确定-hexo-版本">一、确定 Hexo 版本</h3><p>本设置需要 Hexo 版本为 5.0 以上才可正常工作</p><h3 id="二编辑配置文件">二、编辑配置文件</h3><p>将 <code>_config.yml</code> 中的 <code>updated_option</code> 的值改为<code>date</code> 即可</p><p>这时，如果你重新生成或部署Hexo，更新日期将会改为撰写时间，同时也会按照从新到旧排序了！GL&amp;HF！</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迁移 Minecraft 到微软账户</title>
      <link href="/2021-08-29-TransferMinecraftToMicrosoft/"/>
      <url>/2021-08-29-TransferMinecraftToMicrosoft/</url>
      
        <content type="html"><![CDATA[<p>前几天我闲来没事登陆了一下 minecraft.net，却收到了来自 Mojang的通知，我终于可以把我的 Mojang账户迁移到微软账户上啦！<del>什么你丫的几天前迁移了现在在发？咕咕咕</del>当然，我还是讲一下迁移过程和随之而来的问题吧。</p><h2 id="为什么要迁移">为什么要迁移</h2><p>这是很多人一直都有的问题。首先，微软账户提供了比以前 Mojang账户更好的安全机制。其次，微软表示，在迁移过程结束之后未迁移的用户将面临无法游玩的问题。那我还是迁移吧<del>披风？真的有人关心吗</del></p><h2 id="迁移过程">迁移过程</h2><p>我在迁移的时候完全没截图什么的，反正就是下一步，然后下一步，然后下一步...</p><h2 id="迁移之后">迁移之后</h2><p>在迁移之后，你将需要使用微软账户来登陆启动器和 <ahref="minecraft.net"><code>minecraft.net</code></a>。除此之外似乎就没什么区别了...哦对了！</p><h3 id="启动器的登录问题">启动器的登录问题</h3><p>在本文撰写之时（2021年8月29日），著名的纯正版第三方启动器 MultiMC仍未支持 Microsoft 账户登陆。而我使用的另一个启动器 HMCL也有微软登陆需要经常手动重新登录的问题，如果你使用第三方启动器的话可能需要注意这类问题。</p><p>2021年12月01日更新：目前，MultiMC、HMCL、PCL等第三方启动器已经都支持了 Microsoft账户登录，第三方启动器已经不成问题！总的来说，迁移至 Microsoft账户已经基本不会对你的体验产生任何负面影响了！</p><h2 id="结语">结语</h2><p>就这样！<strong>GL&amp;HF!</strong></p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Minecraft </tag>
            
            <tag> Microsoft Account </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 的基础使用与 FastGit 加速</title>
      <link href="/2021-08-12-BasicGitUseAndFastGitORG/"/>
      <url>/2021-08-12-BasicGitUseAndFastGitORG/</url>
      
        <content type="html"><![CDATA[<p>在本文中，我将简单的提到如何使用 git，以及如何使用 FastGit 加速GitHub</p><h2 id="如何打开命令行">如何打开命令行</h2><h3 id="windows">Windows</h3><p>使用 Win（键盘上的Windows标志） + R 按键，输入<code>cmd</code>，或者右键开始，选择 <code>命令提示符</code> 或<code>Powershell</code></p><h3 id="macos">macOS</h3><p>Command + 空格，搜索 <code>终端</code> 或者 <code>Terminal</code></p><h3 id="linux">Linux</h3><p>有桌面环境的去应用列表找找 <code>终端</code> 或者<code>Terminal</code>。</p><p>没有的... 你没开玩笑吧？<del>大佬请离开这个页面</del>这就是你的命令行！</p><h2 id="git-使用基础">Git 使用基础</h2><h3 id="安装-git">安装 Git</h3><p>首先，你需要在你的计算机上安装git，你可以先通过在终端执行以下命令来检查 git 是否已安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><p>而如果输出为 <code>git version x.xx.x</code> (x.xx.x为版本号，每人的输出可能不一样)，则代表你已经安装。</p><div class="tag-plugin note" color="yellow"><div class="title">提示</div><div class="body"><p>一般来说，如果你购买的是 Apple Mac系列计算机，则你的系统中应该已经预装了 git</p></div></div><p>如果你没有安装，请按照以下方式安装：</p><h4 id="windows-1">Windows</h4><p>前往<ahref="https://git-scm.com/downloads">下载页面</a>，点击Windows。打开安装包并一直下一步即可。</p><h4 id="macos-1">macOS</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install git</span><br></pre></td></tr></table></figure><h4 id="linux-1">Linux</h4><h5id="基于rpm的linux发行版本suserhel等">基于RPM的Linux发行版本（SUSE，RHEL等）</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dnf install git-all</span><br></pre></td></tr></table></figure><h5id="基于debian的linux发行版吧例如ubuntu">基于Debian的Linux发行版吧（例如Ubuntu）</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install git-all</span><br></pre></td></tr></table></figure><h3 id="git-的基础操作">Git 的基础操作</h3><p>注意，本章所有内容都将以 <code>https://github.com/author/repo</code>作为演示仓库链接，在使用时记得替换为你自己的仓库。</p><div class="tag-plugin note" color="yellow"><div class="title">提示</div><div class="body"><p>本篇针对的读者是没有任何基础但是需要临时使用 git与其他人合作的用户。故不提起 init 等其他操作。更详细的使用可以参考xaoxuu 大佬的<a href="https://xaoxuu.com/wiki/git/">Git实用教程</a> 和xugaoyi 大佬的<ahref="https://xugaoyi.com/note/git/">Git学习笔记</a></p></div></div><h4 id="登录">“登录”</h4><p>准确的来说是将你的用户名和邮箱配置好，让 git 知道这是你做的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>使用以下命令可以检查配置是否正常：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --list</span><br></pre></td></tr></table></figure><p>由于这个身份极易被伪造，所以某些人会使用PGP来验证签名。如果你在用，你就需要进行额外操作。<del>大佬请离开这个页面x2</del></p><h4 id="clone">clone</h4><p>简单来说，这个操作是为了将你的文件下载到你的机器上，打开命令行，输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/author/repo</span><br></pre></td></tr></table></figure><p>在你完成之后，所有云端文件都应该存储到你的计算机上了。如何找到文件夹？</p><h5 id="windows-2">Windows</h5><p>查看下方截图红框内的内容，这就是你的路径。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/CMD" fancybox="true"/></div></div><h5 id="macos-linux">macOS &amp; Linux</h5><p>一般都在你的 User 家目录下，使用了 cd 命令的各位请自行寻找<del>大佬请离开这个页面x3</del></p><h4 id="编辑">编辑</h4><p>ummm。打开你喜欢的编辑器，写吧！</p><p>推荐编辑器：Visual StudioCode（样样行），Typora（Markdown，md文件）</p><h4 id="commit">commit</h4><p>这一步简单来说就是告诉软件，你要提交一个更改。先进入你的 git路径（一般是你 clone 的路径再 <code>cd &lt;文件夹名&gt;</code>）</p><div class="tag-plugin note" color="yellow"><div class="title">提示</div><div class="body"><p>文件夹名一般就是 repo 名称，即为<code>https://github.com/author/repo</code> 中的 <code>repo</code></p></div></div><p>输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;信息&quot;</span></span><br></pre></td></tr></table></figure><p><code>信息</code> 一般填写你更改的内容</p><h4 id="push">push</h4><p>这一步简单来说就是把你commit过的内容提交给服务器。输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin</span><br></pre></td></tr></table></figure><h4 id="pull">pull</h4><p>这一步简单来说就是把服务器有但你本机没有的更改（例如别人做的改动）弄到你机器上。输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin</span><br></pre></td></tr></table></figure><h2 id="使用-fastgit-加速">使用 FastGit 加速</h2><p>由于某些地区 GitHub 访问受限，所以我们需要使用 FastGit来进行加速。使用方法很简单：将链接内的 <code>github.com</code> 替换为<code>hub.fastgit.org</code> 即可。</p><p>即为将 <code>https://github.com/author/repo</code> 替换为<code>https://hub.fastgit.org/author/repo</code>。</p><p>其他操作可参考 <ahref="https://doc.fastgit.org/zh-cn/guide.html#web-的使用">FastGit用户手册</a></p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么我要选择 Rocky Linux 作为服务器操作系统？</title>
      <link href="/2021-08-08-WhyRockyLinux/"/>
      <url>/2021-08-08-WhyRockyLinux/</url>
      
        <content type="html"><![CDATA[<p>大家都知道，CentOS 8将在今年（文章于2021年8月8日撰写）年底停止支持，CentOS 将不再作为RHEL（Red Hat Enterprise Linux）的下游构建版本，而是转变为与 Fedora类似的上构建版本。同时，CentOS 也会开始采用滚动更新，这意味着 CentOS作为服务器操作系统的稳定性开始成为问题。而市面上随之而来的还有各种替代方案，那为什么我选择了Rocky Linux 呢？</p><h2 id="太长了我不看">太长了！我不看！</h2><p>如果你想直接知道结论，那么我选择 Rocky Linux的原因无非就三点：靠谱，稳定，习惯。如果你还想知道我为什么得出了这个结论，请继续看下去。</p><h2 id="其他替代方案">其他替代方案</h2><p>在真正开始讨论我为什么使用 Rocky Linux之前，我想聊聊为什么<strong>不</strong>使用以下几种方案。</p><h3 id="rhel">RHEL</h3><p>花钱？不可能的，这辈子都不可能花钱的。</p><h3 id="ubuntu-server">Ubuntu Server</h3><p>由于我长期使用 Fedora 和 CentOS，已经习惯了 RHEL系列的操作系统，有点不太能对于转变系统所带来的变化（例如包管理器的变化）</p><h3 id="centos-7">CentOS 7</h3><p>没错，这个比 CentOS 8老的系统到2024年才结束支持，但是各种新版环境安装极为繁琐，所以放弃。</p><h3 id="oracle-linux">Oracle Linux</h3><p>这是一个由甲骨文公司维护的 RHEL 下游操作系统。理论上与 CentOS并没有太大差别，而我现在甲骨文云上的计算实例也全部在运行着 OracleLinux，但是我仅仅把它当作在 Oracle Cloud 上的专属方案使用。</p><h3 id="其他发行版包括其他-rhel-下游">其他发行版（包括其他 RHEL下游）</h3><p>由于我对这些发行版本不够了解，所以放弃。</p><h3 id="rocky-linux">Rocky Linux</h3><p>接下来我来讲讲为什么使用 Rocky Linux。</p><h2 id="靠谱">靠谱</h2><p>Rocky Linux 由最开始的 CentOS 创始人 Gregory Kurtzer创办，对我来说，这点足以证明 Rocky Linux 的可信性。</p><h2 id="稳定">稳定</h2><p>对于服务器来说，稳定性是非常重要的。而 Rocky Linux 是一个 RHEL下游构建版本，理论上是能提供 RHEL 以及以前 CentOS 提供的稳定性的。</p><h2 id="习惯">习惯</h2><p>接续上一点，Rocky Linux 是一个 RHEL 下游构建版本，所以各种操作都与RHEL 和 CentOS 没有太大差别。甚至 Rocky Linux 提供了一个脚本来帮助用户从RHEL/CentOS 8/Oracle Linux等系统转换到 RockyLinux，这对于大部分用户来说应当是个好消息。</p><h2 id="结语">结语</h2><p>这就是为什么我选择将我的服务器操作系统换成了 Rocky Linux。其实我从Rocky Linux 项目开始的时候就加入了 Rocky Linux CN社区，我也贡献了一篇月更新报告的翻译，作为一个早期支持者（笑），希望Rocky 越做越好。</p><hr /><p>GL, HF.</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注册 MS 365 Developer Program 并确保它可以长期使用</title>
      <link href="/SignUpAndUseMS365DeveloperProgram/"/>
      <url>/SignUpAndUseMS365DeveloperProgram/</url>
      
        <content type="html"><![CDATA[<div class="tag-plugin note" color="yellow"><div class="title">提示</div><div class="body"><p>本文有部分参考、引用 <a href="https://blog.restent.win">RestentOu</a> 的 <ahref="https://blog.restent.win/2021/07/22/Renew-MS-365-E5-plan/">《如何续订MS 365 E5 开发者计划》</a>一文。 本文有使用该《如何续订 MS 365 E5开发者计划》一文的图片。<del>才不是懒得自己截图了呢</del> 《如何续订 MS365 E5 开发者计划》一文基于<ahref="https://creativecommons.org/licenses/by-nc/4.0/">CC BY-NC4.0</a>协议</p></div></div><p>相信不少人都听说过 Microsoft 365 Developer Program，或者说 MicrosoftE5。这是微软为开发人员推出的计划，目的是可以为开发者提供全套的 Microsoft365 套件。当然不少人（包括我的朋友Restent）都依靠着这个计划为自己团队提供带有域名的邮箱访问。</p><p>在本文中，我将提到如何注册这个计划，以及如何一直延续这个项目的可用性。</p><h2 id="一注册-microsoft-365-developer-program">一、注册 Microsoft 365Developer Program</h2><h3 id="进入官网">进入官网</h3><p>首先，前往 <ahref="https://developer.microsoft.com/zh-cn/microsoft-365/dev-program">Microsoft365 Developer Program 官网</a> 并点击<code>立即加入</code></p><h3 id="登录你的-microsoft-账户">登录你的 Microsoft 账户</h3><p>在这里，你需要选择一个微软账户（你的 hotmail 或 outlook账户）并登录</p><h3 id="设置你的-e5-订阅">设置你的 E5 订阅</h3><p>现在，你应该会进到<code>Microsoft 365 开发人员计划</code>页面，点击<code>设置 E5 订阅</code>。然后你会看到下方这样的页面：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/SetupE5.png" fancybox="true"/></div></div><h3 id="填入你的基本信息">填入你的基本信息</h3><p>在此处，你应该会看到一个让你填写信息的页面，选择你的国家，填写你的用户名和域。注意，这里的域会生成一个<code>你输入的东西</code>+<code>.onmicrosoft.com</code>组成的域名，如果你希望使用你自己的域名，需要等到注册完成之后进入管理页面设置。然后写好你的密码。这里填写的信息就是你的E5 订阅管理员的账户信息。</p><p>然后验证你的手机号码。</p><p>然后你会看到下方这样的页面：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img.cubik65536.top/EnterYourInfo.png" fancybox="true"/></div></div><div class="tag-plugin note" color="red"><div class="title">注意</div><div class="body"><p>我的账户<strong>已经</strong>与我的 GitHub账户进行了关联，所以上方会有 GitHub 徽标，新注册用户是没有该徽标的！</p></div></div><p>到这里你就设置成功了，你接下来可以到 <ahref="https://admin.microsoft.com">Microsoft 365 Admin Center</a>处登录你刚刚注册的，以<code>onmicrosoft.com</code>结尾的账户。在那个站点上，你可以添加用户，域名以及做出其他设置。这些以后再讲。</p><h2 id="二续期你的-e5-订阅">二、续期你的 E5 订阅</h2><p>微软不可能就这么往外送订阅对吧？微软给 Microsoft 365 DeveloperProgram成员续期是有要求的。目前已知要求是“持续有开发活动”。但我并未找到任何资料直接解释如何衡量开发活动是否足够。</p><p>或许你知道以前有各种 GitHub仓库来帮助你续期该计划，但是这种东西说挂就挂。所以接下来解释一个更靠谱一点的方案：关联GitHub 活动</p><h3 id="关联-github">关联 GitHub</h3><p>如果你尚未关联GitHub，则你应该可以在你的仪表盘界面上方看到这样的提示：</p><blockquote><p>新增内容！将开发人员帐户与 GitHub 帐户链接。GitHub 活动将订阅续订Microsoft 365 开发人员版。</p></blockquote><p>点击 <code>链接账户</code> ，或者点击右上方的小齿轮，再点击左侧的<code>已链接的账户</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://i.yecdn.com/images/2021/07/22/8b0c8d5b03f5c7fc11bed2ba6628f7ab.jpg" fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://i.yecdn.com/images/2021/07/22/2358b10f0d2aabb4877d76f7aef922c5.jpg" fancybox="true"/></div></div><p>点击 <code>同意并链接 Github 账户</code>，并在 Github认证即可。认证完成后你将会看到：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://i.yecdn.com/images/2021/07/22/8965973c8c257c9cbe2013f39b55d2ab.jpg" fancybox="true"/></div></div><p>这样，只要你经常有 GitHub 活动（commit，issue 和 pull request等全部被计算在内），你大概率就会获得续期。</p><hr /><p>就是这样！那我们，下次再见～</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Microsoft 365 </tag>
            
            <tag> 常用工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为 Oracle Cloud 计算实例开放所有访问端口</title>
      <link href="/EnablePortsForOracleCloud/"/>
      <url>/EnablePortsForOracleCloud/</url>
      
        <content type="html"><![CDATA[<p>我最近在家里搭建了一个 CentOS 服务器（即为上一篇文章，<ahref="https://blog.cubik65536.top/pages/c77340/">《使用 Visual StudioCode SSH 远程访问控制 CentOS 7服务器》</a>里提到的服务器），但是由于没有很好的公网方案，所以我需要一个内网穿透来实现外网访问服务器。经过一段时间的考虑，我决定使用Oracle Cloud 免费提供的 VM 实例来做穿透服务端。但是 Oracle Cloud默认只放行远程 SSH 控制所使用的的 22号端口的流量。而不管是内网穿透服务端，或是被穿透的服务本身都需要各种不同的端口，所以我将在此处说一下如何允许所有端口的入站流量。</p><div class="tag-plugin note" color="yellow"><div class="title">Tips</div><div class="body"><p>请注意，此处我是为了方便以后的操作开放所有端口，如果你确定你只需要几个端口，为了安全性考虑，我仍然建议您仅开放您所需要的端口。我在本文中只会提到如何开放所有端口。</p></div></div><h2 id="一前往-oracle-cloud-相关设置">一、前往 Oracle Cloud相关设置</h2><p>登陆 Oracle Cloud，点击左上角的三个横杠，选择网络 &gt; 虚拟云网络</p><div class="tag-plugin image"><div class="image-bg"><img src="https://cdn.jsdelivr.net/gh/Cubik65536/Cubik-Image-Hosting-Service/public/assets/img/20210111220113.png" fancybox="true"/></div></div><p>然后选择实例所使用的虚拟云网络，选择实例所处的子网。如果你不确定的话你可以前往你的计算实例的详细信息页面，直接点击“主要VNIC”下的“子网”后面的子网名称。</p><h2 id="二设置安全规则">二、设置安全规则</h2><p>点击子网页面下方正在使用的安全列表。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://cdn.jsdelivr.net/gh/Cubik65536/Cubik-Image-Hosting-Service/public/assets/img/20210111220606.png" fancybox="true"/></div></div><p>查看下方的入站规则，由于此处我已进行设置，所以应该和你的界面不同。选择“IP协议”为 TCP 的那项，点击右边的三个点，选择编辑。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://cdn.jsdelivr.net/gh/Cubik65536/Cubik-Image-Hosting-Service/public/assets/img/20210111220720.png" fancybox="true"/></div></div><p>在右侧的“IP协议”选择框中，选择“所有协议”（应该是第一个），然后保存更改。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://cdn.jsdelivr.net/gh/Cubik65536/Cubik-Image-Hosting-Service/public/assets/img/20210111221009.png" fancybox="true"/></div></div><p>你接下来会发现最开始只允许 TCP 的那项的“IP协议”变成“所有协议”且“允许“一栏显示”所有端口的所有流量“。至此你就完成了所有设置啦！</p><hr /><p>Credit for cover image: <ahref="https://www.flickr.com/photos/oneilsh/14601920735">CGRB serverroom</a> by Shawn O'Neil on <code>flickr.com</code></p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> Oracle Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Visual Studio Code SSH 远程访问控制 CentOS 7 服务器</title>
      <link href="/VSCodeSSHwithCentOS7Server/"/>
      <url>/VSCodeSSHwithCentOS7Server/</url>
      
        <content type="html"><![CDATA[<h2 id="一配置服务器">一、配置服务器</h2><h3 id="服务器配置">服务器配置</h3><p>操作系统：CentOS 7 x86_64 版</p><p>网卡：Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI ExpressGigabit Ethernet Controller</p><h3 id="配置服务器">配置服务器</h3><p>直接安装 CentOS 即可，CentOS 7已经预装了我们所需的所有程序。但是你仍然需要在防火墙策略内放行 SSH服务所需要的 22 端口。</p><h2 id="二配置-visual-studio-code">二、配置 Visual Studio Code</h2><p>打开 Visual Studio Code 并在扩展商店内搜索 Remote，找到 RemoteDevelopment 并安装，它会同时安装我们需要的 Remote - SSH 等插件。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://cdn.jsdelivr.net/gh/Cubik65536/Cubik-Image-Hosting-Service/public/assets/img/20210110155525.png" fancybox="true"/></div></div><p>至此，我们就完成了 Visual Studio 的配置。</p><h2 id="三访问服务器">三、访问服务器</h2><p>点击右下角的远程访问按钮并选择 Remote SSH：Connect to Host...</p><div class="tag-plugin image"><div class="image-bg"><img src="https://cdn.jsdelivr.net/gh/Cubik65536/Cubik-Image-Hosting-Service/public/assets/img/20210110155733.png" fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://cdn.jsdelivr.net/gh/Cubik65536/Cubik-Image-Hosting-Service/public/assets/img/20210110155904.png" fancybox="true"/></div></div><p>选择 Add New SSH Host，输入『用户名@ip地址』并回车，之后选择一个要更新的 SSH配置文件，然后在右下角的添加成功弹窗处选择 Connect 连接远程服务器。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://cdn.jsdelivr.net/gh/Cubik65536/Cubik-Image-Hosting-Service/public/assets/img/20210110160156.png" fancybox="true"/></div></div><p>在上方弹窗提示 Enter password for『用户名@ip地址』时，输入该用户的密码并回车。至此你就已经成功连接到你的远程服务器上了！此时你的右下角远程连接提示处应该会显示你的远程主机ip。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://cdn.jsdelivr.net/gh/Cubik65536/Cubik-Image-Hosting-Service/public/assets/img/20210110160645.png" fancybox="true"/></div></div>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
            <tag> Visual Studio Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 示例</title>
      <link href="/markdown-example/"/>
      <url>/markdown-example/</url>
      
        <content type="html"><![CDATA[<p>本文件的源文件是一个 Markdown 文件，用于测试部分 Markdown特性的兼容性。</p><span id="more"></span><div class="tag-plugin image"><div class="image-bg"><img src="https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png" fancybox="true"/></div></div><p><strong>目录 (Table of Contents)</strong></p><p>[TOCM]</p><p>[TOC]</p><h1 id="heading-1">Heading 1</h1><h2 id="heading-2">Heading 2</h2><h3 id="heading-3">Heading 3</h3><h4 id="heading-4">Heading 4</h4><h5 id="heading-5">Heading 5</h5><h6 id="heading-6">Heading 6</h6><h4 id="标题用底线的形式heading-underline">标题（用底线的形式）Heading(underline)</h4><h1 id="this-is-an-h1">This is an H1</h1><h2 id="this-is-an-h2">This is an H2</h2><h3 id="字符效果和横线等">字符效果和横线等</h3><hr /><p><del>删除线</del> <s>删除线（开启识别 HTML 标签时）</s><em>斜体字</em> <em>斜体字</em> <strong>粗体</strong><strong>粗体</strong> <strong><em>粗斜体</em></strong><em><strong>粗斜体</strong></em></p><p>上标：X<sub>2</sub>，下标：O<sup>2</sup></p><h3 id="缩写-同-html-的-abbr-标签">缩写 (同 HTML 的 abbr 标签)</h3><blockquote><p>即更长的单词或短语的缩写形式，前提是开启识别 HTML标签时，已默认开启</p></blockquote><p>The <abbr title="Hyper Text Markup Language">HTML</abbr>specification is maintained by the<abbr title="World Wide Web Consortium">W3C</abbr>.</p><h3 id="引用-blockquotes">引用 Blockquotes</h3><blockquote><p>引用文本 Blockquotes</p></blockquote><p>引用的行内混合 Blockquotes</p><blockquote><p>引用：如果想要插入空白换行（即 <code>&lt;br/&gt;</code>标签），在插入处先键入两个以上的空格然后回车即可，<ahref="http://localhost/">普通链接</a>。</p></blockquote><h3 id="锚点与链接-links">锚点与链接 Links</h3><p><a href="http://localhost/">普通链接</a></p><p><a href="http://localhost/"title="普通链接带标题">普通链接带标题</a></p><p>直接链接：<a href="https://github.com"class="uri">https://github.com</a></p><p><a href="http://www.this-anchor-link.com/">锚点链接</a></p><p><ahref="mailto:test.test@gmail.com">mailto:test.test@gmail.com</a></p><p>GFM a-tail link <span class="citation"data-cites="pandao">@pandao</span> 邮箱地址自动链接 test.test@gmail.comwww@vip.qq.com</p><blockquote><p><span class="citation" data-cites="pandao">@pandao</span></p></blockquote><h3 id="多语言代码高亮-codes">多语言代码高亮 Codes</h3><h4 id="行内代码-inline-code">行内代码 Inline code</h4><p>执行命令：<code>npm install marked</code></p><h4 id="缩进风格">缩进风格</h4><p>即缩进四个空格，也做为实现类似 <code>&lt;pre&gt;</code> 预格式化文本( Preformatted Text ) 的功能。</p><pre><code>&lt;?php    echo &quot;Hello world!&quot;;?&gt;</code></pre><p>预格式化文本：</p><pre><code>| First Header  | Second Header || ------------- | ------------- || Content Cell  | Content Cell  || Content Cell  | Content Cell  |</code></pre><h4 id="多行代码块">多行代码块</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_N = <span class="number">100</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_SUM = <span class="number">1e5</span>;</span><br><span class="line"><span class="type">bool</span> dp[MAX_N + <span class="number">1</span>][MAX_SUM + <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">coins_values</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; coins_values[i];</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> current_sum = <span class="number">0</span>; current_sum &lt;= MAX_SUM; current_sum++) &#123;</span><br><span class="line">            dp[i][current_sum] = dp[i - <span class="number">1</span>][current_sum];</span><br><span class="line">            <span class="type">int</span> prev_sum = current_sum - coins_values[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (prev_sum &gt;= <span class="number">0</span> &amp;&amp; dp[i - <span class="number">1</span>][prev_sum]) &#123;</span><br><span class="line">                dp[i][current_sum] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; possible;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> sum = <span class="number">1</span>; sum &lt;= MAX_SUM; sum++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[n][sum]) &#123;</span><br><span class="line">            possible.<span class="built_in">push_back</span>(sum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; (<span class="type">int</span>)(possible.<span class="built_in">size</span>()) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> sum : possible) &#123;</span><br><span class="line">        cout &lt;&lt; sum &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>Kattio Class in Java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Kattio</span> <span class="keyword">extends</span> <span class="title class_">PrintWriter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BufferedReader r;</span><br><span class="line">    <span class="keyword">private</span> StringTokenizer st;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// standard input</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Kattio</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(System.in, System.out);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Kattio</span><span class="params">(InputStream i, OutputStream o)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(o);</span><br><span class="line">        r = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// USACO-style file input</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Kattio</span><span class="params">(String problemName)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(problemName + <span class="string">&quot;.out&quot;</span>));</span><br><span class="line">        r = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(problemName + <span class="string">&quot;.in&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// read next line</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">readLine</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> r.readLine();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// returns null if no more input</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (st == <span class="literal">null</span> || !st.hasMoreTokens())</span><br><span class="line">                st = <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(r.readLine());</span><br><span class="line">            <span class="keyword">return</span> st.nextToken();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(next());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">nextDouble</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Double.parseDouble(next());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">nextLong</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Long.parseLong(next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图片-images">图片 Images</h3><p>Image:</p><div class="tag-plugin image"><div class="image-bg"><img src="https://pandao.github.io/editor.md/examples/images/4.jpg" fancybox="true"/></div></div><blockquote><p>Follow your heart.</p></blockquote><div class="tag-plugin image"><div class="image-bg"><img src="https://pandao.github.io/editor.md/examples/images/8.jpg" fancybox="true"/></div></div><blockquote><p>图为：厦门白城沙滩</p></blockquote><p>图片加链接 (Image + Link)：</p><p><ahref="https://pandao.github.io/editor.md/images/7.jpg"><div class="tag-plugin image"><div class="image-bg"><img src="https://pandao.github.io/editor.md/examples/images/7.jpg" fancybox="true"/></div></div></a></p><blockquote><p>图为：李健首张专辑《似水流年》封面</p></blockquote><hr /><h3 id="列表-lists">列表 Lists</h3><h4 id="无序列表减号unordered-lists--">无序列表（减号）Unordered Lists(-)</h4><ul><li>列表一</li><li>列表二</li><li>列表三</li></ul><h4 id="无序列表星号unordered-lists">无序列表（星号）Unordered Lists(*)</h4><ul><li>列表一</li><li>列表二</li><li>列表三</li></ul><h4id="无序列表加号和嵌套unordered-lists">无序列表（加号和嵌套）UnorderedLists (+)</h4><ul><li>列表一</li><li>列表二<ul><li>列表二 -1</li><li>列表二 -2</li><li>列表二 -3</li></ul></li><li>列表三<ul><li>列表一</li><li>列表二</li><li>列表三</li></ul></li></ul><h4 id="有序列表-ordered-lists--">有序列表 Ordered Lists (-)</h4><ol type="1"><li>第一行</li><li>第二行</li><li>第三行</li></ol><h4 id="gfm-task-list">GFM task list</h4><ul class="task-list"><li><label><input type="checkbox" checked="" />GFM task list1</label></li><li><label><input type="checkbox" checked="" />GFM task list2</label></li><li><label><input type="checkbox" />GFM task list 3</label><ul class="task-list"><li><label><input type="checkbox" />GFM task list 3-1</label></li><li><label><input type="checkbox" />GFM task list 3-2</label></li><li><label><input type="checkbox" />GFM task list 3-3</label></li></ul></li><li><label><input type="checkbox" />GFM task list 4</label><ul class="task-list"><li><label><input type="checkbox" />GFM task list 4-1</label></li><li><label><input type="checkbox" />GFM task list 4-2</label></li></ul></li></ul><hr /><h3 id="绘制表格-tables">绘制表格 Tables</h3><table><thead><tr class="header"><th>项目</th><th style="text-align: right;">价格</th><th style="text-align: center;">数量</th></tr></thead><tbody><tr class="odd"><td>计算机</td><td style="text-align: right;">$1600</td><td style="text-align: center;">5</td></tr><tr class="even"><td>手机</td><td style="text-align: right;">$12</td><td style="text-align: center;">12</td></tr><tr class="odd"><td>管线</td><td style="text-align: right;">$1</td><td style="text-align: center;">234</td></tr></tbody></table><table><thead><tr class="header"><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr class="odd"><td>Content Cell</td><td>Content Cell</td></tr><tr class="even"><td>Content Cell</td><td>Content Cell</td></tr></tbody></table><table><thead><tr class="header"><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr class="odd"><td>Content Cell</td><td>Content Cell</td></tr><tr class="even"><td>Content Cell</td><td>Content Cell</td></tr></tbody></table><table><thead><tr class="header"><th>Function name</th><th>Description</th></tr></thead><tbody><tr class="odd"><td><code>help()</code></td><td>Display the help window.</td></tr><tr class="even"><td><code>destroy()</code></td><td><strong>Destroy your computer!</strong></td></tr></tbody></table><table><thead><tr class="header"><th style="text-align: left;">Left-Aligned</th><th style="text-align: center;">Center Aligned</th><th style="text-align: right;">Right Aligned</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">col 3 is</td><td style="text-align: center;">some wordy text</td><td style="text-align: right;">$1600</td></tr><tr class="even"><td style="text-align: left;">col 2 is</td><td style="text-align: center;">centered</td><td style="text-align: right;">$12</td></tr><tr class="odd"><td style="text-align: left;">zebra stripes</td><td style="text-align: center;">are neat</td><td style="text-align: right;">$1</td></tr></tbody></table><table><thead><tr class="header"><th>Item</th><th style="text-align: right;">Value</th></tr></thead><tbody><tr class="odd"><td>Computer</td><td style="text-align: right;">$1600</td></tr><tr class="even"><td>Phone</td><td style="text-align: right;">$12</td></tr><tr class="odd"><td>Pipe</td><td style="text-align: right;">$1</td></tr></tbody></table><hr /><h4 id="特殊符号-html-entities-codes">特殊符号 HTML Entities Codes</h4><p>© &amp; ¨ ™ ¡ £ &amp; &lt; &gt; ¥ € ® ± ¶ § ¦ ¯ « ·</p><p>X² Y³ ¾ ¼ × ÷ »</p><p>18ºC " '</p><h3 id="emoji-表情">Emoji 表情 <span class="github-emoji"data-alias="smiley" style=""data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8">😃</span></h3><blockquote><p>Blockquotes <span class="github-emoji" data-alias="star" style=""data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span></p></blockquote><h4id="gfm-task-lists-emoji-fontawesome-icon-emoji-editormd-logo-emoji-editormd-logo-5x">GFMtask lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logoemoji :editormd-logo-5x</h4><ul class="task-list"><li><label><input type="checkbox" checked="" /><spanclass="github-emoji" data-alias="smiley" style=""data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8">😃</span><span class="citation" data-cites="mentions">@mentions</span>, <spanclass="github-emoji" data-alias="smiley" style=""data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8">😃</span>#refs, <a href="">links</a>, <strong>formatting</strong>, and<del>tags</del> supported :editormd-logo:;</label></li><li><label><input type="checkbox" checked="" />list syntax required (anyunordered or ordered list supported) :editormd-logo-3x:;</label></li><li><label><input type="checkbox" checked="" />[ ] <spanclass="github-emoji" data-alias="smiley" style=""data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8">😃</span>this is a complete item <span class="github-emoji" data-alias="smiley"style=""data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8">😃</span>;</label></li><li><label><input type="checkbox" />[]this is an incomplete item <ahref="#">test link</a> :fa-star: <span class="citation"data-cites="pandao">@pandao</span>;</label></li><li><label><input type="checkbox" />[ ]this is an incomplete item:fa-star: :fa-gear:;</label><ul class="task-list"><li><label><input type="checkbox" /><span class="github-emoji"data-alias="smiley" style=""data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8">😃</span>this is an incomplete item <a href="#">test link</a> :fa-star::fa-gear:;</label></li><li><label><input type="checkbox" /><span class="github-emoji"data-alias="smiley" style=""data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8">😃</span>this is :fa-star: :fa-gear: an incomplete item <a href="#">testlink</a>;</label></li></ul></li></ul><h4 id="反斜杠-escape">反斜杠 Escape</h4><p>*literal asterisks*</p><h3 id="科学公式-tex-katex">科学公式 TeX (KaTeX)</h3><p><span class="math inline">\(E=mc^2\)</span></p><p>行内的公式 <span class="math inline">\(E=mc^2\)</span></p><p>行内的 <span class="math inline">\(E=mc^2\)</span> 公式。</p><p><span class="math display">\[x &gt; y\]</span></p><p><span class="math display">\[(\sqrt{3x-1}+(1+x)^2)\]</span></p><p><span class="math display">\[\sin(\alpha)^{\theta}=\sum_{i=0}^{n}(x^i+ \cos(f))\]</span></p><p>多行公式：</p><p><span class="math display">\[\displaystyle    \frac{1}{        \Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{        \frac25 \pi}} = 1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {        1+\frac{e^{-6\pi}}        {1+\frac{e^{-8\pi}}         {1+\cdots} }        }    }\]</span></p><h3 id="绘制流程图-flowchart">绘制流程图 Flowchart</h3><div id="flowchart-0" class="flow-chart"></div><h3 id="绘制序列图-sequence-diagram">绘制序列图 Sequence Diagram</h3><div id="sequence-0"></div><h3 id="end">End</h3><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 用户登陆op=>operation: 登陆操作cond=>condition: 登陆成功 Yes or No?e=>end: 进入后台st->op->condcond(yes)->econd(no)->op</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><script src="https://cdn.bootcss.com/webfont/1.6.28/webfontloader.js"></script><script src="https://cdn.bootcss.com/raphael/2.2.8/raphael.min.js"></script><script src="https://cdn.bootcss.com/snap.svg/0.5.1/snap.svg-min.js"></script><script src="https://cdn.bootcss.com/underscore.js/1.9.1/underscore-min.js"></script><script src="https://cdn.bootcss.com/js-sequence-diagrams/1.0.6/sequence-diagram-min.js"></script><textarea id="sequence-0-code" style="display: none">Andrew->China: Says Hello Note right of China: China thinks\nabout it China-->Andrew: How are you? Andrew->>China: I am good thanks!</textarea><textarea id="sequence-0-options" style="display: none">{"theme":"simple"}</textarea><script>  var code = document.getElementById("sequence-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-0-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-0", options);</script>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown Example</title>
      <link href="/en/markdown-example/"/>
      <url>/en/markdown-example/</url>
      
        <content type="html"><![CDATA[<p>The source file of this post is a Markdown file to test thecompatibility of some Markdown features.</p><span id="more"></span><div class="tag-plugin image"><div class="image-bg"><img src="https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png" fancybox="true"/></div></div><p><strong>Table of Contents</strong></p><p>[TOCM]</p><p>[TOC]</p><h1 id="heading-1">Heading 1</h1><h2 id="heading-2">Heading 2</h2><h3 id="heading-3">Heading 3</h3><h4 id="heading-4">Heading 4</h4><h5 id="heading-5">Heading 5</h5><h6 id="heading-6">Heading 6</h6><h4 id="heading-underline">Heading (underline)</h4><h1 id="this-is-an-h1">This is an H1</h1><h2 id="this-is-an-h2">This is an H2</h2><h3 id="text-effects-and-horizontal-lines">Text effects and horizontallines</h3><hr /><p><del>delete</del> <s>delete</s> <em>Italic</em> <em>Italic</em><strong>Bold</strong> <strong>Bold</strong> <strong><em>ItalicBold</em></strong> <strong><em>Italic Bold</em></strong></p><p>Superscript：X<sub>2</sub>，Subscript：O<sup>2</sup></p><h3 id="abbreviations-html-abbr-tag">Abbreviations (HTML abbr tag)</h3><blockquote><p>The abbrivation of a long word or phrase, which is enabled by defaultwhen recognizing HTML tags.</p></blockquote><p>The <abbr title="Hyper Text Markup Language">HTML</abbr>specification is maintained by the<abbr title="World Wide Web Consortium">W3C</abbr>.</p><h3 id="blockquotes">Blockquotes</h3><blockquote><p>Blockquotes</p></blockquote><p>Blockquotes</p><blockquote><p>Quote: If you want to insert a blank line break (that is, the<code>&lt;br/&gt;</code> tag), add two or more spaces at the insertionpoint and then press Enter. <a href="http://localhost/">NormalLink</a>.</p></blockquote><h3 id="links">Links</h3><p><a href="http://localhost/">Normal Link</a></p><p><a href="http://localhost/" title="普通链接带标题">Normal Link withTitle</a></p><p>Direct Link: <a href="https://github.com"class="uri">https://github.com</a></p><p><a href="http://www.this-anchor-link.com/">Anchor Link</a></p><p><ahref="mailto:test.test@gmail.com">mailto:test.test@gmail.com</a></p><p>GFM a-tail link <span class="citation"data-cites="pandao">@pandao</span> AUTO LINK FOR EMAILtest.test@gmail.com www@vip.qq.com</p><blockquote><p><span class="citation" data-cites="pandao">@pandao</span></p></blockquote><h3 id="codes">Codes</h3><h4 id="inline-code">Inline code</h4><p>Execute command: <code>npm install marked</code></p><h4 id="indented-code">Indented code</h4><p>Indent with for spaces, also for implement Preformatted Text functionsimilar to <code>&lt;pre&gt;</code>.</p><pre><code>&lt;?php    echo &quot;Hello world!&quot;;?&gt;</code></pre><p>Preformatted Text</p><pre><code>| First Header  | Second Header || ------------- | ------------- || Content Cell  | Content Cell  || Content Cell  | Content Cell  |</code></pre><h4 id="multi-line-codeblock">Multi-line codeblock</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_N = <span class="number">100</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_SUM = <span class="number">1e5</span>;</span><br><span class="line"><span class="type">bool</span> dp[MAX_N + <span class="number">1</span>][MAX_SUM + <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">coins_values</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; coins_values[i];</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> current_sum = <span class="number">0</span>; current_sum &lt;= MAX_SUM; current_sum++) &#123;</span><br><span class="line">            dp[i][current_sum] = dp[i - <span class="number">1</span>][current_sum];</span><br><span class="line">            <span class="type">int</span> prev_sum = current_sum - coins_values[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (prev_sum &gt;= <span class="number">0</span> &amp;&amp; dp[i - <span class="number">1</span>][prev_sum]) &#123;</span><br><span class="line">                dp[i][current_sum] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; possible;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> sum = <span class="number">1</span>; sum &lt;= MAX_SUM; sum++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[n][sum]) &#123;</span><br><span class="line">            possible.<span class="built_in">push_back</span>(sum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; (<span class="type">int</span>)(possible.<span class="built_in">size</span>()) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> sum : possible) &#123;</span><br><span class="line">        cout &lt;&lt; sum &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>Kattio Class in Java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Kattio</span> <span class="keyword">extends</span> <span class="title class_">PrintWriter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BufferedReader r;</span><br><span class="line">    <span class="keyword">private</span> StringTokenizer st;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// standard input</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Kattio</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(System.in, System.out);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Kattio</span><span class="params">(InputStream i, OutputStream o)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(o);</span><br><span class="line">        r = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// USACO-style file input</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Kattio</span><span class="params">(String problemName)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(problemName + <span class="string">&quot;.out&quot;</span>));</span><br><span class="line">        r = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(problemName + <span class="string">&quot;.in&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// read next line</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">readLine</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> r.readLine();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// returns null if no more input</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (st == <span class="literal">null</span> || !st.hasMoreTokens())</span><br><span class="line">                st = <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(r.readLine());</span><br><span class="line">            <span class="keyword">return</span> st.nextToken();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(next());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">nextDouble</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Double.parseDouble(next());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">nextLong</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Long.parseLong(next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="images">Images</h3><p>Image:</p><div class="tag-plugin image"><div class="image-bg"><img src="https://pandao.github.io/editor.md/examples/images/4.jpg" fancybox="true"/></div></div><blockquote><p>Follow your heart.</p></blockquote><div class="tag-plugin image"><div class="image-bg"><img src="https://pandao.github.io/editor.md/examples/images/8.jpg" fancybox="true"/></div></div><blockquote><p>图为：厦门白城沙滩</p></blockquote><p>Image + Link:</p><p><ahref="https://pandao.github.io/editor.md/images/7.jpg"><div class="tag-plugin image"><div class="image-bg"><img src="https://pandao.github.io/editor.md/examples/images/7.jpg" fancybox="true"/></div></div></a></p><blockquote><p>图为：李健首张专辑《似水流年》封面</p></blockquote><hr /><h3 id="列表-lists">列表 Lists</h3><h4 id="无序列表减号unordered-lists--">无序列表（减号）Unordered Lists(-)</h4><ul><li>列表一</li><li>列表二</li><li>列表三</li></ul><h4 id="无序列表星号unordered-lists">无序列表（星号）Unordered Lists(*)</h4><ul><li>列表一</li><li>列表二</li><li>列表三</li></ul><h4id="无序列表加号和嵌套unordered-lists">无序列表（加号和嵌套）UnorderedLists (+)</h4><ul><li>列表一</li><li>列表二<ul><li>列表二 -1</li><li>列表二 -2</li><li>列表二 -3</li></ul></li><li>列表三<ul><li>列表一</li><li>列表二</li><li>列表三</li></ul></li></ul><h4 id="有序列表-ordered-lists--">有序列表 Ordered Lists (-)</h4><ol type="1"><li>第一行</li><li>第二行</li><li>第三行</li></ol><h4 id="gfm-task-list">GFM task list</h4><ul class="task-list"><li><label><input type="checkbox" checked="" />GFM task list1</label></li><li><label><input type="checkbox" checked="" />GFM task list2</label></li><li><label><input type="checkbox" />GFM task list 3</label><ul class="task-list"><li><label><input type="checkbox" />GFM task list 3-1</label></li><li><label><input type="checkbox" />GFM task list 3-2</label></li><li><label><input type="checkbox" />GFM task list 3-3</label></li></ul></li><li><label><input type="checkbox" />GFM task list 4</label><ul class="task-list"><li><label><input type="checkbox" />GFM task list 4-1</label></li><li><label><input type="checkbox" />GFM task list 4-2</label></li></ul></li></ul><hr /><h3 id="绘制表格-tables">绘制表格 Tables</h3><table><thead><tr class="header"><th>项目</th><th style="text-align: right;">价格</th><th style="text-align: center;">数量</th></tr></thead><tbody><tr class="odd"><td>计算机</td><td style="text-align: right;">$1600</td><td style="text-align: center;">5</td></tr><tr class="even"><td>手机</td><td style="text-align: right;">$12</td><td style="text-align: center;">12</td></tr><tr class="odd"><td>管线</td><td style="text-align: right;">$1</td><td style="text-align: center;">234</td></tr></tbody></table><table><thead><tr class="header"><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr class="odd"><td>Content Cell</td><td>Content Cell</td></tr><tr class="even"><td>Content Cell</td><td>Content Cell</td></tr></tbody></table><table><thead><tr class="header"><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr class="odd"><td>Content Cell</td><td>Content Cell</td></tr><tr class="even"><td>Content Cell</td><td>Content Cell</td></tr></tbody></table><table><thead><tr class="header"><th>Function name</th><th>Description</th></tr></thead><tbody><tr class="odd"><td><code>help()</code></td><td>Display the help window.</td></tr><tr class="even"><td><code>destroy()</code></td><td><strong>Destroy your computer!</strong></td></tr></tbody></table><table><thead><tr class="header"><th style="text-align: left;">Left-Aligned</th><th style="text-align: center;">Center Aligned</th><th style="text-align: right;">Right Aligned</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">col 3 is</td><td style="text-align: center;">some wordy text</td><td style="text-align: right;">$1600</td></tr><tr class="even"><td style="text-align: left;">col 2 is</td><td style="text-align: center;">centered</td><td style="text-align: right;">$12</td></tr><tr class="odd"><td style="text-align: left;">zebra stripes</td><td style="text-align: center;">are neat</td><td style="text-align: right;">$1</td></tr></tbody></table><table><thead><tr class="header"><th>Item</th><th style="text-align: right;">Value</th></tr></thead><tbody><tr class="odd"><td>Computer</td><td style="text-align: right;">$1600</td></tr><tr class="even"><td>Phone</td><td style="text-align: right;">$12</td></tr><tr class="odd"><td>Pipe</td><td style="text-align: right;">$1</td></tr></tbody></table><hr /><h4 id="特殊符号-html-entities-codes">特殊符号 HTML Entities Codes</h4><p>© &amp; ¨ ™ ¡ £ &amp; &lt; &gt; ¥ € ® ± ¶ § ¦ ¯ « ·</p><p>X² Y³ ¾ ¼ × ÷ »</p><p>18ºC " '</p><h3 id="emoji-表情">Emoji 表情 <span class="github-emoji"data-alias="smiley" style=""data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8">😃</span></h3><blockquote><p>Blockquotes <span class="github-emoji" data-alias="star" style=""data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span></p></blockquote><h4id="gfm-task-lists-emoji-fontawesome-icon-emoji-editormd-logo-emoji-editormd-logo-5x">GFMtask lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logoemoji :editormd-logo-5x</h4><ul class="task-list"><li><label><input type="checkbox" checked="" /><spanclass="github-emoji" data-alias="smiley" style=""data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8">😃</span><span class="citation" data-cites="mentions">@mentions</span>, <spanclass="github-emoji" data-alias="smiley" style=""data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8">😃</span>#refs, <a href="">links</a>, <strong>formatting</strong>, and<del>tags</del> supported :editormd-logo:;</label></li><li><label><input type="checkbox" checked="" />list syntax required (anyunordered or ordered list supported) :editormd-logo-3x:;</label></li><li><label><input type="checkbox" checked="" />[ ] <spanclass="github-emoji" data-alias="smiley" style=""data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8">😃</span>this is a complete item <span class="github-emoji" data-alias="smiley"style=""data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8">😃</span>;</label></li><li><label><input type="checkbox" />[]this is an incomplete item <ahref="#">test link</a> :fa-star: <span class="citation"data-cites="pandao">@pandao</span>;</label></li><li><label><input type="checkbox" />[ ]this is an incomplete item:fa-star: :fa-gear:;</label><ul class="task-list"><li><label><input type="checkbox" /><span class="github-emoji"data-alias="smiley" style=""data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8">😃</span>this is an incomplete item <a href="#">test link</a> :fa-star::fa-gear:;</label></li><li><label><input type="checkbox" /><span class="github-emoji"data-alias="smiley" style=""data-fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8">😃</span>this is :fa-star: :fa-gear: an incomplete item <a href="#">testlink</a>;</label></li></ul></li></ul><h4 id="反斜杠-escape">反斜杠 Escape</h4><p>*literal asterisks*</p><h3 id="科学公式-tex-katex">科学公式 TeX (KaTeX)</h3><p><span class="math inline">\(E=mc^2\)</span></p><p>行内的公式 <span class="math inline">\(E=mc^2\)</span></p><p>行内的 <span class="math inline">\(E=mc^2\)</span> 公式。</p><p><span class="math display">\[x &gt; y\]</span></p><p><span class="math display">\[(\sqrt{3x-1}+(1+x)^2)\]</span></p><p><span class="math display">\[\sin(\alpha)^{\theta}=\sum_{i=0}^{n}(x^i+ \cos(f))\]</span></p><p>多行公式：</p><p><span class="math display">\[\displaystyle    \frac{1}{        \Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{        \frac25 \pi}} = 1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {        1+\frac{e^{-6\pi}}        {1+\frac{e^{-8\pi}}         {1+\cdots} }        }    }\]</span></p><h3 id="绘制流程图-flowchart">绘制流程图 Flowchart</h3><div id="flowchart-0" class="flow-chart"></div><h3 id="绘制序列图-sequence-diagram">绘制序列图 Sequence Diagram</h3><div id="sequence-0"></div><h3 id="end">End</h3><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 用户登陆op=>operation: 登陆操作cond=>condition: 登陆成功 Yes or No?e=>end: 进入后台st->op->condcond(yes)->econd(no)->op</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><script src="https://cdn.bootcss.com/webfont/1.6.28/webfontloader.js"></script><script src="https://cdn.bootcss.com/raphael/2.2.8/raphael.min.js"></script><script src="https://cdn.bootcss.com/snap.svg/0.5.1/snap.svg-min.js"></script><script src="https://cdn.bootcss.com/underscore.js/1.9.1/underscore-min.js"></script><script src="https://cdn.bootcss.com/js-sequence-diagrams/1.0.6/sequence-diagram-min.js"></script><textarea id="sequence-0-code" style="display: none">Andrew->China: Says Hello Note right of China: China thinks\nabout it China-->Andrew: How are you? Andrew->>China: I am good thanks!</textarea><textarea id="sequence-0-options" style="display: none">{"theme":"simple"}</textarea><script>  var code = document.getElementById("sequence-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-0-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-0", options);</script>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
